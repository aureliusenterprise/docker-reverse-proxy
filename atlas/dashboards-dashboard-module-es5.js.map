{"version":3,"sources":["webpack:///src/app/dashboards/dashboard-routing.module.ts","webpack:///src/app/dashboards/dashboard.module.ts","webpack:///src/app/dashboards/domains/cards/cards-dashboard.component.ts","webpack:///src/app/dashboards/domains/cards/cards-dashboard.component.html","webpack:///src/app/dashboards/domains/domains.component.ts","webpack:///src/app/dashboards/domains/domains.component.html","webpack:///src/app/dashboards/domains/domains.service.ts"],"names":["childRoutes","path","pathMatch","redirectTo","component","routes","children","DashboardRoutingModule","forChild","imports","exports","DashboardModule","declarations","CardDashboardComponent","router","guid","navigate","selector","templateUrl","styleUrls","providers","DomainsComponent","domainsService","listOfDashboardDomains$","select","isRetrivingDomainsForDashboards$","totalNumberOfDataDomains$","totalNumberOfActiveDomains$","dashboardDomainsDefaultContext","isRetrivingDashboardInformation","DomainsService","name","defaultState","init","getAllDomainsForDashboard","toPromise","results","listOfDomains","Object","values","domains","sort","a","b","localeCompare","totalNumberOfDataDomains","totalNumberOfDomains","numberOfActiveDomains","totalNumberOfActiveDomains","update","description","payload","listOfDashboardDomains"],"mappings":"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","file":"dashboards-dashboard-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { Shell } from \"@models4insight/shell\";\r\nimport { DomainsComponent } from \"./domains/domains.component\";\r\n\r\nconst childRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'domains'\r\n    },\r\n    {\r\n        path: 'domains',\r\n        component: DomainsComponent\r\n    },\r\n    {\r\n        path: '**',\r\n        pathMatch: 'full',\r\n        redirectTo: 'domains'\r\n    }\r\n]\r\nconst routes: Routes = [\r\n    Shell.childRoutes([\r\n        {\r\n            path: '',\r\n            component: DomainsComponent,\r\n            children: childRoutes\r\n        }\r\n    ])\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\r\nimport { DashboardRoutingModule } from \"./dashboard-routing.module\";\r\nimport { CardDashboardComponent } from \"./domains/cards/cards-dashboard.component\";\r\nimport { DomainsComponent } from \"./domains/domains.component\";\r\n@NgModule({\r\n    declarations: [DomainsComponent, CardDashboardComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FontAwesomeModule,\r\n        DashboardRoutingModule\r\n    ]\r\n})\r\nexport class DashboardModule { }\r\n","import { Component, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DomainForDashboard } from '@models4insight/atlas/api';\r\n\r\n@Component({\r\n  selector: 'models4insight-cards-dashboard',\r\n  templateUrl: './cards-dashboard.component.html',\r\n  styleUrls: ['./cards-dashboard.component.scss'],\r\n  providers: []\r\n})\r\nexport class CardDashboardComponent {\r\n  constructor(private readonly router: Router) {}\r\n  @Input() dataDomain: DomainForDashboard;\r\n\r\n  directToDetailsPage(guid: string) {\r\n    this.router.navigate(['search/details', guid]);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <ng-container *ngIf=\"dataDomain.isActive\">\r\n        <div class=\"active box\" (click)=\"directToDetailsPage(dataDomain.guid)\">\r\n            <p class=\"title is-6 name\"> {{dataDomain.name}}</p>\r\n            <p>\r\n                Data Dictionary:\r\n            </p>\r\n            <p class=\"subtitle is-6\">\r\n                {{dataDomain.totalNumberOfEntities}} conceptual entities\r\n            </p>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!dataDomain.isActive\">\r\n        <div class=\"inactive box\">\r\n            <h2 class=\"title is-5\"> {{dataDomain.name}}</h2>\r\n            <p>\r\n                No data Dictionary created.\r\n            </p>\r\n        </div>\r\n    </ng-container>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { DomainForDashboard } from '@models4insight/atlas/api';\r\nimport { Observable } from 'rxjs';\r\nimport { DomainsService } from './domains.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-domains',\r\n  templateUrl: './domains.component.html',\r\n  styleUrls: ['./domains.component.scss'],\r\n  providers: [DomainsService]\r\n})\r\nexport class DomainsComponent implements OnInit {\r\n  totalNumberOfDataDomains$: Observable<number>\r\n  totalNumberOfActiveDomains$: Observable<number>\r\n  listOfDashboardDomains$: Observable<DomainForDashboard[]>\r\n  isRetrivingDomainsForDashboards$: Observable<boolean>\r\n\r\n  constructor(private readonly domainsService: DomainsService) { }\r\n\r\n  ngOnInit() {\r\n    this.listOfDashboardDomains$ = this.domainsService.select('listOfDashboardDomains');\r\n    this.isRetrivingDomainsForDashboards$ = this.domainsService.select('isRetrivingDashboardInformation');\r\n    this.totalNumberOfDataDomains$ = this.domainsService.select('totalNumberOfDataDomains');\r\n    this.totalNumberOfActiveDomains$ = this.domainsService.select('totalNumberOfActiveDomains')\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <ng-container *ngIf=\"listOfDashboardDomains$ | async as domains\">\r\n        <ng-container *ngIf=\"totalNumberOfDataDomains$ | async as totalNumberOfDomains \">\r\n            <ng-container *ngIf=\"totalNumberOfActiveDomains$ | async as numberOfActiveDomains \">\r\n                <div class=\"title\">State of Data Governance at Van Oord</div>\r\n                <div class=\"progress-wrapper\">\r\n                    <progress class=\"progress is-primary is-large\" value=\"{{numberOfActiveDomains}}\"\r\n                        max=\"{{totalNumberOfDomains}}\">\r\n                    </progress>\r\n                    <p class=\"progress-value has-text-black\">\r\n                        {{numberOfActiveDomains}} of {{totalNumberOfDomains}} departaments.\r\n                    </p>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n        <div class=\"box\">\r\n            <ng-container *ngFor=\"let domain of domains\">\r\n                <models4insight-cards-dashboard [dataDomain]=\"domain\"></models4insight-cards-dashboard>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { DomainForDashboard, getDashboard, ListOfDomainsForDashboard } from '@models4insight/atlas/api';\r\nimport { BasicStore } from '@models4insight/redux';\r\n\r\nexport interface DashboardDomainsContext {\r\n  readonly isRetrivingDashboardInformation: boolean,\r\n  readonly listOfDashboardDomains?: DomainForDashboard[]\r\n  readonly totalNumberOfDataDomains?: number\r\n  readonly totalNumberOfActiveDomains?: number\r\n}\r\n\r\nconst dashboardDomainsDefaultContext: DashboardDomainsContext = {\r\n  isRetrivingDashboardInformation: true\r\n};\r\n\r\n@Injectable()\r\nexport class DomainsService extends BasicStore<DashboardDomainsContext> {\r\n  constructor() {\r\n    super({ name: 'DashBoardDomain', defaultState: dashboardDomainsDefaultContext });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.getAllDomainsForDashboard();\r\n  }\r\n\r\n  private async getAllDomainsForDashboard() {\r\n    const results: ListOfDomainsForDashboard = await getDashboard().toPromise()\r\n\r\n    const listOfDomains = Object.values(results.domains).sort(function (a, b) {\r\n      return a.name.localeCompare(b.name);\r\n    })\r\n    const totalNumberOfDataDomains = results.totalNumberOfDomains\r\n    const numberOfActiveDomains = results.totalNumberOfActiveDomains\r\n\r\n    this.update({\r\n      description: \"New set of Dashboards available\",\r\n      payload: {\r\n        isRetrivingDashboardInformation: false,\r\n        listOfDashboardDomains: listOfDomains,\r\n        totalNumberOfDataDomains: totalNumberOfDataDomains,\r\n        totalNumberOfActiveDomains: numberOfActiveDomains\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\n"]}