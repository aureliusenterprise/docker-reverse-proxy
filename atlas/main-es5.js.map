{"version":3,"sources":["webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/atlas-api.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/delete-entity-soft/delete-entity-soft.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/delete-entity-soft/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-domains/get-all-domains.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-domains/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-systems/get-all-systems.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-systems/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-app-seach-entity/get-app-search-entity.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-app-seach-entity/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-def-by-name/get-classification-def-by-name.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-def-by-name/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-definitions/get-classification-definitions.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-definitions/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-for-entity/get-classification-for-entity.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-for-entity/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-dashboard/get-dashboards.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-dashboard/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-data-quality/get-data-quality.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-data-quality/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-entity-by-id/get-entity-by-id.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-entity-by-id/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-filters-and-results/get-filters-and-results.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-filters-and-results/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-governance-quality/get-governance-quality.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-governance-quality/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-lineage-model/get-lineage-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-lineage-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-query-results/get-query-results.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-query-results/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-term-by-id/get-term-by-id.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-term-by-id/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-terms-definitions/get-terms-definitions.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-terms-definitions/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-by-name/get-type-by-name.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-by-name/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-defs/get-type-defs.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-defs/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/remove-entity-classification/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/remove-entity-classification/remove-entity-classification.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity-classification/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity-classification/save-entity-classification.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity/save-entity.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/types.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/utils.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.guard.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/keycloak.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/core/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/core/src/lib/core.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/google-analytics/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/authorization-header-filter.interceptor.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/authorization-header.interceptor.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/cache.interceptor.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/error-handler.interceptor.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/http-cache.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/http-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/http.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/http.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/http/src/lib/ie-cache-header-interceptor.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/i18n/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/logger/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/notifications/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/abstract-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/abstract-branch-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/has-branch-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/abstract-project-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/has-project-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.directive.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/abstract-store.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/action.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/basic-store.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/redux-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/redux.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/redux/src/lib/store.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/check-commit-status/check-commit-status.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/check-commit-status/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-data/commit-data.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-data/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-event-log/commit-event-log.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-event-log/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-json-model/commit-json-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-json-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-model/commit-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/compare-models/compare-models.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/compare-models/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/constants.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-metric-exemption/create-metric-exemption.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-metric-exemption/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-project/create-project.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-project/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-branch/delete-branch.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-branch/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-metric-exemption/delete-metric-exemption.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-metric-exemption/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-project/delete-project.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-project/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-user-group/delete-user-group.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-user-group/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/download-model/download-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/download-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/force-commit-model/force-commit-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/force-commit-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branch/get-branch.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branch/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches-summary/get-branches-summary.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches-summary/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches/get-branches.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-metric-exemption/get-metric-exemption.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-metric-exemption/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model-conflict/get-model-conflict.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model-conflict/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model/get-model.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-project/get-project.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-project/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance-summary/get-provenance-summary.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance-summary/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance/get-provenance.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-group/get-user-group.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-group/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-groups/get-user-groups.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-groups/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-info/get-user-info.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-info/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-projects/get-user-projects.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-projects/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-role/get-user-role.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-role/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/log-clickstream-event/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/log-clickstream-event/log-clickstream-event.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/merge-branch/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/merge-branch/merge-branch.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/modelview-convert/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/modelview-convert/modelview-convert.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/monitor-status/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/monitor-status/monitor-status.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/report-error/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/report-error/report-error.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository-version/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository-version/repository-version.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/types.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-branch/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-branch/update-branch.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-project/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-project/update-project.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-group/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-group/update-user-group.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-info/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-info/update-user-info.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/user-search/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/user-search/user-search.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/repository/src/lib/utils.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/branch/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/branch/src/lib/branches.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/branch/src/lib/services-branch.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/commit-model.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/conflicts.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model-data-commit.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model-data.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/retrieve-model.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/services-model.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project-members.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project-user-groups.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/projects.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/services-project.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/favorite-projects.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/last-visited-route.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/recent-projects.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/services-user-info.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/user-info.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/footer/footer.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/footer/footer.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/header/header.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/header/header.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/loading/loading.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/loading/loading.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline-task/pipeline-task.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline-task/pipeline-task.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/route-reusable-strategy.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.component.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.component.html","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/task-manager/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/decorators.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/task-manager.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/task-manager.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/bidirectional-multi-map.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/complex-set.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/custom-error.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/stream.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64-to-b64url.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64-to-blob.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64url-to-b64.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/build-worker-blob-url.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/bytes-to-binary-string.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/circular-replacer.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/combinations.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/copy-to-clipboard.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/decode-xml.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/enumerate.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/find-last.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/flatten-object.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/from-entries.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/get-query-parameters-from-url.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/group-by.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/index-by-property.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/iterate.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/iterator.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/memoize.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/pairs.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/pairwise.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/permutations.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/race-until.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/read-file-as-string.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/rgb-to-hex.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/save-as-file.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/string-to-hash.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/substrings.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/union.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/user-agent-is-edge.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/user-agent-is-internet-explorer.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/validate-required-arguments.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/default-if-falsy.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/switch-tap.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/until-destroyed.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/version/src/index.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/version/src/lib/version-config.service.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/version/src/lib/version.module.ts","webpack:///C:/Users/thijs/Development/models4insight/libs/version/src/lib/version.service.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["AtlasApiModule","injector","BASE_PATH","deleteEntitySoft","guid","http","arguments","path","authorize","getDomains","forceUpdate","cache","get","getSystems","getAppSearchEntity","authorizeFilter","pipe","result","getClassificationTypeByName","name","getClassificationsDefinitions","ignoreRelationships","minExtInfo","queryParameters","requestOptions","params","getClassificationForEntity","entityGuid","classificationName","getDashboard","getDataQuality","query","facets","result_fields","page","filters","sort","post","clearEntityByIdCache","clearCache","getEntityById","getFiltersAndResults","getGovernanceQuality","PATH","getLineageModel","depth","direction","getQueryResults","excludeDeletedEntities","limit","offset","getTermById","getTermsDefinitionById","getTypeByName","getTypeDefs","removeEntityClassification","saveEntityClassification","classifications","saveEntity","entity","Cardinality","IndexType","createHttpParams","Object","entries","forEach","key","value","set","getHttpClient","Error","getHttpCache","AuthenticationConfigService","log","AuthenticationGuard","authenticationService","route","state","isAuthenticated","debug","login","providedIn","AuthenticationModule","config","ngModule","providers","provide","useValue","imports","AuthenticationService","keycloakService","storeService","init","then","update","description","payload","onAuthStateChanged","subscribe","userProfile","credentials","logout","select","accountManagement","updateToken","token","KeycloakService","authState","keycloakAuth","auth","onReady","next","onAuthSuccess","onAuthLogout","onTokenExpired","refreshToken","onAuthRefreshError","options","success","error","Promise","resolve","reject","onLoad","loadUserProfile","authenticated","isSSOAuthenticated","tokenParsed","profile","Core","forRoot","production","appName","shell","keycloak","measurementID","googleAnalyticsMeasurementID","i18n","app","notifications","register","enabled","GoogleAnalyticsConfigService","GoogleAnalyticsModule","googleAnalyticsService","parentModule","GoogleAnalyticsService","router","events","event","url","gtag","page_path","AuthorizationHeaderInterceptorFilter","request","token$","handle","clone","setHeaders","Authorization","AuthorizationHeaderInterceptor","CacheInterceptor","httpCacheService","instance","method","subscriber","cachedData","getCacheData","urlWithParams","complete","setCacheData","ErrorHandlerInterceptor","errorHandler","response","cachePersistenceKey","HttpCacheService","storage","loadCacheData","data","lastUpdated","Date","saveCacheData","cacheEntry","matchAll","filter","cachedUrl","includes","reduce","expirationDate","persistence","cleanCache","window","JSON","stringify","parse","HttpConfigService","HttpModule","useClass","HttpInterceptorHandler","interceptor","intercept","HTTP_DYNAMIC_INTERCEPTORS","HttpService","httpHandler","interceptors","authHeaderInterceptor","addInterceptor","cacheInterceptor","configure","removeInterceptor","handler","reduceRight","interceptorType","i","concat","IECacheHeaderInterceptor","customRequest","headers","I18nConfigService","I18nModule","i18nService","exports","languageKey","extract","s","findTitle","activatedRoute","title","firstChild","I18nService","titleService","translateService","defaultState","defaultLanguage","supportedLanguages","keys","languages","userLanguage","localStorage","getItem","getBrowserCultureLang","lang","translations","setTranslation","onLangChange","currentLanguage","pageTitle","root","setTitle","instant","setItem","userLang","supportedLangs","defaultLang","isSupportedLanguage","noRegion","split","find","supportedLanguage","startsWith","Boolean","use","language","LoggerConfigService","LoggerModule","enableProductionMode","LogLevel","Logger","source","objects","console","Debug","info","Info","time","timeEnd","warn","Warning","func","level","messageContent","join","logMessage","call","NotificationsConfigService","NotificationsModule","NotificationsService","navigator","serviceWorker","ready","registration","serviceWorkerRegistration","Notification","requestPermission","permission","assign","badge","badgePath","icon","iconPath","tag","timestamp","showNotification","AbstractPermissionDirective","templateRef","viewContainer","hasPermission$","hasView","permissionProvider","hasPermission","handlePermissionChange","AbstractBranchPermissionDirective","branchPermissionService","level$","branchName$","branchName","permissionLevel","checkPermission","BranchPermissionDirective","createEmbeddedView","clear","selector","BranchPermissionModule","declarations","BranchPermissionService","projectService","projectPermissionService","checkPermission$","projectId","handleCheckPermission","requiredPermissionLevel","branchPermissionLevel","isOwner","OWNER","HasBranchPermissionDirective","context","FeatureDirective","featureService","subscription$","subscription","FeatureModule","Feature","FeatureService","feature","AbstractProjectPermissionDirective","HasProjectPermissionDirective","ProjectPermissionDirective","ProjectPermissionModule","ProjectPermissionService","selectCurrentProject","project","handleCheckPermissions","getCurrentProject","projectName","toPromise","role_id","win","abstractStoreDefaultState","AbstractStore","rootReducers","actions$","state$","RESET","reduceReset","logger","reducer","dispatch","type","Array","isArray","undefined","Number","isNaN","includeFalsy","values","old","current","action","reduceAction","devTools","send","rootReducer","asObservable","getValue","sessionId","ActionType","reduceDelete","length","slice","reduceSet","reduceUpdate","SET","UPDATE","DELETE","MonitorAsync","indicatorProperty","onComplete","store","target","descriptor","original","args","originalResult","apply","monitorAsync","BasicStore","operation","setIndicatorState","toString","toUpperCase","ReduxConfigService","reduxDevToolsOptions","maxAge","features","pause","lock","persist","jump","skip","reorder","test","ReduxModule","__REDUX_DEVTOOLS_EXTENSION__","connect","StoreService","register$","snapshot$","snapshot","stateMap","checkCommitStatus","taskId","commitData","content","model_id","body","branch","responseType","commitEventLog","eventPath","commitJsonModel","toBranchName","json","userid","parserName","module","comment","raw","commitModel","file","keepOriginalIds","modelId","contentType","ARCHIMATE","formParams","FormData","append","compareModels","baseBranchName","otherBranchName","baseVersion","otherVersion","baseBranch","otherBranch","modelCompareBasePath","modelviewBasePath","repositoryBasePath","repositoryApiBasePath","repositoryLogBasePath","userSearchBasePath","createMetricExemption","exemption","initializeProject","username","email","permissions","last_update_message","committer","createProject","initializedProject","deleteBranch","branchId","requestParameters","project_id","branch_id","deleteMetricExemption","exemptionId","deleteProject","deleteUserGroup","userGroupId","group_id","defaultDownloadModelOptions","findFileName","contentDisposition","matches","exec","trim","downloadModel","fullProjectName","version","observe","Blob","forceCommitModel","fromBranchName","fromModelId","toModelId","commitTaskId","template","addListLeft","addListRight","deleteListLeft","deleteListRight","getBranch","getBranchesSummary","batchSize","queryString","latestOnly","from","until","pageLength","pageOffset","startDate","endDate","getBranches","getMetricExemption","metricName","metric","getModelConflict","index","getModel","getProject","getProvenanceSummary","getProvenance","getUserGroup","getUserGroups","getUserInfo","getUserProjects","userId","getUserRole","logClickstreamEvent","mergeBranch","fromBranch","toBranch","modelviewConvert","svg","width","height","defaultMonitorStatusOptions","retryCount","retryIntervalMax","retryIntervalMin","monitorStatus","status","COMPLETED","FAILURE","initialInterval","maxInterval","maxRetries","difResult","reportError","appVersion","repositoryVersion","RepositoryModule","PermissionLevel","BranchPermission","ProjectPermission","ConflictResolutionTemplateEnum","ConflictChangeTypeEnum","ConflictTypeEnum","ErrorContext","ModelCommitContentTypeEnum","ModelProvenanceOperationEnum","ModelQueryDifResultStateEnum","ModelQueryStateEnum","ParserNameEnum","UserSearch","updateBranch","updateProject","updateUserGroup","userGroup","updateUserInfo","userinfo","userSearch","search","defaultBranchesServiceState","isCreatingBranch","isDeletingBranch","isIndexingBranchesByName","isLoadingBranches","isUpdatingBranch","BranchesService","deleteBranch$","branchDeleted$","createBranch$","branchUpdated$","handleDeleteBranch","handleCreateBranch","handleRetrieveBranches","branches","handleIndexBranchesByName","watch","handleUpdateBranch","id","createBranchResponse","deleteBranchResponse","branchesByName","branchesById","isQuiet","ServicesBranchModule","ClickstreamConfigService","ClickstreamModule","clickstreamService","eventIsNavigationEnd","ClickstreamService","clickstreamEvent","urlAfterRedirects","defaultCommitModelServiceState","isCommittingModel","CommitModelService","conflictsService","taskManager","commitModel$","onModelCommitted$","model","how","handleCommitModel","onModelCommitted","conflictResolutionTemplate","all","task","createTask","commitMethods","commitMethod","uploadModel","addOperation","commitStatus","commit","handleConflicts","registerConflictsForTask","resolveConflicts","CONFLICT","forceCommit","getExecutable","executable","ConflictsService","conflictSetsByTaskId","groupConflictSetsByProjectId","conflictSet","Set","taskIds","map","modelQuery","hasConflicts","addConflictSet","conflictSetsPerProject","formatData","dataByConceptId","ModelDataCommitService","modelDataService","commitData$","dataCommitted$","handleCommitData","onDataCommitted","formattedData","ModelDataService","ModelService","reset","handleRetrieveModel","defaultRetrieveModelServiceState","isRetrievingModel","RetrieveModelService","onModelRetrieved$","retrieveModel$","ServicesModelModule","defaultProjectMembersServiceState","isUpdatingMemberPermissions","ProjectMembersService","projectsService","deleteProjectMember$","projectMemberDeleted$","updateProjectMember$","projectMemberUpdated$","handleDeleteProjectMember","handleUpdateMemberPermissions","BUSINESS_USER","setProjectMemberPermissions","getMemberPermissions","selectMemberPermissions","defaultProjectUserGroupsServiceState","isCreatingUserGroup","isDeletingUserGroup","isRetrievingUserGroups","isUpdatingUserGroup","ProjectUserGroupsService","createUserGroup$","deleteUserGroup$","userGroupDeleted$","userGroupUpdated$","handleRetrieveUserGroups","handleCreateUserGroup","handleDeleteUserGroup","userGroups","handleUpdateUserGroup","createUserGroupResponse","deleteUserGroupResponse","userGroupsById","ProjectService","getProjectById","selectProjectById","defaultProjectsServiceState","isCreatingProject","isDeletingProject","isRetrievingProjects","isUpdatingProject","ProjectsService","createProject$","projectCreated$","deleteProject$","projectDeleted$","projectUpdated$","handleRetrieveProjects","handleCreateProject","handleDeleteProject","projects","handleUpdateProject","projectCreateResponse","projectsById","ServicesProjectModule","FavoriteProjectsService","userInfoService","addFavoriteProject$","removeFavoriteProject$","handleAddFavoriteProject","handleRemoveFavoriteProject","favoriteProjectIds","favoriteProjects","updatedFavoriteProjects","favoriteProject","LastVisitedRouteService","lastVisitedUrl","handleFormatLastVisitedRoute","pathAndParameters","queryParams","RecentProjectsService","addRecentProject$","handleAddRecentProject","recentProjectIds","recentProjects","updatedRecentProjects","recentProject","ServicesUserInfoModule","defaultUserInfoServiceState","isAddingFavoriteProject","isRemovingFavoriteProject","isRetrievingUserInfo","isUpdatingUserInfo","UserInfoService","notAuthenticated","handleRetrieveUserInfo","userInfo","handleUpdateUserInfo","FooterComponent","versionService","faCopyright","copyright","appCopyright","templateUrl","styleUrls","HeaderComponent","shellService","faArrowCircleDown","faBook","faEllipsisV","faSync","menuHidden","appLogoPath","credentials$","currentLanguage$","isAppInstallable$","isUpdateAvailable$","routes$","supportedLanguages$","applyUpdate","installApp","setLanguage","toggleMenu","LoadingComponent","isActive$","PipelineTaskComponent","TaskState","faArrowRight","faBug","report$","isReporting","hasBeenReported","handleReportError","clearTask","currentNavigationContext","relativeTo","navigate","PipelineComponent","tasks$","tasks","currentState","PENDING","RouteReusableStrategy","detachedTree","future","curr","routeConfig","reuse","ShellConfigService","ShellComponent","scrollToTop","setInterval","pos","pageYOffset","scrollTo","clearInterval","onActivate","ShellModule","forChild","shellServiceDefaultState","isAppInstallable","isNavigating","isUpdateAvailable","ShellService","swUpdate","applyUpdate$","installApp$","updateToken$","routes","redirectTo","hidden","navigationInterceptor","previousRoute","currentRoute","handleTrackPreviousRoute","isEnabled","available","activateUpdate","document","location","reload","checkForUpdate","beforeInstallPrompt$","userChoice","decision","outcome","prompt","previousPath","currentPath","Shell","component","children","canActivate","createOperation","thisArg","e","getTaskManagerService","ManagedTask","taskManagerService","TaskManagerModule","defaultTaskOptions","clearOnError","clearOnSuccess","showDetailedErrorDescription","Task","managedBy","interrupt$","operations","INTERRUPTED","onStart","RUNNING","pipeline","handleOperation","DONE","finalize","onInterrupt","onError","ERROR","interrupt","navigateOnSuccess","navigateOnError","TaskManagerService","handleRemoveCompletedTasks","clearAfterError","clearAfterSuccess","BidirectionalMultiMap","container","mapping","inverse","remove","ComplexSet","comparator","array","CustomError","message","setPrototypeOf","prototype","Stream","Symbol","iterator","collector","iterables","base","iterable","distinct","seenItems","item","hasBeenSeen","some","seen","push","predicate","projection","effect","accumulator","startWith","accumulation","number","take","takeUntil","tap","b64ToB64url","base64","replace","b64toBlob","sliceSize","byteCharacters","atob","byteArrays","byteNumbers","charCodeAt","byteArray","Uint8Array","blob","b64urlToB64","base64url","buildWorkerBlobURL","workerFunction","functionName","functionAsString","anonymousFunctionString","workerString","workerBlob","workerBlobUrl","URL","createObjectURL","bytesToBinaryString","bytes","len","byteLength","binary","String","fromCharCode","circularReplacer","WeakSet","has","add","combinations","currentItem","combination","fallbackCopyValueToClipboard","textArea","createElement","style","position","appendChild","focus","execCommand","removeChild","copyToClipboard","clipboard","writeText","specialCharactersMap","pattern","RegExp","replacer","specialCharacter","decodeXML","xml","enumerate","items","findLast","flattenObject","object","property","fromEntries","parseQueryParams","queryParam","decodeURIComponent","getQueryParametersFromUrl","queryParamString","parsedQueryParams","groupBy","indexByProperty","propertyName","row","iterate","done","defaultCacheLimit","defaultResolver","memoize","cacheLimit","resolver","memoized","defineProperty","pairs","a","b","iteratorA","iteratorB","itemA","itemB","pairwise","previous","permutations","permutation","splice","raceUntil","promises","defaultValue","conditionalPromises","promise","race","readFileAsString","reader","FileReader","onload","onerror","onabort","readAsText","componentToHex","c","hex","rgbToHex","r","g","saveAsFile","msSaveOrOpenBlob","msSaveBlob","objectUrl","stringToHash","string","prevHash","currVal","substrings","minLength","maxLength","j","Math","min","substring","union","overwrite","newValue","hasOwnProperty","currentValue","constructor","userAgentIsEdge","userAgent","userAgentIsInternetExplorer","validateRequiredArguments","calleeName","isInvalidFn","invalidArgument","defaultIfFalsy","switchTap","arg","x","untilDestroyedSymbol","untilDestroyed","destroyMethodName","originalDestroy","hasDestroyFunction","VersionConfigService","VersionModule","getVersionDescriptor","dir","VersionService","getRepositoryVersion","repository","webpackEmptyAsyncContext","req","code","pathMatch","loadChildren","m","SearchModule","DashboardModule","AppRoutingModule","scrollPositionRestoration","AppComponent","AppModule","bootstrap","environment","realm","clientId","err"],"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","file":"main-es5.js","sourcesContent":["export * from './lib/atlas-api.module';\r\nexport * from './lib/delete-entity-soft';\r\nexport * from './lib/get-all-domains';\r\nexport * from './lib/get-all-systems';\r\nexport * from './lib/get-app-seach-entity';\r\nexport * from './lib/get-classification-def-by-name';\r\nexport * from './lib/get-classification-definitions';\r\nexport * from './lib/get-classification-for-entity';\r\nexport * from './lib/get-dashboard';\r\nexport * from './lib/get-data-quality';\r\nexport * from './lib/get-entity-by-id';\r\nexport * from './lib/get-filters-and-results';\r\nexport * from './lib/get-governance-quality';\r\nexport * from './lib/get-lineage-model';\r\nexport * from './lib/get-query-results';\r\nexport * from './lib/get-term-by-id';\r\nexport * from './lib/get-terms-definitions';\r\nexport * from './lib/get-type-by-name';\r\nexport * from './lib/get-type-defs';\r\nexport * from './lib/remove-entity-classification';\r\nexport * from './lib/save-entity';\r\nexport * from './lib/save-entity-classification';\r\nexport * from './lib/types';\r\n","import { Injector, NgModule } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class AtlasApiModule {\r\n  static injector: Injector;\r\n\r\n  constructor(injector: Injector) {\r\n    AtlasApiModule.injector = injector;\r\n  }\r\n}\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { EntityMutationResponse } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/**\r\n * Sets the internal status of the entity with the given guid to DELETED. This counts as a soft delete in Atlas.\r\n * @param guid the guid of the entity\r\n */\r\nexport function deleteEntitySoft(guid: string) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'deleteEntitySoft');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http.authorize().delete<EntityMutationResponse>(path);\r\n}\r\n","export * from './delete-entity-soft';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasSearchResult, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\nexport function getDomains(\r\n  /** Optional parameters for the get domains operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getDomains');\r\n\r\n  const path = `atlas/v2/search/basic/?typeName=m4i_data_domain`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasSearchResult>(path);\r\n}\r\n","export * from './get-all-domains'\r\n","import { validateRequiredArguments } from '@models4insight/utils'\r\nimport { Observable } from 'rxjs'\r\nimport { AtlasSearchResult, GetOptions } from '../types'\r\nimport { getHttpClient } from '../utils'\r\n\r\nexport function getSystems(\r\n    /** Optional parameters for the get domains operation */\r\n    { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n    const http = getHttpClient()\r\n\r\n    validateRequiredArguments(arguments, 'getSystems')\r\n\r\n    const path = `atlas/v2/search/basic/?typeName=m4i_system`\r\n\r\n    return http\r\n        .authorize()\r\n        .cache(forceUpdate)\r\n        .get<AtlasSearchResult>(path)\r\n}\r\n","export * from './get-all-systems'\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface ElasticSearchEntity {\r\n  id: string;\r\n  qualityguid_completeness: string;\r\n  qualityguid_timeliness: string;\r\n  dqscore_completeness: string;\r\n  deriveddataset: string[];\r\n  typename: string;\r\n  dqscorecnt_uniqueness: string;\r\n  referenceablequalifiedname: string;\r\n  qualityguid_uniqueness: string;\r\n  dqscorecnt_timeliness: string;\r\n  deriveddataentity: string;\r\n  dqscorecnt_accuracy: string;\r\n  deriveddatasetguid: string[];\r\n  supertypenames: string[];\r\n  qualityguid_validity: string;\r\n  guid: string;\r\n  dqscore_validity: string;\r\n  deriveddatadomainguid: string;\r\n  derivedperson: string[];\r\n  dqscore_timeliness: string;\r\n  dqscorecnt_validity: string;\r\n  dqscore_accuracy: string;\r\n  m4isourcetype: string;\r\n  deriveddatadomain: string;\r\n  dqscorecnt_completeness: string;\r\n  definition: string;\r\n  name: string;\r\n  sourcetype: string;\r\n  qualityguid_accuracy: string;\r\n  derivedpersonguid: string[];\r\n  dqscore_uniqueness: string;\r\n}\r\n\r\nexport function getAppSearchEntity(\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<ElasticSearchEntity> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getAppSearchEntity');\r\n\r\n  const path = `elastic/documents?ids%5B%5D=${guid}`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .get<ElasticSearchEntity[]>(path)\r\n    .pipe(map(result => result?.[0]));\r\n}\r\n","export * from './get-app-search-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ClassificationDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/types/classificationdef/name';\r\n\r\n/**\r\n * Retrieves the classification type definition with the given `name` from the Atlas API\r\n */\r\nexport function getClassificationTypeByName(\r\n  /** The name of the type */\r\n  name: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<ClassificationDef> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getClassificationTypeByName');\r\n\r\n  const path = `${BASE_PATH}/${name}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ClassificationDef>(path);\r\n}\r\n","export * from \"./get-classification-def-by-name\";","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ClassificationResponse, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetClassificationsDefinitionsOptions {\r\n  /** Whether or not to ignore relationships from the results, defaults to false */\r\n  ignoreRelationships?: boolean;\r\n  /** Wether or not to consider outside information, defaults to false */\r\n  minExtInfo?: boolean;\r\n}\r\n\r\nexport function getClassificationsDefinitions({\r\n  ignoreRelationships = false,\r\n  minExtInfo = false,\r\n  forceUpdate = false\r\n}: GetOptions & GetClassificationsDefinitionsOptions = {}): Observable<\r\n  ClassificationResponse\r\n> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getClassificationsDefinitions');\r\n\r\n  const path = 'atlas/v2/types/typedefs?type=classification';\r\n\r\n  const queryParameters = createHttpParams({\r\n    ignoreRelationships,\r\n    minExtInfo\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<any>(path, requestOptions);\r\n}\r\n","export * from './get-classification-definitions';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Classification, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/**\r\n * Returns the details for a classification given the `classificationName` as well as the `entityGuid` of the associated entity.\r\n * @param entityGuid the unique id of the associated entity\r\n * @param classificationName the type name of the classification\r\n */\r\nexport function getClassificationForEntity(\r\n  entityGuid: string,\r\n  classificationName: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getClassificationForEntity');\r\n\r\n  const path = `${BASE_PATH}/${entityGuid}/classification/${classificationName}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Classification>(path);\r\n}\r\n","export * from './get-classification-for-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getDashboard(\r\n    forceUpdate = false\r\n): Observable<any> {\r\n    const http = getHttpClient();\r\n    validateRequiredArguments(arguments, 'getDashboard');\r\n    const path = 'api/data_governance_dashboard';\r\n    return http\r\n        .authorize()\r\n        .cache(forceUpdate)\r\n        .get<any>(path);\r\n}\r\n","export * from './get-dashboards'","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getDataQuality(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields: any,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getDataQuality');\r\n\r\n  const path = `data_quality`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-data-quality';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityWithEXTInformation, GetOptions } from '../types';\r\nimport { getHttpCache, getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/** Clears the HTTP cache for the entity with the given `guid` */\r\nexport function clearEntityByIdCache(\r\n  //** The guid of the entity */\r\n  guid: string\r\n) {\r\n  const cache = getHttpCache();\r\n  cache.clearCache(`${BASE_PATH}/${guid}`);\r\n}\r\n\r\n/**\r\n * Retrieves the entity with the given `guid` from the Atlas API\r\n */\r\nexport function getEntityById(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<AtlasEntityWithEXTInformation> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getEntityById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasEntityWithEXTInformation>(path);\r\n}\r\n","export * from './get-entity-by-id';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getFiltersAndResults(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getFiltersAndResults');\r\n\r\n  const path = 'elastic';\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-filters-and-results';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getGovernanceQuality(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields: any,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getGovernanceQuality');\r\n\r\n  const path = `gov_quality`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-governance-quality';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport type LineageDirection = 'INPUT' | 'OUTPUT' | 'BOTH';\r\n\r\nexport interface GetLineageModelOptions {\r\n  /** Specifies the maximum number of hops to traverse the lineage graph */\r\n  readonly depth?: number;\r\n  /** Specifies whether to retrieve input lineage, output lineage or both */\r\n  readonly direction?: LineageDirection;\r\n}\r\n\r\nconst PATH = 'lineage_model';\r\n\r\n/**\r\n * Fetch the lineage of an entity given its `guid`.\r\n *\r\n *  Options:\r\n *  * You can use `depth` to specify the maximum number of hops to traverse the lineage graph. Default is 3.\r\n *  * You can use `direction` to specify whether to retrieve input lineage, output lineage or both. Default is both.\r\n *\r\n * @param guid The unique atlas id of the enitity for which to retrieve the lineage\r\n */\r\nexport function getLineageModel(\r\n  guid: string,\r\n  {\r\n    depth = 3,\r\n    direction = 'BOTH',\r\n    forceUpdate\r\n  }: GetOptions & GetLineageModelOptions = {}\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getEntityById');\r\n\r\n  const queryParameters = createHttpParams({\r\n    guid,\r\n    depth,\r\n    direction\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<any>(PATH, requestOptions);\r\n}\r\n","export * from './get-lineage-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasSearchResult, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetQueryResultsOptions {\r\n  /** Whether or not to exclude deleted entities from the search results */\r\n  excludeDeletedEntities?: boolean;\r\n  /** Limit the result set to only include the specified number of entries */\r\n  limit?: number;\r\n  /** Start offset of the result set (useful for pagination) */\r\n  offset?: number;\r\n}\r\n\r\nconst PATH = 'atlas/v2/search/basic';\r\n\r\n/**\r\n * Retrieve data for the specified fulltext query\r\n */\r\nexport function getQueryResults(\r\n  /** The fulltext query */\r\n  query: string,\r\n  /** Optional parameters for the get type defs operation */\r\n  {\r\n    excludeDeletedEntities = false,\r\n    forceUpdate = false,\r\n    limit = 0,\r\n    offset = 0\r\n  }: GetOptions & GetQueryResultsOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getQueryResults');\r\n\r\n  const queryParameters = createHttpParams({\r\n    excludeDeletedEntities,\r\n    limit,\r\n    offset,\r\n    query\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasSearchResult>(PATH, requestOptions);\r\n}\r\n","export * from './get-query-results'\r\nexport * from './types'\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { GetOptions, TermDetails } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/glossary/term';\r\n\r\n/**\r\n * Retrieves the term with the given `guid` from the Atlas API\r\n */\r\nexport function getTermById(\r\n  /** The guid of the term */\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<TermDetails> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getTermById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<TermDetails>(path);\r\n}\r\n","export * from './get-term-by-id';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { GetOptions, TermDetails } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetTermsDefinitionByIdOptions {\r\n  /** Whether or not to ignore relationships from the results, defaults to false */\r\n  ignoreRelationships?: boolean;\r\n  /** Wether or not to consider outside information, defaults to false */\r\n  minExtInfo?: boolean;\r\n}\r\nconst BASE_PATH = 'atlas/v2/glossary/term';\r\n\r\nexport function getTermsDefinitionById(\r\n  /** The guid of the term entity */\r\n  guid: string,\r\n  {\r\n    ignoreRelationships = false,\r\n    minExtInfo = false,\r\n    forceUpdate = false\r\n  }: GetOptions & GetTermsDefinitionByIdOptions = {}\r\n): Observable<TermDetails> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getTermsDefinitionById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  const queryParameters = createHttpParams({\r\n    ignoreRelationships,\r\n    minExtInfo\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<TermDetails>(path, requestOptions);\r\n}\r\n","export * from './get-terms-definitions';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/types/entitydef/name';\r\n\r\n/**\r\n * Retrieves the entity type definition with the given `name` from the Atlas API\r\n */\r\nexport function getTypeByName(\r\n  /** The name of the type */\r\n  name: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<AtlasEntityDef> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getTypeByName');\r\n\r\n  const path = `${BASE_PATH}/${name}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasEntityDef>(path);\r\n}\r\n","export * from './get-type-by-name';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasTypesDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getTypeDefs(\r\n  /** Optional parameters for the get type defs operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasTypesDef> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getTypeDefs');\r\n\r\n  const path = `atlas/v2/types/typedefs`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasTypesDef>(path);\r\n}\r\n","export * from './get-type-defs'\r\n","export * from './remove-entity-classification';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Removes the classification with the given `classificationName` from the entity with the given `guid`.\r\n */\r\nexport function removeEntityClassification(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  /** The name of the classification to remove */\r\n  classificationName: string\r\n): Observable<void> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'removeEntityClassification');\r\n\r\n  const path = `atlas/v2/entity/guid/${guid}/classification/${classificationName}`;\r\n\r\n  return http.authorize().delete<void>(path);\r\n}\r\n","export * from './save-entity-classification';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { Classification } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Adds the given `classifications` to the entity with the given `guid`.\r\n */\r\nexport function saveEntityClassification(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  /** The classifications to add */\r\n  classifications: Classification[]\r\n): Observable<void> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'saveEntityClassification');\r\n\r\n  const path = `atlas/v2/entity/guid/${guid}/classifications`;\r\n\r\n  return http.authorize().post<void>(path, classifications);\r\n}\r\n","export * from './save-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityWithEXTInformation, EntityMutationResponse } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst PATH = 'atlas/v2/entity';\r\n\r\n/**\r\n * Saves the given `entity` to Atlas.\r\n */\r\nexport function saveEntity(\r\n  /** The guid of the term */\r\n  entity: AtlasEntityWithEXTInformation\r\n): Observable<EntityMutationResponse> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'saveEntity');\r\n\r\n  return http\r\n    .authorize()\r\n    .post<EntityMutationResponse>(PATH, entity);\r\n}\r\n","import { Dictionary } from 'lodash';\r\n\r\nexport interface GetOptions {\r\n  /** Whether or not to refresh the cache */\r\n  readonly forceUpdate?: boolean;\r\n}\r\n\r\nexport interface ListOfDomainsForDashboard {\r\n  totalNumberOfDomains: number;\r\n  totalNumberOfActiveDomains: number;\r\n  domains: ListOfDomains;\r\n}\r\nexport interface ListOfDomains {\r\n  CM: DomainForDashboard;\r\n  Communication: DomainForDashboard;\r\n  'Executive Commitee': DomainForDashboard;\r\n  'Engineering & Estimating': DomainForDashboard;\r\n  'Finance and Control': DomainForDashboard;\r\n  'Facility Services': DomainForDashboard;\r\n  IT: DomainForDashboard;\r\n  'Legal Department': DomainForDashboard;\r\n  MNGT: DomainForDashboard;\r\n  'Personel and Organization': DomainForDashboard;\r\n  'Project Office': DomainForDashboard;\r\n  QHSE: DomainForDashboard;\r\n  QPS: DomainForDashboard;\r\n  'Ship Management Department': DomainForDashboard;\r\n  STM: DomainForDashboard;\r\n  Survey: DomainForDashboard;\r\n  Treasury: DomainForDashboard;\r\n  Subsidiaries: DomainForDashboard;\r\n  'Procurement & Supply Chain': DomainForDashboard;\r\n}\r\n\r\nexport interface DomainForDashboard {\r\n  name: string;\r\n  guid: string;\r\n  isActive: boolean;\r\n  totalNumberOfEntities: number;\r\n}\r\nexport interface Facet {\r\n  readonly type: string;\r\n}\r\n\r\nexport interface FilterEntity {\r\n  readonly guid: FilterResult;\r\n  readonly name: string;\r\n}\r\n\r\nexport interface FilterChoice {\r\n  readonly valueGuid?: string;\r\n  readonly valueName?: string;\r\n  readonly valueCount?: number;\r\n  readonly option?: string;\r\n}\r\nexport interface FacetData {\r\n  readonly value: string;\r\n  readonly count: number;\r\n}\r\nexport interface Facet {\r\n  readonly type: string;\r\n  readonly size: number;\r\n  readonly data?: Array<FacetData>;\r\n}\r\n\r\nexport interface FilterValuesByFieldName {\r\n  [fieldName: string]: string[];\r\n}\r\n\r\nexport type SortingDirection = 'asc' | 'desc';\r\n\r\nexport interface SortingDirectionByFieldName {\r\n  [fieldName: string]: SortingDirection;\r\n}\r\n\r\nexport interface FiltersInOrder {\r\n  attributes: Array<Facet>;\r\n  name: string;\r\n  whiteList: PropertiesForOrderList;\r\n}\r\n\r\nexport type Facets = Dictionary<Facet>;\r\n\r\nexport interface ElasticSearchResults {\r\n  readonly meta?: Meta;\r\n  readonly results?: Array<ElasticSearchResult>;\r\n  readonly facets?: Facets;\r\n}\r\n\r\nexport interface ConfigurationForOrderList {\r\n  supertypenames: PropertiesForOrderList;\r\n  deriveddatadomain: PropertiesForOrderList;\r\n  deriveddataentity: PropertiesForOrderList;\r\n  derivedsystem: PropertiesForOrderList;\r\n  derivedcollection: PropertiesForOrderList;\r\n  deriveddataset: PropertiesForOrderList;\r\n  classificationtext: PropertiesForOrderList;\r\n  derivedperson: PropertiesForOrderList;\r\n  sourcetype: PropertiesForOrderList;\r\n  datadomainname: PropertiesForOrderList;\r\n  dataqualityruledimension: PropertiesForOrderList;\r\n}\r\n\r\nexport interface PropertiesForWhiteList {\r\n  cardinalitySET: boolean;\r\n  description: string;\r\n  isReference: boolean;\r\n  showIfEmpty: boolean;\r\n}\r\nexport interface PropertiesForOrderList {\r\n  typeList: string;\r\n  condicional: boolean;\r\n  position: number;\r\n  hasAnyOption: boolean;\r\n  excludeSubTypeBox: boolean;\r\n}\r\n\r\nexport interface AtlasSearchResult {\r\n  approximateCount: number;\r\n  attributes: AtlasSearchResultAttributes;\r\n  classification: string;\r\n  entities: EntityElement[];\r\n  fullTextResult: FullTextResult[];\r\n  nextMarker: string;\r\n  queryText: string;\r\n  queryType: string;\r\n  referredEntities: ReferredEntities;\r\n  searchParameters: SearchParameters;\r\n  type: string;\r\n}\r\n\r\nexport interface AtlasSearchResultAttributes {\r\n  name: string[];\r\n  values: Array<Value[]>;\r\n}\r\n\r\nexport interface FullTextResult {\r\n  entity: FullTextResultEntity;\r\n  score: number;\r\n}\r\n\r\nexport interface FullTextResultEntity {\r\n  classificationNames: string[];\r\n  classifications: Value[];\r\n  displayText: string;\r\n  guid: string;\r\n  isIncomplete: boolean;\r\n  labels: string[];\r\n  meaningNames: string[];\r\n  meanings: Value[];\r\n  status: string;\r\n  attributes: EntityAttributes;\r\n  typeName: string;\r\n}\r\n\r\nexport interface ReferredEntities {\r\n  [guid: string]: EntityElement;\r\n}\r\n\r\nexport interface SearchParameters {\r\n  attributes: string[];\r\n  classification: string;\r\n  entityFilters: Filters;\r\n  excludeDeletedEntities: boolean;\r\n  includeClassificationAttributes: boolean;\r\n  includeSubClassifications: boolean;\r\n  includeSubTypes: boolean;\r\n  limit: number;\r\n  marker: string;\r\n  offset: number;\r\n  query: string;\r\n  sortBy: string;\r\n  sortOrder: string;\r\n  tagFilters: Filters;\r\n  termName: string;\r\n  typeName: string;\r\n}\r\nexport interface Filters {\r\n  attributeName: string;\r\n  attributeValue: string;\r\n  condition: string;\r\n  criterion: Value[];\r\n  operator: string;\r\n}\r\n\r\nexport interface FiltersFromBackend {\r\n  meta: Meta;\r\n  results: Array<ElasticSearchResult>;\r\n}\r\n\r\nexport interface ElasticSearchResult {\r\n  guid: FilterResult;\r\n  id: FilterResult;\r\n  [field: string]: FilterResult;\r\n}\r\n\r\nexport interface FilterResult {\r\n  raw: any;\r\n  snippet?: string;\r\n}\r\n\r\nexport interface Meta {\r\n  alerts: Array<any>;\r\n  engine: Engine;\r\n  page: Page;\r\n  warnings: Array<any>;\r\n  precision: number;\r\n  request_id: string;\r\n}\r\nexport interface Page {\r\n  current: number;\r\n  size: number;\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\nexport interface Engine {\r\n  name: string;\r\n  type: string;\r\n}\r\nexport interface Classification {\r\n  entityGuid: string;\r\n  entityStatus: string;\r\n  propagate: boolean;\r\n  removePropagationsOnEntityDelete: boolean;\r\n  validityPeriods?: Value[];\r\n  attributes?: EntityAttributes;\r\n  typeName: string;\r\n}\r\n\r\nexport type Value = any;\r\n\r\nexport interface EntityAttributes {\r\n  [key: string]: Value;\r\n}\r\n\r\nexport interface EntityElement {\r\n  attributes: EntityAttributes;\r\n  guid: string;\r\n  typeName: string;\r\n  classifications: Classification[];\r\n  classificationNames?: string[];\r\n  displayText?: string;\r\n  isIncomplete?: boolean;\r\n  labels?: string[];\r\n  meaningNames?: string[];\r\n  meanings?: Meaning[];\r\n  status?: string;\r\n}\r\n\r\nexport interface Meaning {\r\n  confidence: number;\r\n  createdBy: string;\r\n  description: string;\r\n  displayText: string;\r\n  expression: string;\r\n  relationGuid: string;\r\n  source: string;\r\n  status: string;\r\n  steward: string;\r\n  termGuid: string;\r\n}\r\n\r\nexport interface ClassificationResponse {\r\n  businessMetadataDefs: Array<AtlasEntityDef>;\r\n  classificationDefs: Array<AtlasEntityDef>;\r\n  entityDefs: Array<AtlasEntityDef>;\r\n  enumDefs: Array<AtlasEntityDef>;\r\n  relationshipDefs: Array<AtlasEntityDef>;\r\n  structDefs: Array<AtlasEntityDef>;\r\n}\r\n\r\nexport interface Term {\r\n  description?: string;\r\n  name?: string;\r\n}\r\nexport interface ClassificationTag {\r\n  [key: number]: ClassificationItem;\r\n}\r\n\r\nexport interface ClassificationItem {\r\n  [key: number]: string;\r\n}\r\nexport interface TermDetails {\r\n  anchor: TermAnchor;\r\n  assignedEntities: Array<AssignedEntity>;\r\n  categories: Array<Category>;\r\n  glossaryTermHeader: GlossaryTermHeader;\r\n  guid: string;\r\n  name: string;\r\n  qualifiedName: string;\r\n  longDescription: string;\r\n  shortDescription: string;\r\n}\r\nexport interface Category {\r\n  categoryGuid: string;\r\n  displayText: string;\r\n  relationGuid: string;\r\n}\r\nexport interface GlossaryTermHeader {\r\n  qualifiedName: string;\r\n  termGuid: string;\r\n}\r\n\r\nexport interface AssignedEntity {\r\n  displayText: string;\r\n  entityStatus: string;\r\n  guid: string;\r\n  relationshipAttributes: RelationshipAttribute;\r\n  relationshipGuid: string;\r\n  relationshipStatus: string;\r\n  relationshipType: string;\r\n  typeName: string;\r\n}\r\nexport interface RelationshipAttribute {\r\n  attributes?: Attributes;\r\n  typeName: string;\r\n}\r\nexport interface Attributes {\r\n  confidence: string;\r\n  createdBy: string;\r\n  description: string;\r\n  expression: string;\r\n  source: string;\r\n  status: string;\r\n  steward: string;\r\n}\r\n\r\nexport interface TermAnchor {\r\n  glossaryGuid: string;\r\n  relationGuid: string;\r\n}\r\n\r\nexport interface EntityMutationResponse {\r\n  guidAssignments: GUIDAssignments;\r\n  mutatedEntities: MutatedEntities;\r\n  partialUpdatedEntities: AtlasEntityHeader[];\r\n}\r\n\r\nexport interface GUIDAssignments {\r\n  [property: string]: string;\r\n}\r\n\r\nexport interface MutatedEntities {\r\n  [property: string]: AtlasEntityHeader[];\r\n}\r\n\r\nexport interface AtlasEntityHeader {\r\n  classificationNames: string[];\r\n  classifications: Classification[];\r\n  displayText: string;\r\n  guid: string;\r\n  isIncomplete: boolean;\r\n  labels: string[];\r\n  meaningNames: string[];\r\n  meanings: Meaning[];\r\n  status: 'ACTIVE' | 'DELETED' | 'PURGED';\r\n  attributes: Attributes;\r\n  typeName: string;\r\n}\r\n\r\nexport interface AtlasEntityWithEXTInformation {\r\n  entity: EntityElementWithEXTInfo;\r\n  referredEntities: ReferredEntities;\r\n}\r\n\r\nexport interface EntityElementWithEXTInfo extends EntityElement {\r\n  relationshipAttributes: EntityAttributes;\r\n  businessAttributes?: EntityAttributes;\r\n  customAttributes?: EntityAttributes;\r\n  createTime?: number;\r\n  createdBy?: string;\r\n  homeId?: string;\r\n  pendingTasks?: string[];\r\n  provenanceType?: number;\r\n  proxy?: boolean;\r\n  updateTime?: number;\r\n  updatedBy?: string;\r\n  version?: number;\r\n}\r\n\r\nexport interface AtlasTypesDef {\r\n  readonly businessMetadataDefs: StructDef[];\r\n  readonly classificationDefs: ClassificationDef[];\r\n  readonly entityDefs: AtlasEntityDef[];\r\n  readonly enumDefs: EnumDef[];\r\n  readonly relationshipDefs: RelationshipDef[];\r\n  readonly structDefs: StructDef[];\r\n}\r\n\r\nexport interface BaseTypeDef {\r\n  readonly category: string;\r\n  readonly createTime: number;\r\n  readonly createdBy: string;\r\n  readonly dateFormatter: DateFormat;\r\n  readonly description: string;\r\n  readonly guid: string;\r\n  readonly name: string;\r\n  readonly options: Options;\r\n  readonly serviceType: string;\r\n  readonly typeVersion: string;\r\n  readonly updateTime: number;\r\n  readonly updatedBy: string;\r\n  readonly version: number;\r\n}\r\n\r\nexport interface StructDef extends BaseTypeDef {\r\n  readonly attributeDefs: AttributeDef[];\r\n}\r\n\r\nexport interface ClassificationDef extends StructDef {\r\n  readonly entityTypes: string[];\r\n  readonly subTypes: string[];\r\n  readonly superTypes: string[];\r\n}\r\n\r\nexport interface AtlasEntityDef extends StructDef {\r\n  readonly businessAttributeDefs: BusinessAttributeDefs;\r\n  readonly relationshipAttributeDefs: AttributeDef[];\r\n  readonly subTypes: string[];\r\n  readonly superTypes: string[];\r\n}\r\n\r\nexport interface EnumDef extends BaseTypeDef {\r\n  readonly defaultValue: string;\r\n  readonly elementDefs: EnumElementDef;\r\n}\r\n\r\nexport interface EnumElementDef {\r\n  readonly description: string;\r\n  readonly ordinal: number;\r\n  readonly value: string;\r\n}\r\n\r\nexport interface RelationshipDef extends StructDef {\r\n  readonly endDef1: RelationshipEndDef;\r\n  readonly endDef2: RelationshipEndDef;\r\n  readonly propagateTags: string;\r\n  readonly relationshipCategory: string;\r\n  readonly relationshipLabel: string;\r\n}\r\n\r\nexport interface AttributeDef {\r\n  readonly cardinality: Cardinality;\r\n  readonly constraints: ConstraintDef[];\r\n  readonly defaultValue: string;\r\n  readonly description: string;\r\n  readonly displayName: string;\r\n  readonly includeInNotification: boolean;\r\n  readonly indexType: IndexType;\r\n  readonly isIndexable: boolean;\r\n  readonly isOptional: boolean;\r\n  readonly isUnique: boolean;\r\n  readonly name: string;\r\n  readonly options: Options;\r\n  readonly searchWeight: number;\r\n  readonly typeName: string;\r\n  readonly valuesMaxCount: number;\r\n  readonly valuesMinCount: number;\r\n  readonly isLegacyAttribute?: boolean;\r\n  readonly relationshipTypeName?: string;\r\n}\r\n\r\nexport interface ConstraintDef {\r\n  readonly params: { [key: string]: object };\r\n  readonly type: string;\r\n}\r\n\r\nexport enum Cardinality {\r\n  List = 'LIST',\r\n  Set = 'SET',\r\n  Single = 'SINGLE'\r\n}\r\n\r\nexport enum IndexType {\r\n  Default = 'DEFAULT',\r\n  String = 'STRING'\r\n}\r\n\r\nexport interface Options {\r\n  readonly [property: string]: string;\r\n}\r\n\r\nexport interface BusinessAttributeDefs {\r\n  readonly [property: string]: AttributeDef[];\r\n}\r\n\r\nexport interface DateFormat {\r\n  readonly availableLocales: string[];\r\n  readonly calendar: number;\r\n  readonly lenient: boolean;\r\n  readonly dateInstance?: DateFormat;\r\n  readonly dateTimeInstance?: DateFormat;\r\n  readonly instance?: DateFormat;\r\n  readonly numberFormat?: DateFormat;\r\n  readonly timeInstance?: DateFormat;\r\n  readonly timeZone?: DateFormat;\r\n}\r\n\r\nexport interface RelationshipEndDef {\r\n  readonly cardinality: Cardinality;\r\n  readonly description: string;\r\n  readonly isContainer: boolean;\r\n  readonly isLegacyAttribute: boolean;\r\n  readonly name: string;\r\n  readonly type: string;\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { HttpService } from '@models4insight/http';\r\nimport { HttpCacheService } from 'libs/http/src/lib/http-cache.service';\r\nimport { Dictionary, isNaN, isNil } from 'lodash';\r\nimport { AtlasApiModule } from './atlas-api.module';\r\n\r\n/**\r\n * Creates a new `HttpParams` object based on the given parameters, filtering out any parameter of which the value is null or undefined\r\n */\r\nexport function createHttpParams(\r\n  /** The set of key value pairs to include as parameters */\r\n  params: Dictionary<any>\r\n): HttpParams {\r\n  let result: HttpParams = new HttpParams();\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (!isNil(value) && !isNaN(value)) {\r\n      result = result.set(key, value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the `HttpService` as imported by the `RepositoryModule`. If the `RepositoryModule` has not been loaded, throws an error.\r\n */\r\nexport function getHttpClient(): HttpService {\r\n  if (!AtlasApiModule.injector) {\r\n    throw new Error(\r\n      'Tried running an API query while the AtlasApiModule was not loaded. Please make sure the AtlasApiModule is imported.'\r\n    );\r\n  }\r\n  return AtlasApiModule.injector.get(HttpService);\r\n}\r\n\r\nexport function getHttpCache(): HttpCacheService {\r\n  if (!AtlasApiModule.injector) {\r\n    throw new Error(\r\n      'Tried accessing the cache while the AtlasApiModule was not loaded. Please make sure the AtlasApiModule is imported.'\r\n    );\r\n  }\r\n  return AtlasApiModule.injector.get(HttpCacheService);\r\n}\r\n","export { AuthenticationConfig } from './lib/authentication-config.service';\nexport * from './lib/authentication.guard';\nexport * from './lib/authentication.module';\nexport * from './lib/authentication.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthenticationConfigCredentials {\r\n  readonly secret: string;\r\n}\r\n\r\nexport interface AuthenticationConfig {\r\n  readonly clientId: string;\r\n  readonly realm: string;\r\n  readonly url: string;\r\n  readonly credentials?: AuthenticationConfigCredentials;\r\n}\r\n\r\nexport const AuthenticationConfigService = new InjectionToken<\r\n  AuthenticationConfig\r\n>('AuthenticationConfig');\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\nconst log = new Logger('AuthenticationGuard');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationGuard implements CanActivate {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    return this.authenticationService.isAuthenticated().pipe(\r\n      tap((isAuthenticated: boolean) => {\r\n        if (!isAuthenticated) {\r\n          log.debug('Not authenticated, redirecting to login...');\r\n          this.authenticationService.login();\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthenticationConfig, AuthenticationConfigService } from './authentication-config.service';\r\n\r\n@NgModule({\r\n  imports: [RouterModule]\r\n})\r\nexport class AuthenticationModule {\r\n  static forRoot(\r\n    config: AuthenticationConfig\r\n  ): ModuleWithProviders<AuthenticationModule> {\r\n    return {\r\n      ngModule: AuthenticationModule,\r\n      providers: [\r\n        {\r\n          provide: AuthenticationConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { AuthenticationModule } from './authentication.module';\r\nimport { KeycloakService } from './keycloak.service';\r\n\r\nconst log = new Logger('AuthenticationService');\r\n\r\n/** Represents the Credentials data object as supplied by Keycloak */\r\nexport interface Credentials {\r\n  /** The username of the user */\r\n  username?: string;\r\n  /** The email address of the user */\r\n  email?: string;\r\n  /** The first name of the user */\r\n  firstName?: string;\r\n  /** The last name of the user */\r\n  lastName?: string;\r\n  /** Whether or not the email address of the user has been verified */\r\n  emailVerified?: boolean;\r\n  /** Additional attributes to the user */\r\n  attributes?: {};\r\n}\r\n\r\n/** Data object that represents the state of the authentication service */\r\nexport interface AuthenticationStoreContext {\r\n  /** The credentials of the current user */\r\n  readonly credentials?: Credentials;\r\n  /** Whether or not the user is currently authenticated */\r\n  readonly isAuthenticated?: boolean;\r\n}\r\n\r\n/**\r\n * Provides a base for authentication workflow.\r\n */\r\n@Injectable({\r\n  providedIn: AuthenticationModule\r\n})\r\nexport class AuthenticationService extends BasicStore<\r\n  AuthenticationStoreContext\r\n> {\r\n  constructor(\r\n    private keycloakService: KeycloakService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'AuthenticationService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // On init, check whether the user is already authenticated. This causes the user to be redirected to the login screen if they are not logged in.\r\n    // If the user is authenticated, update the auth state.\r\n    this.keycloakService.isAuthenticated.then(isAuthenticated =>\r\n      this.update({\r\n        description: 'Initial auth state updated',\r\n        payload: {\r\n          isAuthenticated: isAuthenticated\r\n        }\r\n      })\r\n    );\r\n\r\n    // Whenever the Keycloak onAuthStateChanged event triggers, update the auth state.\r\n    this.keycloakService.onAuthStateChanged.subscribe(isAuthenticated =>\r\n      this.update({\r\n        description: 'Auth state updated',\r\n        payload: {\r\n          isAuthenticated: isAuthenticated\r\n        }\r\n      })\r\n    );\r\n\r\n    // Whenver the user logs out of Keycloak while they are logged into this app, log them out here as well.\r\n    this.keycloakService.onAuthStateChanged\r\n      .pipe(\r\n        filter(isAuthenticated => !isAuthenticated),\r\n        switchMap(() => this.login())\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the auth state changes, update the user credentials.\r\n    // If the user is not authenticated, the credentials object should be empty.\r\n    this.isAuthenticated()\r\n      .pipe(\r\n        switchMap(isAuthenticated =>\r\n          isAuthenticated\r\n            ? this.keycloakService.userProfile\r\n            : of({} as Credentials)\r\n        )\r\n      )\r\n      .subscribe(credentials =>\r\n        this.update({\r\n          description: 'User credentials updated',\r\n          payload: {\r\n            credentials: credentials\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Authenticates the user.\r\n   */\r\n  login() {\r\n    return this.keycloakService.login();\r\n  }\r\n\r\n  /**\r\n   * Logs out the user and clear credentials.\r\n   */\r\n  logout() {\r\n    return this.keycloakService.logout();\r\n  }\r\n\r\n  /**\r\n   * Whether the user is authenticated.\r\n   * @return True if the user is authenticated.\r\n   */\r\n  isAuthenticated(): Observable<boolean> {\r\n    return this.select('isAuthenticated');\r\n  }\r\n\r\n  /**\r\n   * Redirects the user to their account management panel\r\n   */\r\n  accountManagement() {\r\n    return this.keycloakService.accountManagement();\r\n  }\r\n\r\n  /**\r\n   * Gets the current user's credentials.\r\n   * @return The current user's credentials, or null if not authenticated.\r\n   */\r\n  credentials(): Observable<Credentials> {\r\n    return this.select('credentials');\r\n  }\r\n\r\n  /**\r\n   * Emits whenever the authentication state changes\r\n   * @return An observable stream of the current authentication state\r\n   */\r\n  onAuthStateChanged(): Observable<boolean> {\r\n    return this.select('isAuthenticated');\r\n  }\r\n\r\n  /**\r\n   * Attempts to update the token. If not successful, redirects to login. Returns the token, or nothing if no token is available.\r\n   */\r\n  async updateToken() {\r\n    let token: string;\r\n    try {\r\n      token = await this.keycloakService.updateToken();\r\n    } catch {\r\n      this.login();\r\n    }\r\n    return token;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport Keycloak from 'keycloak-js';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { AuthenticationConfig, AuthenticationConfigService } from './authentication-config.service';\r\nimport { AuthenticationModule } from './authentication.module';\r\n\r\nconst log = new Logger('KeycloakService');\r\n\r\nexport interface LoginOptions {\r\n  action?: 'register';\r\n  locale?: string;\r\n  loginHint?: string;\r\n  prompt?: 'login' | 'none';\r\n  redirectUri?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: AuthenticationModule\r\n})\r\nexport class KeycloakService {\r\n  private readonly keycloakAuth: Keycloak.KeycloakInstance;\r\n  private readonly authState: Subject<boolean> = new ReplaySubject<boolean>();\r\n\r\n  constructor(\r\n    @Inject(AuthenticationConfigService) config: AuthenticationConfig\r\n  ) {\r\n    this.keycloakAuth = Keycloak(config);\r\n\r\n    this.authState.subscribe((auth: boolean) =>\r\n      log.debug(`Auth state updated: ${auth}`)\r\n    );\r\n\r\n    this.keycloakAuth.onReady = auth => this.authState.next(auth);\r\n    this.keycloakAuth.onAuthSuccess = () => this.authState.next(true);\r\n    this.keycloakAuth.onAuthLogout = () => this.authState.next(false);\r\n\r\n    /**\r\n     * Whenever the token expires and a refresh token is available, try to refresh the access token.\r\n     * Otherwise, redirect to login.\r\n     */\r\n    this.keycloakAuth.onTokenExpired = () => {\r\n      if (this.keycloakAuth.refreshToken) {\r\n        this.updateToken();\r\n      } else {\r\n        this.authState.next(false);\r\n        this.login();\r\n      }\r\n    };\r\n    /**\r\n     * When failing to refresh the token, redirect to login.\r\n     */\r\n    this.keycloakAuth.onAuthRefreshError = () => {\r\n      log.debug('Failed to refresh the access token. Redirecting to login...');\r\n      this.authState.next(false);\r\n      this.login();\r\n    };\r\n  }\r\n\r\n  async login(options: LoginOptions = {}): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.login(options);\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.logout();\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  async accountManagement(): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.accountManagement();\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  updateToken(): Promise<string> {\r\n    const { success, error } = this.keycloakAuth.updateToken(5);\r\n    return new Promise<string>((resolve, reject) => {\r\n      success(() => resolve(this.keycloakAuth.token));\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  get isAuthenticated(): Promise<boolean> {\r\n    const { authenticated } = this.keycloakAuth;\r\n    return authenticated\r\n      ? Promise.resolve(authenticated)\r\n      : this.isSSOAuthenticated();\r\n  }\r\n\r\n  get token(): string {\r\n    return this.keycloakAuth.token;\r\n  }\r\n\r\n  get tokenParsed(): Keycloak.KeycloakTokenParsed {\r\n    return this.keycloakAuth.tokenParsed;\r\n  }\r\n\r\n  get userProfile(): Promise<Keycloak.KeycloakProfile> {\r\n    const { profile } = this.keycloakAuth;\r\n    return profile ? Promise.resolve(profile) : this.loadUserProfile();\r\n  }\r\n\r\n  get onAuthStateChanged(): Observable<boolean> {\r\n    return this.authState.pipe(distinctUntilChanged());\r\n  }\r\n\r\n  private async isSSOAuthenticated(): Promise<boolean> {\r\n    const { success, error } = this.keycloakAuth.init({ onLoad: 'check-sso' });\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  private async loadUserProfile(): Promise<Keycloak.KeycloakProfile> {\r\n    const { success, error } = this.keycloakAuth.loadUserProfile();\r\n    return new Promise<Keycloak.KeycloakProfile>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n}\r\n","export * from './lib/core';\n","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { AuthenticationConfig, AuthenticationModule } from '@models4insight/authentication';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsModule } from '@models4insight/google-analytics';\r\nimport { HttpModule } from '@models4insight/http';\r\nimport { I18nConfig, I18nModule } from '@models4insight/i18n';\r\nimport { LoggerModule } from '@models4insight/logger';\r\nimport { NotificationsConfig, NotificationsModule } from '@models4insight/notifications';\r\nimport { ReduxModule } from '@models4insight/redux';\r\nimport { ServicesBranchModule } from '@models4insight/services/branch';\r\nimport { ClickstreamModule } from '@models4insight/services/clickstream';\r\nimport { ServicesModelModule } from '@models4insight/services/model';\r\nimport { ServicesProjectModule } from '@models4insight/services/project';\r\nimport { ServicesUserInfoModule } from '@models4insight/services/user-info';\r\nimport { ShellConfig, ShellModule } from '@models4insight/shell';\r\nimport { TaskManagerModule } from '@models4insight/task-manager';\r\nimport { VersionModule } from '@models4insight/version';\r\n\r\nexport interface CoreConfig {\r\n  readonly googleAnalyticsMeasurementID: GoogleAnalyticsConfig['measurementID'];\r\n  readonly i18n: I18nConfig;\r\n  readonly keycloak: AuthenticationConfig;\r\n  readonly notifications: NotificationsConfig;\r\n  readonly production: boolean;\r\n  readonly shell: ShellConfig;\r\n}\r\n\r\n/**\r\n * Represents the core of every Models4Insight application. Provides a method to generate an NgModule imports statement with a given configuration.\r\n */\r\nexport class Core {\r\n  /**\r\n   * Returns an NgModule imports statement for the core Models4Insight modules initialized with the given configuration parameters\r\n   * @param config The configuration parameters with which to initialize the core modules\r\n   */\r\n  static imports(config: CoreConfig): NgModule['imports'] {\r\n    return [\r\n      BrowserAnimationsModule,\r\n      LoggerModule.forRoot({ production: config.production }),\r\n      HttpModule.forRoot({ production: config.production }),\r\n      VersionModule.forRoot({\r\n        appName: config.shell.appName,\r\n        production: config.production\r\n      }),\r\n      ReduxModule.forRoot({ production: config.production }),\r\n      AuthenticationModule.forRoot(config.keycloak),\r\n      GoogleAnalyticsModule.forRoot({\r\n        measurementID: config.googleAnalyticsMeasurementID,\r\n        production: config.production\r\n      }),\r\n      I18nModule.forRoot(config.i18n),\r\n      TaskManagerModule,\r\n      ClickstreamModule.forRoot({ app: config.shell.appName }),\r\n      NotificationsModule.forRoot(config.notifications),\r\n      ServicesBranchModule,\r\n      ServicesModelModule,\r\n      ServicesProjectModule,\r\n      ServicesUserInfoModule,\r\n      ServiceWorkerModule.register('./ngsw-worker.js', {\r\n        enabled: config.production\r\n      }),\r\n      ShellModule.forRoot(config.shell)\r\n    ];\r\n  }\r\n}\r\n","export { GoogleAnalyticsConfig } from './lib/google-analytics-config.service';\nexport * from './lib/google-analytics.module';\nexport * from './lib/google-analytics.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface GoogleAnalyticsConfig {\r\n  readonly production?: boolean;\r\n  readonly measurementID?: string;\r\n}\r\n\r\nexport const GoogleAnalyticsConfigService = new InjectionToken<\r\n  GoogleAnalyticsConfig\r\n>('GoogleAnalyticsConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsConfigService } from './google-analytics-config.service';\r\nimport { GoogleAnalyticsService } from './google-analytics.service';\r\n\r\n@NgModule({})\r\nexport class GoogleAnalyticsModule {\r\n  constructor(\r\n    @Inject(GoogleAnalyticsConfigService)\r\n    config: GoogleAnalyticsConfig = {},\r\n    googleAnalyticsService: GoogleAnalyticsService,\r\n    @Optional() @SkipSelf() parentModule: GoogleAnalyticsModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'GoogleAnalyticsModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      googleAnalyticsService.init();\r\n    }\r\n  }\r\n\r\n  static forRoot(\r\n    config: GoogleAnalyticsConfig = {}\r\n  ): ModuleWithProviders<GoogleAnalyticsModule> {\r\n    return {\r\n      ngModule: GoogleAnalyticsModule,\r\n      providers: [\r\n        GoogleAnalyticsService,\r\n        {\r\n          provide: GoogleAnalyticsConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/// <reference types=\"gtag.js\" />\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { distinctUntilChanged, filter, pluck } from 'rxjs/operators';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsConfigService } from './google-analytics-config.service';\r\n\r\ndeclare const gtag: Gtag.Gtag;\r\n\r\n@Injectable()\r\nexport class GoogleAnalyticsService {\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(GoogleAnalyticsConfigService)\r\n    private config: GoogleAnalyticsConfig = {}\r\n  ) {}\r\n\r\n  init() {\r\n    // Listen for navigation end events on the router.\r\n    // Whenever the url changes, record a new pageview\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        pluck<NavigationEnd, string>('urlAfterRedirects'),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe(url => {\r\n        if (gtag) {\r\n          gtag('config', this.config.measurementID, {\r\n            page_path: url\r\n          });\r\n        } else {\r\n          throw new Error(\r\n            'Tried submitting Google analytics measurement data, but Google analytics functions were not loaded properly.'\r\n          );\r\n        }\r\n      });\r\n  }\r\n}\r\n","export { HttpConfig } from './lib/http-config.service';\nexport * from './lib/http.module';\nexport * from './lib/http.service';\n\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('AuthorizationHeaderInterceptorFilter');\r\n\r\n/**\r\n * Adds an authorization header containing the current Keycloak token to all requests.\r\n */\r\n@Injectable()\r\nexport class AuthorizationHeaderInterceptorFilter implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept<T>(\r\n    request: HttpRequest<T>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<T>> {\r\n    // Retrieve the current access token or update it if it has expired.\r\n    const token$ = this.authenticationService.updateToken();\r\n\r\n    return from(token$).pipe(\r\n      switchMap(token =>\r\n        next.handle(\r\n          request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer search-ot1rcw3uffpojw1tz299upw1`\r\n            }\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('AuthorizationHeaderInterceptor');\r\n\r\n/**\r\n * Adds an authorization header containing the current Keycloak token to all requests.\r\n */\r\n@Injectable()\r\nexport class AuthorizationHeaderInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept<T>(\r\n    request: HttpRequest<T>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<T>> {\r\n    // Retrieve the current access token or update it if it has expired.\r\n    const token$ = this.authenticationService.updateToken();\r\n\r\n    return from(token$).pipe(\r\n      switchMap(token =>\r\n        next.handle(\r\n          request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { HttpCacheService } from './http-cache.service';\n\n/**\n * Caches HTTP requests.\n * Use ExtendedHttpClient fluent API to configure caching for each request.\n */\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  private forceUpdate = false;\n\n  constructor(private httpCacheService: HttpCacheService) {}\n\n  /**\n   * Configures interceptor options\n   * @param options If update option is enabled, forces request to be made and updates cache entry.\n   * @return The configured instance.\n   */\n  configure(options?: { update?: boolean } | null): CacheInterceptor {\n    const instance = new CacheInterceptor(this.httpCacheService);\n    if (options && options.update) {\n      instance.forceUpdate = true;\n    }\n    return instance;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (request.method !== 'GET') {\n      return next.handle(request);\n    }\n\n    return new Observable((subscriber: Subscriber<HttpEvent<any>>) => {\n      const cachedData = this.forceUpdate ? null : this.httpCacheService.getCacheData(request.urlWithParams);\n      if (cachedData !== null) {\n        // Create new response to avoid side-effects\n        subscriber.next(new HttpResponse(cachedData as Object));\n        subscriber.complete();\n      } else {\n        next.handle(request).subscribe(\n          event => {\n            if (event instanceof HttpResponse) {\n              this.httpCacheService.setCacheData(request.urlWithParams, event);\n            }\n            subscriber.next(event);\n          },\n          error => subscriber.error(error),\n          () => subscriber.complete()\n        );\n      }\n    });\n  }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Logger } from '@models4insight/logger';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpConfig, HttpConfigService } from './http-config.service';\n\nconst log = new Logger('ErrorHandlerInterceptor');\n\n/**\n * Adds a default error handler to all requests.\n */\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n  constructor(\n    @Optional() @Inject(HttpConfigService) private config: HttpConfig = {}\n  ) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next\n      .handle(request)\n      .pipe(catchError(error => this.errorHandler(error)));\n  }\n\n  // Customize the default error handler here if needed\n  private errorHandler(response: HttpEvent<any>): Observable<HttpEvent<any>> {\n    if (!this.config.production) {\n      // Do something with the error\n      log.error('Request error', response);\n    }\n    throw response;\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { each } from 'lodash';\r\n\r\n\r\nconst log = new Logger('HttpCacheService');\r\nconst cachePersistenceKey = 'httpCache';\r\n\r\nexport interface HttpCacheEntry {\r\n  lastUpdated: Date;\r\n  data: HttpResponse<any>;\r\n}\r\n\r\n/**\r\n * Provides a cache facility for HTTP requests with configurable persistence policy.\r\n */\r\n@Injectable()\r\nexport class HttpCacheService {\r\n  private cachedData: { [key: string]: HttpCacheEntry } = {};\r\n  private storage: Storage | null = null;\r\n\r\n  constructor() {\r\n    this.loadCacheData();\r\n  }\r\n\r\n  /**\r\n   * Sets the cache data for the specified request.\r\n   * @param url The request URL.\r\n   * @param data The received data.\r\n   * @param lastUpdated The cache last update, current date is used if not specified.\r\n   */\r\n  setCacheData(url: string, data: HttpResponse<any>, lastUpdated?: Date) {\r\n    this.cachedData[url] = {\r\n      lastUpdated: lastUpdated || new Date(),\r\n      data: data\r\n    };\r\n    log.debug(`Cache set for key: \"${url}\"`);\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Gets the cached data for the specified request.\r\n   * @param url The request URL.\r\n   * @return The cached data or null if no cached data exists for this request.\r\n   */\r\n  getCacheData(url: string): HttpResponse<any> | null {\r\n    const cacheEntry = this.cachedData[url];\r\n\r\n    if (cacheEntry) {\r\n      log.debug(`Cache hit for key: \"${url}\"`);\r\n      return cacheEntry.data;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gets the cached entry for the specified request.\r\n   * @param url The request URL.\r\n   * @return The cache entry or null if no cache entry exists for this request.\r\n   */\r\n  getHttpCacheEntry(url: string): HttpCacheEntry | null {\r\n    return this.cachedData[url] || null;\r\n  }\r\n\r\n  /**\r\n   * Clears the cached entry (if exists) for the specified request.\r\n   * @param url The request URL.\r\n   * @param matchAll Whether or not the url of the request should match completely. Defaults to `true`.\r\n   */\r\n  clearCache(url: string, matchAll=true): void {\r\n    this.cachedData = Object.entries(this.cachedData)\r\n      .filter(([cachedUrl]) => matchAll ? url === cachedUrl : cachedUrl.includes(url))\r\n      .reduce((cache, [cachedUrl, cachedData]) => ({...cache, [cachedUrl]: cachedData}), {})\r\n    log.debug(`Cache cleared for key: \"${url}\"`);\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Cleans cache entries older than the specified date.\r\n   * @param expirationDate The cache expiration date. If no date is specified, all cache is cleared.\r\n   */\r\n  cleanCache(expirationDate?: Date) {\r\n    if (expirationDate) {\r\n      each(this.cachedData, (value: HttpCacheEntry, key: string) => {\r\n        if (expirationDate >= value.lastUpdated) {\r\n          delete this.cachedData[key];\r\n        }\r\n      });\r\n    } else {\r\n      this.cachedData = {};\r\n    }\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Sets the cache persistence policy.\r\n   * Note that changing the cache persistence will also clear the cache from its previous storage.\r\n   * @param persistence How the cache should be persisted, it can be either local or session storage, or if no value is\r\n   *   provided it will be only in-memory (default).\r\n   */\r\n  setPersistence(persistence?: 'local' | 'session') {\r\n    this.cleanCache();\r\n    this.storage =\r\n      persistence === 'local' || persistence === 'session'\r\n        ? window[persistence + 'Storage']\r\n        : null;\r\n    this.loadCacheData();\r\n  }\r\n\r\n  private saveCacheData() {\r\n    if (this.storage) {\r\n      this.storage[cachePersistenceKey] = JSON.stringify(this.cachedData);\r\n    }\r\n  }\r\n\r\n  private loadCacheData() {\r\n    const data = this.storage ? this.storage[cachePersistenceKey] : null;\r\n    this.cachedData = data ? JSON.parse(data) : {};\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface HttpConfig {\r\n  production?: boolean;\r\n}\r\n\r\nexport const HttpConfigService = new InjectionToken<HttpConfig>('HttpConfig');\r\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport {\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n  SkipSelf\r\n} from '@angular/core';\r\nimport { AuthorizationHeaderInterceptor } from './authorization-header.interceptor';\r\nimport { AuthorizationHeaderInterceptorFilter } from './authorization-header-filter.interceptor';\r\nimport { CacheInterceptor } from './cache.interceptor';\r\nimport { ErrorHandlerInterceptor } from './error-handler.interceptor';\r\nimport { HttpCacheService } from './http-cache.service';\r\nimport { HttpConfig, HttpConfigService } from './http-config.service';\r\nimport { HttpService } from './http.service';\r\nimport { IECacheHeaderInterceptor } from './ie-cache-header-interceptor';\r\n\r\n@NgModule({\r\n  imports: [HttpClientModule]\r\n})\r\nexport class HttpModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: HttpModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'HttpModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n\r\n  static forRoot(config: HttpConfig = {}): ModuleWithProviders<HttpModule> {\r\n    return {\r\n      ngModule: HttpModule,\r\n      providers: [\r\n        AuthorizationHeaderInterceptor,\r\n        CacheInterceptor,\r\n        ErrorHandlerInterceptor,\r\n        IECacheHeaderInterceptor,\r\n        HttpCacheService,\r\n        AuthorizationHeaderInterceptorFilter,\r\n        {\r\n          provide: HttpClient,\r\n          useClass: HttpService\r\n        },\r\n        {\r\n          provide: HttpConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  HttpClient,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthorizationHeaderInterceptor } from './authorization-header.interceptor';\r\nimport { AuthorizationHeaderInterceptorFilter } from './authorization-header-filter.interceptor';\r\nimport { CacheInterceptor } from './cache.interceptor';\r\nimport { ErrorHandlerInterceptor } from './error-handler.interceptor';\r\nimport { IECacheHeaderInterceptor } from './ie-cache-header-interceptor';\r\n\r\n// HttpClient is declared in a re-exported module, so we have to extend the original module to make it work properly\r\n// (see https://github.com/Microsoft/TypeScript/issues/13897)\r\ndeclare module '@angular/common/http/' {\r\n  // Augment HttpClient with the added configuration methods from HttpService, to allow in-place replacement of\r\n  // HttpClient with HttpService using dependency injection\r\n  export interface HttpClient {\r\n    /**\r\n     * Enables caching for this request.\r\n     * @param forceUpdate Forces request to be made and updates cache entry.\r\n     * @return The new instance.\r\n     */\r\n    cache(forceUpdate?: boolean): HttpClient;\r\n\r\n    /**\r\n     * Skips default error handler for this request.\r\n     * @return The new instance.\r\n     */\r\n    skipErrorHandler(): HttpClient;\r\n\r\n    /**\r\n     * Append an authorization header to this request.\r\n     * @return The new instance.\r\n     */\r\n    authorize(): HttpClient;\r\n  }\r\n}\r\n\r\n// From @angular/common/http/src/interceptor: allows to chain interceptors\r\nclass HttpInterceptorHandler implements HttpHandler {\r\n  constructor(\r\n    private next: HttpHandler,\r\n    private interceptor: HttpInterceptor\r\n  ) {}\r\n\r\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\r\n    return this.interceptor.intercept(request, this.next);\r\n  }\r\n}\r\n\r\n/**\r\n * Allows to override default dynamic interceptors that can be disabled with the HttpService extension.\r\n * Except for very specific needs, you should better configure these interceptors directly in the constructor below\r\n * for better readability.\r\n *\r\n * For static interceptors that should always be enabled, use the standard HTTP_INTERCEPTORS token.\r\n */\r\nexport const HTTP_DYNAMIC_INTERCEPTORS = new InjectionToken<HttpInterceptor>(\r\n  'HTTP_DYNAMIC_INTERCEPTORS'\r\n);\r\n\r\n/**\r\n * Extends HttpClient with per request configuration using dynamic interceptors.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService extends HttpClient {\r\n  constructor(\r\n    private httpHandler: HttpHandler,\r\n    private injector: Injector,\r\n    @Optional()\r\n    @Inject(HTTP_DYNAMIC_INTERCEPTORS)\r\n    private interceptors: HttpInterceptor[] = []\r\n  ) {\r\n    super(httpHandler);\r\n\r\n    if (!this.interceptors) {\r\n      // Configure default interceptors that can be disabled here\r\n      this.interceptors = [\r\n        this.injector.get(ErrorHandlerInterceptor),\r\n        this.injector.get(IECacheHeaderInterceptor)\r\n      ];\r\n    }\r\n  }\r\n\r\n  authorize(): HttpClient {\r\n    const authHeaderInterceptor = this.injector.get(\r\n      AuthorizationHeaderInterceptor\r\n    );\r\n    return this.addInterceptor(authHeaderInterceptor);\r\n  }\r\n  authorizeFilter(): HttpClient {\r\n    const authHeaderInterceptor = this.injector.get(\r\n      AuthorizationHeaderInterceptorFilter\r\n    );\r\n\r\n    return this.addInterceptor(authHeaderInterceptor);\r\n  }\r\n\r\n  cache(forceUpdate?: boolean): HttpClient {\r\n    const cacheInterceptor = this.injector\r\n      .get(CacheInterceptor)\r\n      .configure({ update: forceUpdate });\r\n    return this.addInterceptor(cacheInterceptor);\r\n  }\r\n\r\n  skipErrorHandler(): HttpClient {\r\n    return this.removeInterceptor(ErrorHandlerInterceptor);\r\n  }\r\n\r\n  // Override the original method to wire interceptors when triggering the request.\r\n  request(method?: any, url?: any, options?: any): any {\r\n    const handler = this.interceptors.reduceRight(\r\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor),\r\n      this.httpHandler\r\n    );\r\n    return new HttpClient(handler).request(method, url, options);\r\n  }\r\n\r\n  private removeInterceptor(interceptorType: Function): HttpService {\r\n    return new HttpService(\r\n      this.httpHandler,\r\n      this.injector,\r\n      this.interceptors.filter(i => !(i instanceof interceptorType))\r\n    );\r\n  }\r\n\r\n  private addInterceptor(interceptor: HttpInterceptor): HttpService {\r\n    return new HttpService(\r\n      this.httpHandler,\r\n      this.injector,\r\n      this.interceptors.concat([interceptor])\r\n    );\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * Appends no-cache headers to the request.\r\n * This solves a problem particularly with Internet Explorer where REST API responses would be cached by the browser, showing outdated information in the app.\r\n */\r\n@Injectable()\r\nexport class IECacheHeaderInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (request.method === 'GET') {\r\n      const customRequest = request.clone({\r\n        headers: request.headers\r\n          .set('Cache-Control', 'no-cache')\r\n          .set('Pragma', 'no-cache')\r\n      });\r\n      return next.handle(customRequest);\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","export * from './lib/i18n.module';\nexport * from './lib/i18n.service';\nexport { I18nConfig } from './lib/i18n-config.service';\n","import { InjectionToken } from '@angular/core';\r\nimport { Dictionary } from 'lodash';\r\n\r\nexport interface LanguagesConfig {\r\n  [IETF_LANGUAGE_TAg: string]: Dictionary<string>;\r\n}\r\n\r\n/**\r\n * Configure the available languages by adding dictionaries containing translations, keyed by IETF language tag.\r\n */\r\nexport interface I18nConfig {\r\n  defaultLanguage: string;\r\n  languages: LanguagesConfig;\r\n}\r\n\r\nexport const I18nConfigService = new InjectionToken<I18nConfig>('I18nConfig');\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { I18nConfig, I18nConfigService } from './i18n-config.service';\r\nimport { I18nService } from './i18n.service';\r\n\r\n@NgModule({\r\n  imports: [TranslateModule.forRoot()],\r\n  exports: [TranslateModule]\r\n})\r\nexport class I18nModule {\r\n  constructor(\r\n    private readonly i18nService: I18nService,\r\n    @Optional() @SkipSelf() parentModule: I18nModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'I18nModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    this.i18nService.init();\r\n  }\r\n\r\n  static forRoot(config: I18nConfig): ModuleWithProviders<I18nModule> {\r\n    return {\r\n      ngModule: I18nModule,\r\n      providers: [\r\n        I18nService,\r\n        {\r\n          provide: I18nConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRouteSnapshot, Router, RoutesRecognized } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { includes } from 'lodash';\r\nimport { combineLatest, merge } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, pluck, shareReplay, switchMapTo } from 'rxjs/operators';\r\nimport { I18nConfig, I18nConfigService } from './i18n-config.service';\r\n\r\nconst log = new Logger('I18nService');\r\nconst languageKey = 'language';\r\n\r\n/**\r\n * Pass-through function to mark a string for translation extraction.\r\n * @param s The string to extract for translation.\r\n * @return The same string.\r\n */\r\nexport function extract(s: string) {\r\n  return s;\r\n}\r\n\r\nexport interface I18nStoreContext {\r\n  defaultLanguage?: string;\r\n  supportedLanguages?: string[];\r\n  userLanguage?: string;\r\n  currentLanguage?: string;\r\n}\r\n\r\n/**\r\n * Passes through all child nodes of the given `ActivatedRouteSnapshot` and returns the furthest page title found.\r\n * If no title is found, returns `undefined`.\r\n */\r\nfunction findTitle(activatedRoute: ActivatedRouteSnapshot): string {\r\n  let title: string;\r\n  if (activatedRoute.firstChild) {\r\n    title = findTitle(activatedRoute.firstChild);\r\n  }\r\n  if (!title) {\r\n    title = activatedRoute.data['title'];\r\n  }\r\n  return title;\r\n}\r\n\r\n@Injectable()\r\nexport class I18nService extends BasicStore<I18nStoreContext> {\r\n  defaultLanguage: string;\r\n\r\n  constructor(\r\n    private readonly router: Router,\r\n    private readonly titleService: Title,\r\n    private readonly translateService: TranslateService,\r\n    @Inject(I18nConfigService) config: I18nConfig,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: {\r\n        defaultLanguage: config.defaultLanguage,\r\n        supportedLanguages: Object.keys(config.languages),\r\n        userLanguage:\r\n          localStorage.getItem(languageKey) ||\r\n          translateService.getBrowserCultureLang()\r\n      },\r\n      name: 'I18nService',\r\n      storeService\r\n    });\r\n    Object.entries(config.languages).forEach(([lang, translations]) =>\r\n      this.setTranslation(lang, translations)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initializes i18n for the application.\r\n   * Loads language from local storage if present, or sets default language.\r\n   * @param defaultLanguage The default language to use.\r\n   * @param supportedLanguages The list of supported languages.\r\n   */\r\n  init() {\r\n    // Whenever the current language changes, update the store\r\n    this.translateService.onLangChange\r\n      .pipe(pluck('lang'))\r\n      .subscribe((lang: string) =>\r\n        this.update({\r\n          payload: { currentLanguage: lang },\r\n          description: 'Current language settings updated'\r\n        })\r\n      );\r\n\r\n    // Whenever new route data becomes available, look up the current page title\r\n    const pageTitle = this.router.events.pipe(\r\n      filter(data => data instanceof RoutesRecognized),\r\n      map((data: RoutesRecognized) => findTitle(data.state.root)),\r\n      distinctUntilChanged(),\r\n      shareReplay()\r\n    );\r\n\r\n    // Whenever the current language or the page title changes, update the page title\r\n    merge([this.translateService.onLangChange, pageTitle])\r\n      .pipe(switchMapTo(pageTitle))\r\n      .subscribe(title => {\r\n        if (title) {\r\n          this.titleService.setTitle(this.translateService.instant(title));\r\n        }\r\n      });\r\n\r\n    // Whenever the current language changes, cache it as the the user's preferred language in the localStorage\r\n    this.select('currentLanguage').subscribe(lang =>\r\n      localStorage.setItem(languageKey, lang)\r\n    );\r\n\r\n    // Whenever the user's language, supported languages, or default language update, update the `TranslateService` to use this language.\r\n    combineLatest([\r\n      this.select('userLanguage'),\r\n      this.select('supportedLanguages'),\r\n      this.select('defaultLanguage')\r\n    ])\r\n      .pipe(\r\n        map(([userLang, supportedLangs, defaultLang]) => {\r\n          let lang = userLang;\r\n          let isSupportedLanguage = includes(supportedLangs, lang);\r\n          // If no exact match is found, search without the region\r\n          if (userLang && !isSupportedLanguage) {\r\n            const noRegion = lang.split('-')[0];\r\n            lang =\r\n              supportedLangs.find(supportedLanguage =>\r\n                supportedLanguage.startsWith(noRegion)\r\n              ) || '';\r\n            isSupportedLanguage = Boolean(lang);\r\n          }\r\n          // Fallback if language is not supported\r\n          if (!isSupportedLanguage) {\r\n            lang = defaultLang;\r\n          }\r\n          return lang;\r\n        })\r\n      )\r\n      .subscribe(lang => {\r\n        log.debug(`Language set to ${lang}`);\r\n        this.translateService.use(lang);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sets the current language.\r\n   * Note: The current language is saved to the local storage.\r\n   * If no parameter is specified, the language is loaded from local storage (if present).\r\n   * @param language The IETF language code to set.\r\n   */\r\n  setLanguage(language: string) {\r\n    this.update({\r\n      payload: { userLanguage: language },\r\n      description: 'New preferred language selected'\r\n    });\r\n  }\r\n\r\n  /** Merges a set of translations with the current dictionary for the given language. */\r\n  setTranslation(\r\n    /** The IETF language code associated with the translations */\r\n    language: string,\r\n    /** The translations to merge with the current dictionary */\r\n    translations: Object\r\n  ) {\r\n    this.translateService.setTranslation(language, translations, true);\r\n  }\r\n}\r\n","export * from './lib/logger';\nexport { LoggerConfig } from './lib/logger-config.service';\nexport * from './lib/logger.module';\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface LoggerConfig {\r\n  readonly production?: boolean;\r\n}\r\n\r\nexport const LoggerConfigService = new InjectionToken<\r\n  LoggerConfig\r\n>('LoggerConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { Logger } from './logger';\r\nimport { LoggerConfig, LoggerConfigService } from './logger-config.service';\r\n\r\n@NgModule()\r\nexport class LoggerModule {\r\n  constructor(\r\n    @Optional() @Inject(LoggerConfigService) config: LoggerConfig = {},\r\n    @Optional() @SkipSelf() parentModule: LoggerModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'LoggerModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      Logger.enableProductionMode();\r\n    }\r\n  }\r\n  \r\n  static forRoot(config: LoggerConfig = {}): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        {\r\n          provide: LoggerConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Simple logger system with the possibility of registering custom outputs.\r\n *\r\n * 4 different log levels are provided, with corresponding methods:\r\n * - debug   : for debug information\r\n * - info    : for informative status of the application (success, ...)\r\n * - warning : for non-critical errors that do not prevent normal application behavior\r\n * - error   : for critical errors that prevent normal application behavior\r\n *\r\n * Example usage:\r\n * ```\r\n * import { Logger } from 'app/core/logger.service';\r\n *\r\n * const log = new Logger('myFile');\r\n * ...\r\n * log.debug('something happened');\r\n * ```\r\n *\r\n * To disable debug and info logs in production, add this snippet to your root module:\r\n * ```\r\n * @NgModule({\r\n *  imports: [\r\n *    LoggerModule.forRoot({ production: environment.production }),\r\n *    ...\r\n *  ]\r\n * })\r\n * export class AppModule {}\r\n *\r\n * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.\r\n */\r\n\r\n/**\r\n * The possible log levels.\r\n * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.\r\n */\r\nexport enum LogLevel {\r\n  Off = 0,\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug\r\n}\r\n\r\n/**\r\n * Log output handler function.\r\n */\r\nexport type LogOutput = (\r\n  source: string,\r\n  level: LogLevel,\r\n  ...objects: any[]\r\n) => void;\r\n\r\nexport class Logger {\r\n  /**\r\n   * Current logging level.\r\n   * Set it to LogLevel.Off to disable logs completely.\r\n   */\r\n  static level = LogLevel.Debug;\r\n\r\n  /**\r\n   * Enables production mode.\r\n   * Sets logging level to LogLevel.Warning.\r\n   */\r\n  static enableProductionMode() {\r\n    Logger.level = LogLevel.Warning;\r\n  }\r\n\r\n  constructor(private source?: string) {}\r\n\r\n  /**\r\n   * Logs messages or objects with the debug level.\r\n   * Works the same as console.log().\r\n   */\r\n  debug(...objects: any[]) {\r\n    this.log(console.log, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the error level.\r\n   * Works the same as console.log().\r\n   */\r\n  error(...objects: any[]) {\r\n    this.log(console.error, LogLevel.Error, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the info level.\r\n   * Works the same as console.log().\r\n   */\r\n  info(...objects: any[]) {\r\n    this.log(console.info, LogLevel.Info, objects);\r\n  }\r\n\r\n  /**\r\n   * Starts a timer with the given label. Outputs at the debug level.\r\n   * @param objects The label of the timer\r\n   */\r\n  time(...objects: any[]) {\r\n    this.log(console.time, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Ends the timer with the given label. Outputs at the debug level.\r\n   * @param objects The label of the timer\r\n   */\r\n  timeEnd(...objects: any[]) {\r\n    this.log(console.timeEnd, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the warning level.\r\n   * Works the same as console.log().\r\n   */\r\n  warn(...objects: any[]) {\r\n    this.log(console.warn, LogLevel.Warning, objects);\r\n  }\r\n\r\n  private log(func: Function, level: LogLevel, objects: any[]) {\r\n    if (level <= Logger.level) {\r\n      const messageContent = objects.join(', ');\r\n      const logMessage = this.source\r\n        ? `[${this.source}] ${messageContent}`\r\n        : messageContent;\r\n      func.call(console, logMessage);\r\n    }\r\n  }\r\n}\r\n","export { NotificationsConfig } from './lib/notifications-config.service';\nexport * from './lib/notifications.module';\nexport * from './lib/notifications.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NotificationsConfig {\r\n  readonly badgePath?: string;\r\n  readonly iconPath?: string;\r\n}\r\n\r\nexport const NotificationsConfigService = new InjectionToken<\r\n  NotificationsConfig\r\n>('NotificationsConfig');\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NotificationsConfig, NotificationsConfigService } from './notifications-config.service';\n\n@NgModule()\nexport class NotificationsModule {\n  static forRoot(config: NotificationsConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: NotificationsModule,\n      providers: [\n        {\n          provide: NotificationsConfigService,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { now } from 'lodash';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { NotificationsConfig, NotificationsConfigService } from './notifications-config.service';\r\nimport { NotificationsModule } from './notifications.module';\r\n\r\nexport interface NotificationOptions {\r\n  /** Detailed message */\r\n  body?: string;\r\n  /** Whether or not to play a notification sound */\r\n  silent?: boolean;\r\n  /** Optional notification ID. Use this to group notifications. If not set, a random UUID is used. */\r\n  tag?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: NotificationsModule\r\n})\r\nexport class NotificationsService {\r\n  private serviceWorkerRegistration: ServiceWorkerRegistration;\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(NotificationsConfigService)\r\n    private config: NotificationsConfig = {}\r\n  ) {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        this.serviceWorkerRegistration = registration;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to show a notification to the user.\r\n   * Notifications are user opt-in based.\r\n   * The user will be prompted to grant permission if not already granted or denied.\r\n   * Prefers the service worker persistent notification interface, but falls back to browser notifications if the service worker is unavailable.\r\n   * Returns the tag of the notification.\r\n   */\r\n  async showNotification(\r\n    /** The notification message that will be shown to the user */\r\n    title: string,\r\n    /** Additional options */\r\n    options: NotificationOptions = {}\r\n  ): Promise<string | null> {\r\n    let result = null;\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      if (permission === 'granted') {\r\n        const config = Object.assign(\r\n          {\r\n            badge: this.config.badgePath,\r\n            icon: this.config.iconPath,\r\n            tag: result = uuid(),\r\n            timestamp: now()\r\n          },\r\n          options\r\n        );\r\n        result = config.tag;\r\n        if (this.serviceWorkerRegistration) {\r\n          this.serviceWorkerRegistration.showNotification(title, config);\r\n        } else {\r\n          new Notification(title, config);\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export * from './lib/branch-permission';\nexport * from './lib/feature';\nexport * from './lib/project-permission';\n\n","import { OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport abstract class AbstractPermissionDirective implements OnInit, OnDestroy {\r\n  /** Indicates the current user permission state */\r\n  protected readonly hasPermission$: Subject<boolean> = new BehaviorSubject(false);\r\n\r\n  /** Indicates whether or not the view has been created. Can also be false if previously created, but destroyed. */\r\n  protected hasView = false;\r\n\r\n  constructor(\r\n    protected readonly templateRef: TemplateRef<any>,\r\n    protected readonly viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Whenever the permission provider emits a new value, propagate the new permission state.\r\n    this.permissionProvider\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(this.hasPermission$);\r\n\r\n    //Whenever the permissions change, trigger the update of the view.\r\n    this.hasPermission$\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(hasPermission => this.handlePermissionChange(hasPermission));\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  /**\r\n   * Provides the permission state as an observable stream.\r\n   */\r\n  protected abstract get permissionProvider(): Observable<boolean>;\r\n\r\n  /**\r\n   * Updates the view based on the given permission state.\r\n   */\r\n  protected abstract handlePermissionChange(hasPermission: boolean): void;\r\n}\r\n","import { TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { BranchPermissionLevel } from '@models4insight/repository';\r\nimport { combineLatest, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\nexport abstract class AbstractBranchPermissionDirective extends AbstractPermissionDirective {\r\n  protected readonly level$: Subject<BranchPermissionLevel> = new ReplaySubject<\r\n    BranchPermissionLevel\r\n  >();\r\n\r\n  protected readonly branchName$: Subject<string> = new ReplaySubject<string>();\r\n\r\n  constructor(\r\n    protected readonly branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return combineLatest([this.branchName$, this.level$]).pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(([branchName, permissionLevel]) =>\r\n        this.branchPermissionService.checkPermission(\r\n          branchName,\r\n          permissionLevel\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { BranchPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractBranchPermissionDirective } from './abstract-branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-branch-permission, [models4insight-branch-permission]'\r\n})\r\nexport class BranchPermissionDirective extends AbstractBranchPermissionDirective {\r\n  constructor(\r\n    branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(branchPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-branch-permission')\r\n  set level(level: BranchPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  @Input('models4insight-branch-permissionBranch')\r\n  set branchName(branchName: string) {\r\n    this.branchName$.next(branchName);\r\n  }\r\n\r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { ProjectPermissionModule } from '../project-permission';\r\nimport { BranchPermissionDirective } from './branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\nimport { HasBranchPermissionDirective } from './has-branch-permission.directive';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule, ProjectPermissionModule],\r\n  declarations: [BranchPermissionDirective, HasBranchPermissionDirective],\r\n  exports: [BranchPermissionDirective, HasBranchPermissionDirective]\r\n})\r\nexport class BranchPermissionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BranchPermissionModule,\r\n      providers: [BranchPermissionService]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { BranchPermissionLevel, PermissionLevel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport { concatMap, map, switchMap, takeUntil, withLatestFrom } from 'rxjs/operators';\r\nimport { ProjectPermissionService } from '../project-permission';\r\n\r\nexport interface BranchPermissionStoreContext {\r\n  readonly permissions?: {\r\n    readonly [project: string]: {\r\n      readonly [branch: string]: BranchPermissionLevel;\r\n    };\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class BranchPermissionService extends BasicStore<\r\n  BranchPermissionStoreContext\r\n> {\r\n  private readonly checkPermission$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    private readonly projectPermissionService: ProjectPermissionService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'BranchPermissionService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Handles control flow to prevent flooding the rest api with requests for the same project.\r\n    // After the first request is made for any combination of project ID and branch name, any further requests can be served from the store.\r\n    this.checkPermission$\r\n      .pipe(\r\n        withLatestFrom(this.projectService.select('projectId')),\r\n        concatMap(([branchName, projectId]) =>\r\n          // This manages control flow for updates on the store to ensure there are no excess updates due to triggers in quick succession\r\n          of(1).pipe(\r\n            switchMap(() => this.handleCheckPermission(projectId, branchName)),\r\n            takeUntil(this.select(['permissions', projectId, branchName]))\r\n          )\r\n        )\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not the current user meets the required permission level for the branch of the given project. The owner of a project always has the required permissions.\r\n   * @param project the project to check permission for\r\n   * @param branchName the branch to check permission for\r\n   * @param requiredPermissionLevel the minimum permission level required\r\n   */\r\n  checkPermission(\r\n    branchName: string,\r\n    requiredPermissionLevel: BranchPermissionLevel\r\n  ): Observable<boolean> {\r\n    this.checkPermission$.next(branchName);\r\n\r\n    const branchPermissionLevel = this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select(['permissions', projectId, branchName])\r\n        )\r\n      );\r\n\r\n    const isOwner = this.projectPermissionService.checkPermission(\r\n      PermissionLevel.OWNER\r\n    );\r\n\r\n    return combineLatest([branchPermissionLevel, isOwner]).pipe(\r\n      map(([branchPermissionLevel, isOwner]) => branchPermissionLevel <= requiredPermissionLevel || isOwner)\r\n    );\r\n  }\r\n\r\n  private async handleCheckPermission(projectId: string, branchName: string) {\r\n    // Placeholder while rest api function is still unavailable.\r\n    this.update({\r\n      description: `Permission level updated for branch ${branchName} of project ${projectId}`,\r\n      path: ['permissions', projectId, branchName],\r\n      payload: PermissionLevel.OWNER\r\n    });\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Project, BranchPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractBranchPermissionDirective } from './abstract-branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-has-branch-permission, [models4insight-has-branch-permission]'\r\n})\r\nexport class HasBranchPermissionDirective extends AbstractBranchPermissionDirective {\r\n  private context: { hasPermission: boolean } = { hasPermission: false };\r\n\r\n  constructor(\r\n    branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(branchPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-has-branch-permission')\r\n  set level(level: BranchPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n  \r\n  @Input('models4insight-has-branch-permissionBranch')\r\n  set branchName(branchName: string) {\r\n    this.branchName$.next(branchName);\r\n  }\r\n\r\n  /**\r\n   * Updates the context of the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (!this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef, this.context);\r\n      this.hasView = true;\r\n    }\r\n    this.context.hasPermission = hasPermission;\r\n  }\r\n}\r\n","export * from './branch-permission.directive';\r\nexport * from './branch-permission.module';\r\nexport * from './branch-permission.service';\r\nexport * from './has-branch-permission.directive';\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { Feature, FeatureService } from './feature.service';\r\n\r\n@Directive({\r\n  selector: 'models4insight-feature, [models4insight-feature]'\r\n})\r\nexport class FeatureDirective extends AbstractPermissionDirective {\r\n  private subscription$: Subject<Feature> = new ReplaySubject<Feature>();\r\n\r\n  constructor(\r\n    private readonly featureService: FeatureService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-feature')\r\n  set subscription(value: Feature) {\r\n    this.subscription$.next(value);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return this.subscription$.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(subscription =>\r\n        this.featureService.checkPermission(subscription)\r\n      )\r\n    );\r\n  } \r\n  \r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { FeatureDirective } from './feature.directive';\r\nimport { FeatureService } from './feature.service';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule],\r\n  declarations: [FeatureDirective],\r\n  providers: [FeatureService],\r\n  exports: [FeatureDirective]\r\n})\r\nexport class FeatureModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\n\r\nexport interface FeatureStoreContext {\r\n  readonly subscription?: {\r\n    readonly [featureName: string]: boolean;\r\n  };\r\n}\r\n\r\nexport enum Feature {\r\n  ANALYTICS_ACCESS = 'analytics_access',\r\n  DATA2MODEL_ACCESS = 'data2model_access',\r\n  DATA2MODEL_BRANCH_CREATE = 'data2model_branch_create',\r\n  DATA2MODEL_MODEL_SAVE = 'data2model_model_save',\r\n  DATA2MODEL_RULES_EDIT = 'data2model_rules_edit',\r\n  DATA2MODEL_RULES_SAVE = 'data2model_rules_save',\r\n  DATA2MODEL_SUGGESTIONS = 'data2model_suggestions',\r\n  PLATFORM_ACCESS = 'platform_access',\r\n  PLATFORM_BRANCH_ACCESS_RIGHTS = 'platform_branch_access_rights',\r\n  PLATFORM_BRANCH_CREATE = 'platform_branch_create',\r\n  PLATFORM_BRANCH_MERGE = 'platform_branch_merge',\r\n  PLATFORM_MODEL_EXPLORE = 'platform_model_explore',\r\n  PLATFORM_MODEL_RETRIEVE = 'platform_model_retrieve',\r\n  PLATFORM_MODEL_UPLOAD = 'platform_model_upload',\r\n  PLATFORM_PROJECT_COLLABORATE = 'platform_project_collaborate',\r\n  PLATFORM_PROJECT_CONTINUE_WORKING = 'platform_project_continue_working',\r\n  PLATFORM_PROJECT_CREATE = 'platform_project_create',\r\n  PLATFORM_PROJECT_HOME = 'platform_project_home',\r\n  PLATFORM_USER_GROUPS_CREATE = 'platform_user_groups_create'\r\n}\r\n\r\n@Injectable()\r\nexport class FeatureService extends BasicStore<FeatureStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({ name: 'FeatureService', storeService });\r\n  }\r\n\r\n  /**\r\n   * Checks with the backend whether or not the current user can access the feature with the given name and updates the store accordingly.\r\n   */\r\n  checkPermission(feature: Feature) {\r\n    // This is a placeholder while the backend function is not yet available\r\n    this.update({\r\n      description: `Subscription updated for feature ${feature}`,\r\n      path: ['subscription', feature],\r\n      payload: true\r\n    });\r\n\r\n    return this.select(['subscription', feature]);\r\n  }\r\n}\r\n","export * from './feature.module';\r\nexport * from './feature.directive';\r\nexport * from './feature.service';","import { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { Observable, combineLatest, Subject, ReplaySubject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { Project, ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nexport abstract class AbstractProjectPermissionDirective extends AbstractPermissionDirective {\r\n  protected readonly level$: Subject<\r\n    ProjectPermissionLevel\r\n  > = new ReplaySubject<ProjectPermissionLevel>();\r\n\r\n  constructor(\r\n    protected readonly projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return this.level$.pipe(\r\n      switchMap(permissionLevel =>\r\n        this.projectPermissionService.checkPermission(permissionLevel)\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractProjectPermissionDirective } from './abstract-project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-has-project-permission, [models4insight-has-project-permission]'\r\n})\r\nexport class HasProjectPermissionDirective extends AbstractProjectPermissionDirective {\r\n  private context: { hasPermission: boolean } = { hasPermission: false };\r\n\r\n  constructor(\r\n    projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(projectPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-has-project-permission')\r\n  set level(level: ProjectPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  /**\r\n   * Updates the context of the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (!this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef, this.context);\r\n      this.hasView = true;\r\n    }\r\n    this.context.hasPermission = hasPermission;\r\n  }\r\n}\r\n","export * from './project-permission.directive';\r\nexport * from './project-permission.module';\r\nexport * from './project-permission.service';\r\nexport * from './has-project-permission.directive'\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractProjectPermissionDirective } from './abstract-project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-project-permission, [models4insight-project-permission]'\r\n})\r\nexport class ProjectPermissionDirective extends AbstractProjectPermissionDirective {\r\n  \r\n  constructor(\r\n    projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(projectPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-project-permission')\r\n  set level(level: ProjectPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n \r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { HasProjectPermissionDirective } from './has-project-permission.directive';\r\nimport { ProjectPermissionDirective } from './project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule],\r\n  declarations: [\r\n    ProjectPermissionDirective,\r\n    HasProjectPermissionDirective,\r\n  ],\r\n  exports: [ProjectPermissionDirective, HasProjectPermissionDirective]\r\n})\r\nexport class ProjectPermissionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ProjectPermissionModule,\r\n      providers: [ProjectPermissionService]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { getUserRole, ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { Observable, of } from 'rxjs';\r\nimport { concatMap, distinctUntilKeyChanged, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nexport interface ProjectPermissionStoreContext {\r\n  readonly permissions?: {\r\n    readonly [projectId: string]: ProjectPermissionLevel;\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class ProjectPermissionService extends BasicStore<\r\n  ProjectPermissionStoreContext\r\n> {\r\n  constructor(\r\n    private projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ProjectPermissionService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Handles control flow to prevent flooding the rest api with requests for the same project.\r\n    // After the first request is made for any project ID, any further requests can be served from the store.\r\n    this.projectService\r\n      .selectCurrentProject()\r\n      .pipe(\r\n        distinctUntilKeyChanged('id'),\r\n        concatMap(({ project }) =>\r\n          // This manages control flow for updates on the store to ensure there are no excess updates due to triggers in quick succession\r\n          of(1).pipe(\r\n            switchMap(() => this.handleCheckPermissions(project)),\r\n            takeUntil(this.select(['permissions', project]))\r\n          )\r\n        )\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable`stream of whether or not the current user meets the given minimum required permission level for the current project.\r\n   * @param requiredPermissionLevel The minimum permission level required.\r\n   */\r\n  checkPermission(\r\n    requiredPermissionLevel: ProjectPermissionLevel\r\n  ): Observable<boolean> {\r\n    return this.projectService.selectCurrentProject().pipe(\r\n      switchMap(({ project }) => this.select(['permissions', project])),\r\n      map(permissionLevel => permissionLevel <= requiredPermissionLevel)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the current huser meets the given minimum required permission level for the current project\r\n   * @param requiredPermissionLevel The minimum permission level required.\r\n   */\r\n  async hasPermission(requiredPermissionLevel: ProjectPermissionLevel) {\r\n    const { project } = await this.projectService.getCurrentProject(),\r\n      permissionLevel = await this.get(['permissions', project]);\r\n\r\n    return permissionLevel <= requiredPermissionLevel;\r\n  }\r\n\r\n  private async handleCheckPermissions(projectName: string) {\r\n    const { role_id } = await getUserRole(projectName, {\r\n      forceUpdate: true\r\n    }).toPromise();\r\n\r\n    this.update({\r\n      description: `Permission level updated for project ${projectName}`,\r\n      path: ['permissions', projectName],\r\n      payload: role_id\r\n    });\r\n  }\r\n}\r\n","export * from './lib/action';\r\nexport * from './lib/basic-store';\r\nexport { ReduxConfig } from './lib/redux-config.service';\r\nexport * from './lib/redux.module';\r\nexport * from './lib/store';\r\nexport * from './lib/store.service';\r\n\r\n","import { OnDestroy } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { SubType, untilDestroyed } from '@models4insight/utils';\r\nimport { cloneDeep, Dictionary, differenceWith, isEqual } from 'lodash';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, first, map, pairwise, pluck, scan } from 'rxjs/operators';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Action, ActionType, ResetAction } from './action';\r\nimport { Store, StoreContext } from './store';\r\nimport { StoreService } from './store.service';\r\n\r\nconst win = window as any;\r\n\r\nexport interface AbstractStoreOptions<CONTEXT> {\r\n  /**\r\n   * The initial state of this store. Can be restored by calling `reset()`.\r\n   */\r\n  defaultState?: CONTEXT;\r\n  /**\r\n   * The name of this store. Used to tag debug output and as a key in the `StoreService` snapshot. The store name should be unique across all stores.\r\n   * It is recommended to choose a recognizable, human readable name for a store.\r\n   * If no name is given, a UUID is assigned instead.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Reducers for this store keyed by action type\r\n   */\r\n  rootReducers?: Dictionary<RootReducer>;\r\n  /**\r\n   * Pass a reference to the `StoreService` if you want this store to be registered for snapshotting\r\n   */\r\n  storeService?: StoreService;\r\n}\r\n\r\nexport type RootReducer<CONTEXT extends StoreContext = StoreContext> = (\r\n  state: CONTEXT,\r\n  action: Action<CONTEXT>\r\n) => CONTEXT;\r\n\r\nexport const abstractStoreDefaultState: StoreContext = {};\r\n\r\n/**\r\n * An abstract base store which provides some shared functionality\r\n */\r\nexport abstract class AbstractStore<\r\n  CONTEXT extends StoreContext,\r\n  ACTION extends Action<CONTEXT> = Action<CONTEXT>\r\n> implements OnDestroy, Store<CONTEXT> {\r\n  /**\r\n   * Whether or not the Store is running in production mode\r\n   */\r\n  public static production = false;\r\n\r\n  /**\r\n   * The current session ID shared across all stores for debugging and telemetry\r\n   */\r\n  private static readonly sessionId = uuid();\r\n\r\n  /**\r\n   * The display name of the store\r\n   */\r\n  public readonly name: string;\r\n\r\n  /**\r\n   * The initial state of the store\r\n   */\r\n  protected readonly defaultState: CONTEXT;\r\n\r\n  /**\r\n   * Instance of the logger for this store\r\n   */\r\n  protected readonly logger: Logger;\r\n\r\n  private readonly actions$ = new Subject<ACTION | ResetAction>();\r\n  private readonly state$: BehaviorSubject<CONTEXT>;\r\n\r\n  private readonly rootReducers: Dictionary<RootReducer> = {};\r\n\r\n  constructor({\r\n    storeService,\r\n    name = uuid(),\r\n    rootReducers = {},\r\n    defaultState = abstractStoreDefaultState as CONTEXT\r\n  }: AbstractStoreOptions<CONTEXT> = {}) {\r\n    // Set the default state of the store as a clone of the given default state in case the default state is shared between several stores\r\n    this.defaultState = cloneDeep(defaultState);\r\n\r\n    // Initialize the state with the given default state\r\n    this.state$ = new BehaviorSubject<CONTEXT>(this.defaultState);\r\n\r\n    // Add the reset operation to the given set of reducers\r\n    this.rootReducers = {\r\n      ...rootReducers,\r\n      [ActionType.RESET]: () => this.reduceReset()\r\n    };\r\n\r\n    // If no store name is given, a UUID is used instead\r\n    this.name = name;\r\n\r\n    // Initialize the logger with either the store name or the UUID.\r\n    this.logger = new Logger(this.name);\r\n\r\n    // Register this store with the parent service if a reference is given. This is used for error reporting.\r\n    if (storeService) {\r\n      storeService.register(this);\r\n    }\r\n\r\n    // Start up the reducer that maintains the state\r\n    this.actions$\r\n      .pipe(this.reducer(), untilDestroyed(this))\r\n      .subscribe(this.state$);\r\n  }\r\n\r\n  /**\r\n   * Enables production mode.\r\n   * Disables emissions to Redux DevTools\r\n   */\r\n  static enableProductionMode() {\r\n    AbstractStore.production = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.actions$.complete();\r\n    this.state$.complete();\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current state at the given path\r\n   * @param path the path of the state to return\r\n   */\r\n  get<P extends keyof CONTEXT>(\r\n    path: P | [P],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P]>;\r\n  get<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(\r\n    path: [P, Q],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(\r\n    path: [P, Q, R],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(\r\n    path: [P, Q, R, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R][S]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R],\r\n    T extends keyof CONTEXT[P][Q][R][S]\r\n  >(\r\n    path: [P, Q, R, S, T],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R][S][T]>;\r\n  get(path: any, options: { includeFalsy?: boolean } = {}): Promise<any> {\r\n    return this.select(path, options)\r\n      .pipe(first())\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Returns the store to its default state\r\n   */\r\n  reset() {\r\n    this.dispatch({\r\n      type: ActionType.RESET,\r\n      description: 'Return to default state'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the state at the given path\r\n   * @param path the path of the state to observe\r\n   * @param options includeFalsy - whether to include values that are falsy (e.g. undefined, null, NaN)\r\n   */\r\n  select<P extends keyof CONTEXT>(\r\n    path: P | [P],\r\n    options?: {\r\n      /** Whether or not to include values that are falsy (e.g. undefined, null, NaN) */\r\n      includeFalsy?: boolean;\r\n    }\r\n  ): Observable<CONTEXT[P]>;\r\n  select<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(\r\n    path: [P, Q],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(\r\n    path: [P, Q, R],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(\r\n    path: [P, Q, R, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R][S]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R],\r\n    T extends keyof CONTEXT[P][Q][R][S]\r\n  >(\r\n    path: [P, Q, R, S, T],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R][S][T]>;\r\n  select(\r\n    path: string | (string | number)[],\r\n    options: { includeFalsy?: boolean } = {}\r\n  ): Observable<any> {\r\n    let result: Observable<any>;\r\n    if (Array.isArray(path)) {\r\n      // Pluck does not have an overload for an array that combines strings an numbers, but the function does actually support it.\r\n      result = this.state$.pipe(pluck(...(path as any[])));\r\n    } else {\r\n      result = this.state$.pipe(pluck(path));\r\n    }\r\n    return result.pipe(\r\n      distinctUntilChanged(isEqual),\r\n      filter(\r\n        value =>\r\n          (value !== undefined && value !== null && !Number.isNaN(value)) ||\r\n          (options.includeFalsy && !value)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Observes the collection at the given `path`.\r\n   * Emits an event whenever new children are added to the collection, and/or existing children are changed.\r\n   * The collection can be either an `object` or an `array`.\r\n   * Emits an `array` of all new and changed children.\r\n   * Does not detect deletions.\r\n   *\r\n   * @param path the path of the state to observe\r\n   */\r\n  watch<\r\n    S extends keyof SubType<CONTEXT, Dictionary<any>>,\r\n    T extends CONTEXT[S]\r\n  >(\r\n    path: S | [S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    S extends keyof SubType<CONTEXT[M], Dictionary<any>>,\r\n    T extends CONTEXT[M][S]\r\n  >(\r\n    path: [M, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    S extends keyof SubType<CONTEXT[M][N], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][S]\r\n  >(\r\n    path: [M, N, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    O extends keyof CONTEXT[M][N],\r\n    S extends keyof SubType<CONTEXT[M][N][O], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][O][S]\r\n  >(\r\n    path: [M, N, O, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    O extends keyof CONTEXT[M][N],\r\n    P extends keyof CONTEXT[M][N][O],\r\n    S extends keyof SubType<CONTEXT[M][N][O][P], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][O][P][S]\r\n  >(\r\n    path: [M, N, O, P, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch(path: any, options: { includeFalsy?: boolean } = {}): Observable<any> {\r\n    return this.select(path, options).pipe(\r\n      map(state => (Array.isArray(state) ? state : Object.values(state ?? {}))),\r\n      pairwise(),\r\n      map(([old, current]) =>\r\n        old ? differenceWith(current, old, isEqual) : current\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the complete state\r\n   */\r\n  get state(): Observable<CONTEXT> {\r\n    return this.state$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns the current state\r\n   */\r\n  get value(): CONTEXT {\r\n    return this.state$.getValue();\r\n  }\r\n\r\n  /**\r\n   * Dispatch an operation that manipulates the state\r\n   * @param action The operation to dispatch\r\n   */\r\n  protected dispatch(action: ACTION | ResetAction): void {\r\n    this.actions$.next(action);\r\n  }\r\n\r\n  /**\r\n   * Apply the given action to the given state, resulting in a new state object that reflects the result of the operation.\r\n   * @param state the current state\r\n   * @param action the operation to apply\r\n   */\r\n  private reducer() {\r\n    return scan((state: CONTEXT, action: ACTION | ResetAction) => {\r\n      const next = this.reduceAction(state, action);\r\n      if (!AbstractStore.production) {\r\n        // Construct a debug message representing the current action\r\n        const logMessage = action.description\r\n          ? `${action.type}: ${action.description}`\r\n          : action.type;\r\n\r\n        // Log the debug message to the console\r\n        this.logger.debug(logMessage);\r\n\r\n        // If the user has Redux devtools enabled, also log the action there\r\n        if (win.devTools) {\r\n          win.devTools.send(`[${this.name}] ${logMessage}`, next);\r\n        }\r\n      }\r\n      return next;\r\n    }, this.state$.value);\r\n  }\r\n\r\n  private reduceAction(\r\n    state: CONTEXT,\r\n    action: Action<CONTEXT> | ResetAction\r\n  ): CONTEXT {\r\n    const rootReducer = this.rootReducers[action.type];\r\n    return rootReducer ? (rootReducer(state, action) as CONTEXT) : state;\r\n  }\r\n\r\n  private reduceReset() {\r\n    return this.defaultState;\r\n  }\r\n}\r\n","export enum ActionType {\r\n  RESET = 'RESET',\r\n  SET = 'SET',\r\n  UPDATE = 'UPDATE',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\nexport interface SetAction<T> {\r\n  type: ActionType.SET;\r\n  description: string;\r\n  payload: T;\r\n}\r\n\r\nexport interface UpdateAction<T> {\r\n  type: ActionType.UPDATE;\r\n  description: string;\r\n  path: (string | number)[];\r\n  payload: T;\r\n}\r\n\r\nexport interface DeleteAction {\r\n  type: ActionType.DELETE;\r\n  description: string;\r\n  path: (string | number)[];\r\n}\r\n\r\nexport interface ResetAction {\r\n  type: ActionType.RESET;\r\n  description: string;\r\n}\r\n\r\n// You can extend Action by piping in additional types, e.g:\r\n// export type ExtendedAction<T> = Action<T> | MyAction<T>\r\nexport type Action<T> = SetAction<T> | UpdateAction<T> | DeleteAction | ResetAction;\r\n","import { SubType } from '@models4insight/utils';\r\nimport { clone, get, omit, setWith } from 'lodash';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { finalize, switchMapTo, tap } from 'rxjs/operators';\r\nimport { AbstractStore, AbstractStoreOptions, RootReducer } from './abstract-store';\r\nimport { Action, ActionType, DeleteAction, SetAction, UpdateAction } from './action';\r\nimport { StoreContext } from './store';\r\n\r\n/**\r\n * Returns a new instance of the given `state` which omits the entry at the given `path`.\r\n * If no `path` is given, or if the given `path` is empty, returns an empty `state`.\r\n */\r\nexport function reduceDelete<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { path }: DeleteAction\r\n): CONTEXT {\r\n  return !path || path.length === 0\r\n    ? ({} as CONTEXT)\r\n    : path.length === 1\r\n    ? (omit(state, path) as CONTEXT)\r\n    : setWith(\r\n        clone(state),\r\n        path.slice(0, path.length - 1),\r\n        omit(get(state, path.slice(0, path.length - 1)), path[path.length - 1]),\r\n        clone\r\n      );\r\n}\r\n\r\n/**\r\n * Returns a new instance of the given `payload`, replacing the given `state`.\r\n */\r\nexport function reduceSet<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { payload }: SetAction<CONTEXT>\r\n): CONTEXT {\r\n  return clone(payload);\r\n}\r\n\r\n/**\r\n * Returns a new instance of the given `state` where any entry at the given `path` has been replaced with the given `payload`.\r\n * If no `path` is given, or if the given `path` is empty, the given `payload` is assigned to the given `state`.\r\n */\r\nexport function reduceUpdate<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { path, payload }: UpdateAction<CONTEXT>\r\n): CONTEXT {\r\n  return !path || path.length === 0\r\n    ? Object.assign(state, clone(payload))\r\n    : // Make a clone of the current state and the payload to ensure the state is never modified in place\r\n      setWith(clone(state), path, payload, clone);\r\n}\r\n\r\nconst rootReducers: { [type in ActionType]?: RootReducer } = {\r\n  [ActionType.SET]: reduceSet,\r\n  [ActionType.UPDATE]: reduceUpdate,\r\n  [ActionType.DELETE]: reduceDelete\r\n};\r\n\r\nexport interface MonitorAsyncOptions {\r\n  /** Subject to push an event to when the operation finishes */\r\n  onComplete?: Subject<void>;\r\n  /**Reference to the store which defines the given indicator property */\r\n  store?: BasicStore<any>;\r\n}\r\n\r\n/**\r\n * Decorator function which wraps a reducer to switch the given property of a `BasicStore` to `true` when the reducer starts, and `false` after it has completed.\r\n *\r\n * You can use this decorator inside of a `BasicStore` without providing the `store` parameter.\r\n * When using this decorator outside of a `BasicStore`, please provide a reference to the `BasicStore` which defines the given indicator property.\r\n */\r\nexport function MonitorAsync<T extends (...args: any[]) => Promise<any>>(\r\n  /* Key or path to the property of the `BasicStore` which indicates the state of the operation */\r\n  indicatorProperty: string | string[],\r\n  /* Reference to the store which defines the given indicator property */\r\n  options?: MonitorAsyncOptions\r\n);\r\nexport function MonitorAsync<T extends (...args: any[]) => Observable<any>>(\r\n  /* Key or path to the property of the BasicStore which indicates the state of the operation */\r\n  indicatorProperty: string | string[],\r\n  options?: MonitorAsyncOptions\r\n);\r\nexport function MonitorAsync<\r\n  T extends (...args: any[]) => Promise<any> | Observable<any>\r\n>(\r\n  indicatorProperty: string | string[],\r\n  { onComplete, store }: MonitorAsyncOptions = {}\r\n) {\r\n  return function(\r\n    target: BasicStore<any>,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<T>\r\n  ) {\r\n    const original = descriptor.value;\r\n    descriptor.value = function(this: Function, ...args: any[]) {\r\n      const originalResult = original.apply(this, args);\r\n      return (store ?? target).monitorAsync.apply(this, [\r\n        originalResult,\r\n        indicatorProperty,\r\n        onComplete\r\n      ]);\r\n    } as any;\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * This is an implementation of a store supporting basic CRUD operations.\r\n */\r\nexport abstract class BasicStore<\r\n  CONTEXT extends StoreContext = {}\r\n> extends AbstractStore<CONTEXT, Action<CONTEXT>> {\r\n  constructor(options: AbstractStoreOptions<CONTEXT> = {}) {\r\n    super({\r\n      ...options,\r\n      rootReducers: { ...options.rootReducers, ...rootReducers }\r\n    });\r\n  }\r\n  /**\r\n   * Dispatch a delete operation, removing an entry in the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {String} options.path           The path of the entry to update\r\n   */\r\n  delete(options?: { description?: string; path?: [] }): void;\r\n  delete<P extends keyof CONTEXT>(options?: {\r\n    description?: string;\r\n    path?: [P];\r\n  }): void;\r\n  delete<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(options?: {\r\n    description?: string;\r\n    path?: [P, Q];\r\n  }): void;\r\n  delete<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(options?: { description?: string; path?: [P, Q, R] }): void;\r\n  delete<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(options?: { description?: string; path?: [P, Q, R, S] }): void;\r\n  delete(\r\n    options: { description?: string; path?: (string | number)[] } = {}\r\n  ): void {\r\n    this.dispatch({\r\n      type: ActionType.DELETE,\r\n      description: options.description,\r\n      path: options.path\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wraps a reducer in an asynchronous operation to switch the given indicator property to true when it starts running, and false after it has completed..\r\n   * @param {Observable<T>} operation         The operation to be run\r\n   * @param {keyof CONTEXT} indicatorProperty The key or path of the property with which to indicate the process of the operation. The given key should map to a boolean type.\r\n   */\r\n  monitorAsync<K extends keyof SubType<CONTEXT, boolean>, P, R>(\r\n    operation: Observable<R>,\r\n    indicatorProperty: K,\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    K extends keyof SubType<CONTEXT[L], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    K extends keyof SubType<CONTEXT[L][M], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    N extends keyof CONTEXT[L][M],\r\n    K extends keyof SubType<CONTEXT[L][M][N], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, N, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    N extends keyof CONTEXT[L][M],\r\n    O extends keyof CONTEXT[L][M][N],\r\n    K extends keyof SubType<CONTEXT[L][M][N][O], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, N, O, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<R>(\r\n    operation: Observable<R>,\r\n    indicatorProperty: any,\r\n    onComplete?: Subject<void>\r\n  ): Observable<R> {\r\n    if (!Array.isArray(indicatorProperty)) {\r\n      indicatorProperty = [indicatorProperty];\r\n    }\r\n    const setIndicatorState = (state: boolean) =>\r\n      this.update({\r\n        description: `Set ${indicatorProperty} to ${Boolean(state)\r\n          .toString()\r\n          .toUpperCase()}`,\r\n        path: indicatorProperty,\r\n        payload: state\r\n      } as any);\r\n\r\n    return of(1).pipe(\r\n      tap(() => setIndicatorState(true)),\r\n      switchMapTo(operation),\r\n      finalize(() => {\r\n        setIndicatorState(false);\r\n        onComplete?.next();\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Dispatch a set operation, replacing the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {any} options.payload           The new state\r\n   */\r\n  set(options: { description?: string; payload?: CONTEXT } = {}): void {\r\n    this.dispatch({\r\n      type: ActionType.SET,\r\n      description: options.description,\r\n      payload: options.payload\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dispatch an update operation, modifying the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {String} options.path           The path of the entry to update\r\n   * @param {any} options.payload           The new state\r\n   */\r\n  update(options?: {\r\n    description?: string;\r\n    path?: [];\r\n    payload?: CONTEXT;\r\n  }): void;\r\n  update<P extends keyof CONTEXT>(options?: {\r\n    description?: string;\r\n    path?: [P];\r\n    payload?: CONTEXT[P];\r\n  }): void;\r\n  update<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(options?: {\r\n    description?: string;\r\n    path?: [P, Q];\r\n    payload?: CONTEXT[P][Q];\r\n  }): void;\r\n  update<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(options?: {\r\n    description?: string;\r\n    path?: [P, Q, R];\r\n    payload?: CONTEXT[P][Q][R];\r\n  }): void;\r\n  update<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(options?: {\r\n    description?: string;\r\n    path?: [P, Q, R, S];\r\n    payload?: CONTEXT[P][Q][R][S];\r\n  }): void;\r\n  update(\r\n    options: {\r\n      description?: string;\r\n      path?: (string | number)[];\r\n      payload?: any;\r\n    } = {}\r\n  ): void {\r\n    this.dispatch({\r\n      type: ActionType.UPDATE,\r\n      description: options.description,\r\n      path: options.path,\r\n      payload: options.payload\r\n    });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ReduxConfig {\r\n  readonly production?: boolean;\r\n}\r\nexport const ReduxConfigService = new InjectionToken<\r\n  ReduxConfig\r\n>('ReduxConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { AbstractStore } from './abstract-store';\r\nimport { ReduxConfig, ReduxConfigService } from './redux-config.service';\r\n\r\n/*\r\n * Enable integration with Redux dev tools if:\r\n * - Running in dev mode, and\r\n * - The extension is available in the user's browser.\r\n */\r\nconst win = window as any;\r\n\r\nconst reduxDevToolsOptions = {\r\n  maxAge: 15,\r\n  features: {\r\n    pause: false,\r\n    lock: false,\r\n    persist: false,\r\n    jump: false,\r\n    skip: false,\r\n    reorder: false,\r\n    dispatch: false,\r\n    test: false\r\n  }\r\n};\r\n\r\n@NgModule()\r\nexport class ReduxModule {\r\n  constructor(\r\n    @Optional() @Inject(ReduxConfigService) config: ReduxConfig = {},\r\n    @Optional() @SkipSelf() parentModule: ReduxModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ReduxModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      AbstractStore.enableProductionMode();\r\n    } else if (win.__REDUX_DEVTOOLS_EXTENSION__) {\r\n      win.devTools = win.__REDUX_DEVTOOLS_EXTENSION__.connect(\r\n        reduxDevToolsOptions\r\n      );\r\n    }\r\n  }\r\n\r\n  static forRoot(config: ReduxConfig = {}): ModuleWithProviders<ReduxModule> {\r\n    return {\r\n      ngModule: ReduxModule,\r\n      providers: [\r\n        {\r\n          provide: ReduxConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { map, mergeMap, scan } from 'rxjs/operators';\r\nimport { ReduxModule } from './redux.module';\r\nimport { Store, StoreContext, StoreSnapshot } from './store';\r\n\r\n/**\r\n * This service allows stores to register themselves, enabling a snapshot which aggregates the current state of all registered stores.\r\n * Stores which should not be included in the snapshot, should not be registered.\r\n */\r\n@Injectable({\r\n  providedIn: ReduxModule\r\n})\r\nexport class StoreService {\r\n  private register$: Subject<Store<StoreContext>> = new Subject<\r\n    Store<StoreContext>\r\n  >();\r\n  private snapshot$: BehaviorSubject<StoreSnapshot> = new BehaviorSubject<\r\n    StoreSnapshot\r\n  >({});\r\n\r\n  constructor() {\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Update the current snapshot every time the state of one of the registered stores updates\r\n    this.register$\r\n      .pipe(\r\n        mergeMap(store =>\r\n          store.state.pipe(map(state => ({ [store.name]: state })))\r\n        ),\r\n        scan(\r\n          (snapshot, stateMap) => ({ ...snapshot, ...stateMap }),\r\n          this.snapshot$.value\r\n        )\r\n      )\r\n      .subscribe(this.snapshot$);\r\n  }\r\n\r\n  /** Register a store with this service */\r\n  register(store: Store<StoreContext>) {\r\n    this.register$.next(store);\r\n  }\r\n\r\n  /** Returns the current aggregated state of all registered stores */\r\n  get snapshot(): StoreSnapshot {\r\n    return this.snapshot$.getValue();\r\n  }\r\n\r\n  /** Returns an observable stream of the aggregated state of all registered stores */\r\n  get state(): Observable<StoreSnapshot> {\r\n    return this.snapshot$.asObservable();\r\n  }\r\n}\r\n","export * from './lib/check-commit-status';\r\nexport * from './lib/commit-data';\r\nexport * from './lib/commit-event-log';\r\nexport * from './lib/commit-json-model';\r\nexport * from './lib/commit-model';\r\nexport * from './lib/compare-models';\r\nexport * from './lib/create-metric-exemption';\r\nexport * from './lib/create-project';\r\nexport * from './lib/delete-branch';\r\nexport * from './lib/delete-metric-exemption';\r\nexport * from './lib/delete-project';\r\nexport * from './lib/delete-user-group';\r\nexport * from './lib/download-model';\r\nexport * from './lib/force-commit-model';\r\nexport * from './lib/get-branch';\r\nexport * from './lib/get-branches';\r\nexport * from './lib/get-branches-summary';\r\nexport * from './lib/get-metric-exemption';\r\nexport * from './lib/get-model';\r\nexport * from './lib/get-model-conflict';\r\nexport * from './lib/get-project';\r\nexport * from './lib/get-provenance';\r\nexport * from './lib/get-provenance-summary';\r\nexport * from './lib/get-user-group';\r\nexport * from './lib/get-user-groups';\r\nexport * from './lib/get-user-info';\r\nexport * from './lib/get-user-projects';\r\nexport * from './lib/get-user-role';\r\nexport * from './lib/log-clickstream-event';\r\nexport * from './lib/merge-branch';\r\nexport * from './lib/modelview-convert';\r\nexport * from './lib/monitor-status';\r\nexport * from './lib/report-error';\r\nexport * from './lib/repository-version';\r\nexport * from './lib/repository.module';\r\nexport * from './lib/types';\r\nexport * from './lib/update-branch';\r\nexport * from './lib/update-project';\r\nexport * from './lib/update-user-group';\r\nexport * from './lib/update-user-info';\r\nexport * from './lib/user-search';\r\nexport { createHttpParams } from './lib/utils';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelQuery } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API call to check the status of an asynchronous backend operation\r\n */\r\nexport function checkCommitStatus(\r\n  /** The ID of the operation assigned by the API */\r\n  taskId: string,\r\n  /** The full name of the project to which the operation is related */\r\n  projectName: string\r\n): Observable<ModelQuery> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/query`;\r\n\r\n  validateRequiredArguments(arguments, 'checkCommitStatus');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Accept', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({\r\n    taskId,\r\n    projectName\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers: headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http.authorize().get(path, requestOptions);\r\n}\r\n","export * from './check-commit-status';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commit a dataset associated with a model to the repository\r\n */\r\nexport function commitData(\r\n  /** The full name of the project to which the data should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the data should be committed */\r\n  branchName: string,\r\n  /** The actual data to be committed. Defaults to an empty array */\r\n  content: any[] = [],\r\n  /** The id of the model to which the data should be committed. Defaults to 'TRUNK' */\r\n  model_id: string = 'TRUNK'\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/data`;\r\n\r\n  validateRequiredArguments(arguments, 'commitData');\r\n\r\n  const body = {\r\n    project: projectName,\r\n    branch: branchName,\r\n    model_id: model_id,\r\n    content: content\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .post<string>(path, body, { responseType: 'text' as 'json' });\r\n}\r\n","export * from './commit-data';\r\n","import { Action, ActionType } from '@models4insight/redux';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { now } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryLogBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commit a history of redux events to the repository\r\n */\r\nexport function commitEventLog(\r\n  sessionId: string,\r\n  event: Action<any>\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryLogBasePath}/event`;\r\n\r\n  validateRequiredArguments(arguments, 'commitEventLog');\r\n\r\n  let eventPath: (string | number)[];\r\n  if (event.type === ActionType.UPDATE || event.type === ActionType.DELETE) {\r\n    eventPath = event.path;\r\n  }\r\n\r\n  const body = {\r\n    sessionId,\r\n    event: {\r\n      description: event.description,\r\n      path: eventPath,\r\n      timestamp: now(),\r\n      type: event.type\r\n    }\r\n  };\r\n\r\n  return http.post<void>(path, body);\r\n}\r\n","export * from './commit-event-log';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelCommit } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface CommitJsonOptions {\r\n  /** The parser that should be used to interpret the file */\r\n  readonly parserName?: 'archimate3';\r\n  /** The ID of the module to which the model should be committed */\r\n  readonly module?: string;\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n}\r\n\r\n/**\r\n * Commits a model to the repository as a JSON string\r\n */\r\nexport function commitJsonModel(\r\n  /** The full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the model should be committed */\r\n  toBranchName: string,\r\n  /** The JSON string representing the model */\r\n  json: string,\r\n  /** The username of the user committing the model */\r\n  userid: string,\r\n  /** Optional parameters for the commit operation */\r\n  {\r\n    parserName = 'archimate3',\r\n    module = '',\r\n    comment = ''\r\n  }: CommitJsonOptions = {}\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/commitJson`;\r\n\r\n  validateRequiredArguments(arguments, 'commitJsonModel');\r\n\r\n  const body = {\r\n    projectName: projectName,\r\n    branch: toBranchName,\r\n    userid: userid,\r\n    type: parserName,\r\n    comment: comment,\r\n    raw: json\r\n  };\r\n\r\n  return http.authorize().post<ModelCommit>(path, body);\r\n}\r\n","export * from './commit-json-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelCommit, ModelCommitContentTypeEnum } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface CommitModelOptions {\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n  /** The content type of the file */\r\n  readonly contentType?: ModelCommitContentTypeEnum;\r\n  /** Whether or not to create new ids for new concepts, or use the ids already present */\r\n  readonly keepOriginalIds?: boolean;\r\n  /** The parser that should be used to interpret the file */\r\n  readonly parserName?: 'archimate3';\r\n  /** The ID of the module to which the model should be committed */\r\n  readonly module?: string;\r\n  /** The ID of the model that should be overwritten */\r\n  readonly modelId?: string;\r\n}\r\n\r\n/**\r\n * Commits a model to the repository as a File\r\n */\r\nexport function commitModel(\r\n  /** The full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the model should be committed */\r\n  toBranchName: string,\r\n  /** The file containing the model */\r\n  file: File,\r\n  /** The username of the user committing the model */\r\n  userid: string,\r\n  /** Optional parameters for the commit operation */\r\n  {\r\n    keepOriginalIds = false,\r\n    parserName = 'archimate3',\r\n    module = '',\r\n    modelId = 'TRUNK',\r\n    comment = '',\r\n    contentType = ModelCommitContentTypeEnum.ARCHIMATE\r\n  }: CommitModelOptions = {}\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/commit`;\r\n\r\n  validateRequiredArguments(arguments, 'commitModel');\r\n\r\n  const formParams = new FormData();\r\n\r\n  formParams.append('parserName', parserName);\r\n  formParams.append('projectName', projectName);\r\n  formParams.append('toBranchName', toBranchName);\r\n  formParams.append('module', module);\r\n  formParams.append('modelId', modelId);\r\n  formParams.append('userid', userid);\r\n  formParams.append('comment', comment);\r\n  formParams.append('contentType', contentType);\r\n  formParams.append('keepOriginalIds', Boolean(keepOriginalIds).toString());\r\n  formParams.append('file', file, file.name);\r\n\r\n  return http.authorize().post<ModelCommit>(path, formParams);\r\n}\r\n","export * from './commit-model';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { modelCompareBasePath } from '../constants';\r\nimport { GetOptions, ModelCompareResult } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface CompareModelsOptions {\r\n  /** Specify the version of the base model to compare a specific version. If omitted, compare the latest version of the base branch. */\r\n  baseVersion?: number;\r\n  /** Specify the version of the other model to compare a specific version. If omitted, compare the latest version of the other branch. */\r\n  otherVersion?: number;\r\n}\r\n\r\nexport function compareModels(\r\n  project: string,\r\n  baseBranchName: string,\r\n  otherBranchName: string,\r\n  {\r\n    baseVersion,\r\n    forceUpdate,\r\n    otherVersion\r\n  }: CompareModelsOptions & GetOptions = {}\r\n): Observable<ModelCompareResult> {\r\n  const http = getHttpClient(),\r\n    path = modelCompareBasePath;\r\n\r\n  validateRequiredArguments(arguments, 'compareModels');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project,\r\n    baseBranch: baseBranchName,\r\n    baseVersion,\r\n    otherBranch: otherBranchName,\r\n    otherVersion\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelCompareResult>(path, requestOptions);\r\n}\r\n","export * from './compare-models';\r\n","export const modelCompareBasePath = 'compare';\r\nexport const modelviewBasePath = 'modelview/api';\r\nexport const repositoryBasePath = 'repository'\r\nexport const repositoryApiBasePath = `${repositoryBasePath}/api`;\r\nexport const repositoryLogBasePath = `${repositoryBasePath}/log`\r\nexport const userSearchBasePath = 'users';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { MetricExemption } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commits the given metric exemption to the database\r\n */\r\nexport function createMetricExemption(\r\n  /** The metric exemption that should be committed */\r\n  exemption: MetricExemption\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt`;\r\n\r\n  validateRequiredArguments(arguments, 'createMetricExemption');\r\n\r\n  const params = createHttpParams(exemption);\r\n\r\n  return http.authorize().post<MetricExemption>(path, params);\r\n}\r\n","export * from './create-metric-exemption';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { PermissionLevel, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/** Adds default permissions, committer information and a default update message to the given project */\r\nexport function initializeProject(\r\n  /** The data object representing the project */\r\n  project: Project,\r\n  /** The username of the user to whom the project belongs */\r\n  username: string,\r\n  /** The email address of the user to whom the project belongs */\r\n  email: string\r\n): Project {\r\n  return {\r\n    ...project,\r\n    permissions: {\r\n      [username]: PermissionLevel.OWNER\r\n    },\r\n    last_update_message: 'project creation',\r\n    committer: {\r\n      username,\r\n      email\r\n    }\r\n  };\r\n}\r\n\r\n/** Create a project with some default values */\r\nexport function createProject(\r\n  /** The data object representing the project */\r\n  project: Project,\r\n  /** The username of the user to whom the project belongs */\r\n  username: string,\r\n  /** The email address of the user to whom the project belongs */\r\n  email: string\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project`;\r\n\r\n  validateRequiredArguments(arguments, 'createProject');\r\n\r\n  const initializedProject: Project = initializeProject(\r\n    project,\r\n    username,\r\n    email\r\n  );\r\n\r\n  return http.authorize().post<Project>(path, initializedProject);\r\n}\r\n","export * from './create-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Deletes the branch with the given `projectId` and `branchId` from the repository.\r\n * Branches are not actually deleted, but have their `enabled` property set to `false` in the database.\r\n */\r\nexport function deleteBranch(\r\n  /** The id of the project for which a branch should be deleted */\r\n  projectId: string,\r\n  /** The id of the branch which should be deleted */\r\n  branchId: string\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteBranch');\r\n\r\n  const requestParameters = createHttpParams({\r\n    project_id: projectId,\r\n    branch_id: branchId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: requestParameters,\r\n    responseType: 'text' as 'text'\r\n  };\r\n\r\n  return http.authorize().delete(path, requestOptions);\r\n}\r\n","export * from './delete-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Delete an exemption from the database which:\r\n * - Belongs to the metric with the given name and project with the given id, and\r\n * - Has the given exemption id\r\n */\r\nexport function deleteMetricExemption(\r\n  /** The id of the project to which the exemption belongs */\r\n  projectId: string,\r\n  /** The id of the exemption */\r\n  exemptionId: string\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt/${projectId}/${exemptionId}`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteMetricExemption');\r\n\r\n  return http.authorize().delete(path);\r\n}\r\n","export * from './delete-metric-exemption';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to delete a specific project and all associated models\r\n */\r\nexport function deleteProject(\r\n  /** The ID of the project to delete */\r\n  projectId: string\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'deleteProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http.authorize().delete(path);\r\n}\r\n","export * from './delete-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Deletes the `UserGroup` with the given `projectId` and `userGroupId` from the repository.\r\n */\r\nexport function deleteUserGroup(\r\n  projectId: string,\r\n  userGroupId: string\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteUserGroup');\r\n\r\n  const requestParameters = createHttpParams({\r\n    project_id: projectId,\r\n    group_id: userGroupId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: requestParameters,\r\n    responseType: 'text' as 'text'\r\n  };\r\n\r\n  return http.authorize().delete(path, requestOptions);\r\n}\r\n","export * from './delete-user-group';\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver';\r\nimport { map } from 'rxjs/operators';\r\nimport { getModel } from '../get-model';\r\nimport { GetOptions, ModelCommitContentTypeEnum } from '../types';\r\n\r\nexport interface DownloadModelOptions {\r\n  /** The format in which the model should be retrieved */\r\n  contentType?: ModelCommitContentTypeEnum;\r\n  /** The ID of the model which to retrieve */\r\n  modelId?: string;\r\n  /** The ID of the module which to retrieve */\r\n  module?: string;\r\n  /** The name of the parser to use */\r\n  parserName?: 'archimate3';\r\n}\r\n\r\nexport const defaultDownloadModelOptions: DownloadModelOptions = {\r\n  contentType: ModelCommitContentTypeEnum.ARCHIMATE,\r\n  module: '',\r\n  modelId: 'TRUNK',\r\n  parserName: 'archimate3'\r\n};\r\n\r\nfunction findFileName(response: HttpResponse<any>) {\r\n  const contentDisposition = response.headers.get('content-disposition') || '';\r\n  const matches = /filename=([^;]+)/gi.exec(contentDisposition);\r\n  return (matches[1] || '').trim();\r\n}\r\n\r\n/**\r\n * Download a version of a model from the given project and branch in a particular format\r\n */\r\nexport function downloadModel(\r\n  /** The full name of the project from which to retrieve the model */\r\n  fullProjectName: string,\r\n  /** The name of the branch from which to retrieve the model */\r\n  branch: string,\r\n  /** The username of the user downloading the model */\r\n  userid: string,\r\n  /** */\r\n  version?: number,\r\n  /** Additional parameters for the download model operation */\r\n  options: DownloadModelOptions & GetOptions = defaultDownloadModelOptions\r\n) {\r\n  const { contentType, forceUpdate, modelId, module, parserName } = {\r\n    ...defaultDownloadModelOptions,\r\n    ...options\r\n  };\r\n\r\n  return getModel(\r\n    parserName,\r\n    fullProjectName,\r\n    branch,\r\n    module,\r\n    modelId,\r\n    userid,\r\n    contentType,\r\n    { forceUpdate, observe: 'response', responseType: 'text', version }\r\n  ).pipe(\r\n    map((response: HttpResponse<string>) => {\r\n      saveAs(\r\n        new Blob([response.body], {\r\n          type: contentType === 'json' ? 'application/json' : 'text/xml'\r\n        }),\r\n        findFileName(response)\r\n      );\r\n    })\r\n  );\r\n}\r\n","export * from './download-model';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ConflictResolutionTemplateEnum, ModelCommit } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Forcibly commit a model to the repository, resolving any conflicts\r\n */\r\nexport function forceCommitModel(\r\n  /** Name of the parser used for interpreting the added file */\r\n  parserName: string,\r\n  /** Full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the source branch */\r\n  fromBranchName: string,\r\n  /** ID of the module to which the model should be committed */\r\n  module: string,\r\n  /** The ID of the model that should be forcibly committed */\r\n  fromModelId: string,\r\n  /** The name of the target branch */\r\n  toBranchName: string,\r\n  /** The ID of the model that should be overwritten */\r\n  toModelId: string,\r\n  /** The username of the user that is triggering the commit */\r\n  userid: string,\r\n  /** The comment provided by the user */\r\n  comment: string,\r\n  /** The data format in which the model was provided */\r\n  contentType: string,\r\n  /** The original task ID as provided by the API */\r\n  commitTaskId: string,\r\n  /** The conflict resolution template to apply */\r\n  template: ConflictResolutionTemplateEnum,\r\n  /** A list of IDs representing which items to keep from the repository version of the model */\r\n  addListLeft: string[] = [],\r\n  /** A list of IDs representing which items to keep from the uploaded version of the model */\r\n  addListRight: string[] = [],\r\n  /** A list of IDs representing which items to discard from the repository version of the model */\r\n  deleteListLeft: string[] = [],\r\n  /** A list of IDs representing which items to discard from the uploaded version of the model */\r\n  deleteListRight: string[] = []\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/force`;\r\n\r\n  let headers = new HttpHeaders();\r\n\r\n  validateRequiredArguments(arguments, 'forceCommitModel');\r\n\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const formParams = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    fromBranchName,\r\n    module,\r\n    fromModelId,\r\n    toBranchName,\r\n    toModelId,\r\n    userid,\r\n    comment,\r\n    contentType,\r\n    template,\r\n    addListLeft,\r\n    addListRight,\r\n    deleteListLeft,\r\n    deleteListRight,\r\n    commitTaskId\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http.authorize().post<ModelCommit>(path, formParams, requestOptions);\r\n}\r\n","export * from './force-commit-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch, GetOptions, Project } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the `Branch` with the given `branchId` for the project with the given `projectId`\r\n */\r\nexport function getBranch(\r\n  /** The id of the project for which to retrieve the branch */\r\n  projectId: Project['id'],\r\n  /** The id of the branch to retrieve */\r\n  branchId: Branch['id'],\r\n  /** Additional parameters for the getBranch operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Branch> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranch');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId,\r\n    branch_id: branchId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Branch>(path, requestOptions);\r\n}\r\n","export * from './get-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { BranchSummary, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetBranchesSummaryOptions {\r\n  /** The number of summaries to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index of the summary to start the page at */\r\n  readonly offset?: number;\r\n  /** Select only the branches whose name includes this string */\r\n  readonly queryString?: string;\r\n  /** Select only the branches whose name matches this string */\r\n  readonly branchName?: string;\r\n  /** Select only the most recent updates for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Select only the branch updates after this timestamp */\r\n  readonly from?: number;\r\n  /** Select only the branch updates before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API call to retrieve a paged summary of all branches in the project\r\n */\r\nexport function getBranchesSummary(\r\n  /** The full name of the project for which to retrieve the branch summary */\r\n  projectName: string,\r\n  /** Additional query parameters */\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetBranchesSummaryOptions & GetOptions = {}\r\n): Observable<BranchSummary[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranchesSummary');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<BranchSummary[]>(path, requestOptions);\r\n}\r\n","export * from './get-branches-summary';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch, GetOptions, Project } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves all `Branch` for the project with the given `projectId`\r\n */\r\nexport function getBranches(\r\n  /** The id of the project for which to retrieve the branches */\r\n  projectId: Project['id'],\r\n  /** Additional parameters for the getBranches operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Branch[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranches');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Branch[]>(path, requestOptions);\r\n}\r\n","export * from './get-branches';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, MetricExemption } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n\r\nexport interface GetMetricExemptionOptions {\r\n  /** You can specify the branch id if you only want the exemptions for a particular branch */\r\n  branchId?: string;\r\n  /** You can specify a metric name if you want to limit the exemptions to the metric with that name */\r\n  metricName?: string;\r\n  /** You can specify the version timestamp if you only want the exemptions for a particular version */\r\n  version?: number;\r\n}\r\n\r\n/**\r\n * Retrieves all `MetricExemption` for the project with the given `projectId`.\r\n * You can optionally supply a branch id, metric name and version timestamp to limit the results.\r\n */\r\nexport function getMetricExemption(\r\n  /** The id of the project for which to retrieve the exemptions */\r\n  projectId: string,\r\n  /** Additional options for the getMetricExemption operation */\r\n  {\r\n    branchId,\r\n    forceUpdate,\r\n    metricName,\r\n    version\r\n  }: GetOptions & GetMetricExemptionOptions = {}\r\n): Observable<MetricExemption[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt`;\r\n\r\n  validateRequiredArguments(arguments, 'getMetricExemption');\r\n\r\n  const params = createHttpParams({\r\n    project_id: projectId,\r\n    branch: branchId,\r\n    metric: metricName,\r\n    version\r\n  });\r\n\r\n  return http\r\n    .cache(forceUpdate)\r\n    .authorize()\r\n    .get<MetricExemption[]>(path, { params });\r\n}\r\n","export * from './get-metric-exemption';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelQuery } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieve the details for a conflict or a set of conflicts\r\n */\r\nexport function getModelConflict(\r\n  /** The ID of the operation that resulted in the conflicts */\r\n  taskId: string,\r\n  /** The full name of the project to which the conflicts belong */\r\n  projectName: string,\r\n  /** The inclusive index at which to start the page */\r\n  index: number,\r\n  /** The length of the page */\r\n  limit: number\r\n): Observable<ModelQuery> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/conflict`;\r\n\r\n  validateRequiredArguments(arguments, 'getModelConflict');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Accept', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({\r\n    taskId,\r\n    projectName,\r\n    index,\r\n    limit\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache()\r\n    .get<ModelQuery>(path, requestOptions);\r\n}\r\n","export * from './get-model-conflict';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface RetrieveModelOptions {\r\n  observe?: any;\r\n  responseType?: any;\r\n  /** The timestamp at which the model that should be retrieved was originally committed */\r\n  version?: number;\r\n}\r\n\r\n/**\r\n * Retrieve a version of a model from the given project and branch in a particular format. If no version is given, retrieves the latest version.\r\n */\r\nexport function getModel(\r\n  /** Name of the parser used for interpreting the added file */\r\n  parserName: string,\r\n  /** The full name of the project from which to retrieve the model */\r\n  projectName: string,\r\n  /** The name of the branch from which to retrieve the model */\r\n  branchName: string,\r\n  /** The ID of the module which to retrieve */\r\n  module: string,\r\n  /** The ID of the model which to retrieve */\r\n  modelId: string,\r\n  /** The username of the user retrieving the model */\r\n  userid: string,\r\n  /** The format in which to retrieve the model */\r\n  contentType: string,\r\n  /** Additional parameters for the retrieve operation */\r\n  {\r\n    forceUpdate,\r\n    observe,\r\n    responseType,\r\n    version\r\n  }: RetrieveModelOptions & GetOptions = {}\r\n): Observable<any> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/retrieve`;\r\n\r\n  validateRequiredArguments(arguments, 'getModel');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const queryParameters = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    branchName,\r\n    module,\r\n    modelId,\r\n    userid,\r\n    version,\r\n    contentType\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters,\r\n    observe,\r\n    responseType: responseType || (contentType === 'json' ? 'json' : 'text')\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get(path, requestOptions);\r\n}\r\n","export * from './get-model';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve details about a specific project with the given projectId\r\n */\r\nexport function getProject(\r\n  /** The ID of the project for which to retrieve the details */\r\n  projectId: string,\r\n  /** Optional parameters for the get project operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Project> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Project>(path);\r\n}\r\n","export * from './get-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, ModelProvenanceSummary } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetProvenanceSummaryOptions {\r\n  /** The number of provenance items to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index at which to start the page */\r\n  readonly offset?: number;\r\n  /** The provenance item should include this string */\r\n  readonly queryString?: string;\r\n  /** The branch for the provenance item should match this name */\r\n  readonly branchName?: string;\r\n  /** Only include the latest provenance items for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Only include provenance items from after this timestamp */\r\n  readonly from?: number;\r\n  /** Only include provenance items from before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API request to retrieve a paged set of provenance summaries for the given project\r\n */\r\nexport function getProvenanceSummary(\r\n  /** The full name of the project for which to retrieve the provenance */\r\n  projectName: string,\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetProvenanceSummaryOptions & GetOptions = {}\r\n): Observable<ModelProvenanceSummary[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/provenance/hour`;\r\n\r\n  validateRequiredArguments(arguments, 'getProvenanceSummary');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelProvenanceSummary[]>(path, requestOptions);\r\n}\r\n","export * from './get-provenance-summary';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, ModelProvenance } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetProvenanceOptions {\r\n  /** The number of provenance items to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index at which to start the page */\r\n  readonly offset?: number;\r\n  /** The provenance item should include this string */\r\n  readonly queryString?: string;\r\n  /** The branch for the provenance item should match this name */\r\n  readonly branchName?: string;\r\n  /** Only include the latest provenance items for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Only include provenance items from after this timestamp */\r\n  readonly from?: number;\r\n  /** Only include provenance items from before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API request for a paged set of provenance items for the given project\r\n */\r\nexport function getProvenance(\r\n  /** The full name of the project for which to retrieve the provenance */\r\n  projectName: string,\r\n  /** Additional query parameters */\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetProvenanceOptions & GetOptions = {}\r\n): Observable<ModelProvenance[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/provenance`;\r\n\r\n  validateRequiredArguments(arguments, 'getProvenance');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelProvenance[]>(path, requestOptions);\r\n}\r\n","export * from './get-provenance';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project, UserGroup } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the `UserGroup` with the given `userGroupId` for the project with the given `projectId`\r\n */\r\nexport function getUserGroup(\r\n  /** The id of the project for which to retrieve the user group */\r\n  projectId: Project['id'],\r\n  /** The id of the user group to retrieve */\r\n  userGroupId: UserGroup['id'],\r\n  /** Additional parameters for the getUserGroup operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserGroup> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'getUserGroup');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId,\r\n    group_id: userGroupId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserGroup>(path, requestOptions);\r\n}\r\n","export * from './get-user-group';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project, UserGroup } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves all `UserGroup` for the project with the given `projectId`\r\n */\r\nexport function getUserGroups(\r\n  /** The id of the project for which to retrieve the user groups */\r\n  projectId: Project['id'],\r\n  /** Additional parameters for the getUserGroups operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserGroup[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'getUserGroups');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserGroup[]>(path, requestOptions);\r\n}\r\n","export * from './get-user-groups';\r\n","import { GetOptions, UserInfo } from '../types';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve the user info for the current user.\r\n * The API interprets the Bearer token in the request header to determine which user info to return.\r\n */\r\nexport function getUserInfo({ forceUpdate }: GetOptions = {}): Observable<\r\n  UserInfo\r\n> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/user`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserInfo>(path);\r\n}\r\n","export * from './get-user-info';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieve a list of projects the given user owns or has permission to access\r\n */\r\nexport function getUserProjects(\r\n  /** The username of the user for whom to retrieve the projects */\r\n  userId: string,\r\n  /** Optional parameters for the get user projects operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Project[]> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getUserProjects');\r\n\r\n  const path = `${repositoryApiBasePath}/project/user/${userId}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Project[]>(path);\r\n}\r\n","export * from './get-user-projects';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, UserRole } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve the role of the current user in the given project.\r\n * The identity of the user is derived from the bearer token\r\n */\r\nexport function getUserRole(\r\n  /** The full name of the project for which to look up the role */\r\n  projectName: string,\r\n  /** Additional parameters for the get user role operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserRole> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getUserRole');\r\n\r\n  const path = `${repositoryApiBasePath}/auth/role/${projectName}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserRole>(path);\r\n}\r\n","export * from './get-user-role';\r\n","export * from './log-clickstream-event';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface ClickstreamEvent {\r\n  /** The name of the application */\r\n  readonly app: string;\r\n  /** The epoch time at which the event occurred */\r\n  readonly timestamp: number;\r\n  /** The path in the application that the user visited */\r\n  readonly url: string;\r\n  /** The username of the user */\r\n  readonly userid: string;\r\n}\r\n\r\n/**\r\n * Saves the given clickstream event to the database\r\n */\r\nexport function logClickstreamEvent(\r\n  /** The event that should be saved to the database */\r\n  event: ClickstreamEvent\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/log`;\r\n\r\n  validateRequiredArguments(arguments, 'logClickstreamEvent');\r\n\r\n  return http.authorize().post<void>(path, event);\r\n}\r\n","export * from './merge-branch';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { BranchCommit } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface MergeBranchOptions {\r\n  /** The name of the parser to use */\r\n  readonly parserName?: 'archimate3';\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n}\r\n\r\n/**\r\n * Makes an API call to move a branch to another branch. Has convenient default values for the optionals.\r\n */\r\nexport function mergeBranch(\r\n  /** The full name of the project */\r\n  projectName: string,\r\n  /** The name of the source branch */\r\n  fromBranch: string,\r\n  /** The name of the target branch */\r\n  toBranch: string,\r\n  /** The username of the user making the merge */\r\n  userid: string,\r\n  /** Additional parameters for the merge branch operation */\r\n  { parserName = 'archimate3', comment = '' }: MergeBranchOptions = {}\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'mergeBranch');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const formParams = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    fromBranch,\r\n    toBranch,\r\n    userid,\r\n    comment\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .post<BranchCommit>(path, formParams.toString(), requestOptions);\r\n}\r\n","export * from './modelview-convert';\r\n","import { b64toBlob, b64urlToB64, validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { modelviewBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport function modelviewConvert(\r\n  svg: string,\r\n  width: number,\r\n  height: number\r\n): Observable<Blob> {\r\n  const http = getHttpClient(),\r\n    path = `${modelviewBasePath}/convert`;\r\n\r\n  validateRequiredArguments(arguments, 'modelviewConvert');\r\n\r\n  const formParams = createHttpParams({\r\n    svg,\r\n    width,\r\n    height\r\n  });\r\n\r\n  return http\r\n    .authorize()\r\n    .post(path, formParams, { responseType: 'text' })\r\n    .pipe(map(response => b64toBlob(b64urlToB64(response))));\r\n}\r\n","export * from './monitor-status';\r\n","import { retryBackoff } from 'backoff-rxjs';\r\nimport { of, throwError } from 'rxjs';\r\nimport { concatMap, switchMap } from 'rxjs/operators';\r\nimport { ModelQuery, ModelQueryDifResultStateEnum, ModelQueryStateEnum } from '../types';\r\nimport { checkCommitStatus } from '../check-commit-status';\r\n\r\nexport interface MonitorStatusOptions {\r\n  /** The maximum numer of times to check the status before timing out. Defaults to 30 */\r\n  readonly retryCount?: number;\r\n  /** The maximum time interval at which to check the status in milliseconds. Defaults to 30 seconds */\r\n  readonly retryIntervalMax?: number;\r\n  /** The minimum time interval at which to check the status in milliseconds. Defaults to 1 second */\r\n  readonly retryIntervalMin?: number;\r\n}\r\n\r\nexport const defaultMonitorStatusOptions: MonitorStatusOptions = {\r\n  retryCount: 30,\r\n  retryIntervalMax: 30000,\r\n  retryIntervalMin: 1000\r\n};\r\n\r\nexport function monitorStatus(\r\n  /** The full name of the project to which the task relates */\r\n  fullProjectName: string,\r\n  /** The ID of the task for which to check the status */\r\n  taskId: string,\r\n  /** Additional parameters for the monitor status operation */\r\n  options: MonitorStatusOptions = defaultMonitorStatusOptions\r\n) {\r\n  const { retryCount, retryIntervalMax, retryIntervalMin } = {\r\n    ...defaultMonitorStatusOptions,\r\n    ...options\r\n  };\r\n\r\n  return of(1).pipe(\r\n    // Retrieve the current operation state from the API\r\n    switchMap(() =>\r\n      checkCommitStatus(taskId, fullProjectName)\r\n    ),\r\n    // Throws a timeout error if the state of the operation is not and end state\r\n    switchMap((status: ModelQuery) =>\r\n      status.state === ModelQueryStateEnum.COMPLETED ||\r\n      status.state === ModelQueryStateEnum.FAILURE\r\n        ? of(status)\r\n        : throwError('The processing timed out!')\r\n    ),\r\n    // Retries the status check and doubles the interval every time\r\n    // This ensures the operation does not actually time out until the max retries are reached\r\n    retryBackoff({\r\n      initialInterval: retryIntervalMin,\r\n      maxInterval: retryIntervalMax,\r\n      maxRetries: retryCount\r\n    }),\r\n    // If the end state was a failure of some sorts, throw an error\r\n    concatMap((status: ModelQuery) =>\r\n      status.state === ModelQueryStateEnum.FAILURE ||\r\n      status.difResult.state === ModelQueryDifResultStateEnum.FAILURE\r\n        ? throwError('Something went wrong while processing the model!')\r\n        : of(status)\r\n    )\r\n  );\r\n}\r\n","export * from './report-error';\r\n","import { StoreSnapshot } from '@models4insight/redux';\r\nimport { circularReplacer, validateRequiredArguments } from '@models4insight/utils';\r\nimport { omit } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ErrorContext } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/** Make an API call to report an error */\r\nexport function reportError(\r\n  /** The name of the app from which the error is reported */\r\n  appName: string,\r\n  /** The version of the app from which the error is reported */\r\n  appVersion: string,\r\n  /** The error as thrown */\r\n  error: Error,\r\n  /** The username of the user reporting the error */\r\n  userid: string,\r\n  /** A snapshot of the current application state */\r\n  state?: StoreSnapshot\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/error`;\r\n\r\n  validateRequiredArguments(arguments, 'reportError');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  const body: ErrorContext = {\r\n    app: appName,\r\n    error: error,\r\n    userid: userid,\r\n    state: state,\r\n    version: appVersion\r\n  };\r\n\r\n  const requestOptions = { headers };\r\n\r\n  // Sometimes the state cannot be serialized. In this case, omit the state from the payload.\r\n  let payload: string;\r\n  try {\r\n    payload = JSON.stringify(body, circularReplacer());\r\n  } catch {\r\n    payload = JSON.stringify(omit(body, 'state'), circularReplacer());\r\n  }\r\n\r\n  return http.authorize().post<void>(path, payload, requestOptions);\r\n}\r\n","export * from './repository-version';\r\n","import { repositoryLogBasePath } from '../constants';\r\nimport { GetOptions, RepositoryVersion } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the version string of the repository this application is currently connected to.\r\n * If the version string is unavailable for whatever reason, returns `unknown` instead.\r\n */\r\nexport function repositoryVersion({ forceUpdate }: GetOptions = {}) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryLogBasePath}/version`;\r\n\r\n  return http.cache(forceUpdate).get<RepositoryVersion>(path);\r\n}\r\n","import { Injector, NgModule } from '@angular/core';\n\n@NgModule()\nexport class RepositoryModule {\n  static injector: Injector;\n\n  constructor(injector: Injector) {\n    RepositoryModule.injector = injector;\n  }\n}\n","import { StoreSnapshot } from '@models4insight/redux';\r\n\r\nexport type ModelCompareDifferenceType = 'added' |  'changed' | 'removed' | 'unchanged'\r\n\r\nexport interface ModelCompareDifference {\r\n  readonly id: string,\r\n  readonly difference: ModelCompareDifferenceType\r\n}\r\n\r\nexport interface ModelCompareResult {\r\n  readonly model: any,\r\n  readonly differences: ModelCompareDifference[]\r\n}\r\n\r\n/**\r\n * Represents repository version information\r\n */\r\nexport interface RepositoryVersion {\r\n  /** The shortened git commit hash of the current repository version */\r\n  readonly abbrev: string;\r\n  /** The git branch name of the current repository version */\r\n  readonly branch: string;\r\n  /** The time at which the current version was built */\r\n  readonly build_time: string;\r\n  /** The full version string of the current repository version consisting of the release number and the git commit hash, delimited by a `#` sign */\r\n  readonly version: string;\r\n}\r\n\r\n/**\r\n * Represents a specific concept that is exempt from a particular metric.\r\n */\r\nexport interface MetricExemption {\r\n  /** The id of the exempt concept */\r\n  readonly concept_id: string;\r\n  /** The name of the metric from which the concept is exempt */\r\n  readonly metric: string;\r\n  /** The id of the project to which the concept belongs */\r\n  readonly project_id: string;\r\n  /** Specify the branch id if the exemption should only apply to a specific branch */\r\n  readonly branch?: string;\r\n  /** A description of why the concept is exempt */\r\n  readonly comment?: string;\r\n  /** The id of the metric exemption. Is set by the database */\r\n  readonly id?: string;\r\n  /** Specify the version timestamp if the exemption should only apply to a specific model version */\r\n  readonly version?: number;\r\n}\r\n\r\n/**\r\n * Generic application permission levels.\r\n * Permissions form a hierarchy. The higher the number, the lower the permission level.\r\n * Permissions from lower levels apply to higher levels as well.\r\n */\r\nexport enum PermissionLevel {\r\n  /** No permission required */\r\n  UNRESTRICTED = -1,\r\n  /** Can perform delete actions and assign other owners */\r\n  OWNER = 0,\r\n  /** Can alter properties and settings including access control */\r\n  MAINTAINER = 1,\r\n  /** Can commit changes to the model */\r\n  CONTRIBUTOR = 2,\r\n  /** Can retrieve models in Archi format */\r\n  MODEL_USER = 3,\r\n  /** Can use the model explorer and business dashboards */\r\n  BUSINESS_USER = 4\r\n}\r\n\r\n/** Additional permission levels for use with branch access control */\r\nexport enum BranchPermission {}\r\n\r\n/** Additional permission levels for use with project access control */\r\nexport enum ProjectPermission {}\r\n\r\n/** Permission levels for use with branch access control */\r\nexport type BranchPermissionLevel = PermissionLevel | BranchPermission;\r\n\r\n/** Permission levels for use with project access control */\r\nexport type ProjectPermissionLevel = PermissionLevel | ProjectPermission;\r\n\r\nexport interface GetOptions {\r\n  /** Whether or not to refresh the cache */\r\n  readonly forceUpdate?: boolean;\r\n}\r\n\r\nexport interface UserGroup {\r\n  readonly id?: string;\r\n  readonly project_id?: string;\r\n  readonly name: string;\r\n  readonly description: string;\r\n  readonly members: string[];\r\n}\r\n\r\nexport interface BranchMembers {\r\n  [username: string]: BranchPermissionLevel;\r\n}\r\n\r\nexport interface Branch {\r\n  readonly id?: string;\r\n  readonly description: string;\r\n  readonly name: string;\r\n  readonly project_id?: string;\r\n  readonly protected?: boolean;\r\n  readonly members: BranchMembers;\r\n}\r\n\r\n/**\r\n * Returned by the API for traceability of a branch move\r\n */\r\nexport interface BranchCommit {\r\n  /** The name of the parser used for the operation */\r\n  parserName: string;\r\n  /** The full name of the project this operation relates to */\r\n  projectName: string;\r\n  /** The name of the source branch*/\r\n  branchName: string;\r\n  /** The comment supplied by the user for this operation */\r\n  comment: string;\r\n  /** The time at which this operation started */\r\n  version: string;\r\n  /** The username of the user who started this operation */\r\n  userid: string;\r\n  /** The ID of the operation assigned by the API */\r\n  taskId: string;\r\n  /** The name of the target branch */\r\n  toBranch: string;\r\n  /** The ID of the module this operation relates to */\r\n  module?: string;\r\n}\r\n\r\n/**\r\n * Provides a summary of a branch for display in the UI\r\n */\r\nexport interface BranchSummary {\r\n  /** The name of the branch */\r\n  _id: string;\r\n  /** The number of model versions in this branch */\r\n  cnt: number;\r\n  /** The timestamp at which this branch was created */\r\n  min_start_date: { $numberLong: number };\r\n  /** The latest provenance item for this branch*/\r\n  last_update: ModelProvenance;\r\n}\r\n\r\nexport enum ConflictResolutionTemplateEnum {\r\n  MANUAL = 'manual',\r\n  REPOSITORY_ONLY = 'repository_only',\r\n  UPLOAD_ONLY = 'upload_only',\r\n  UNION_REPOSITORY = 'union_repository',\r\n  UNION_UPLOAD = 'union_upload'\r\n}\r\n\r\n/** Represents a conflict in the model */\r\nexport interface Conflict {\r\n  /** Represents the current state of the repository */\r\n  left?: ConflictSide;\r\n  /** What changed in the repository */\r\n  leftChange?: ConflictChangeTypeEnum;\r\n  /** Represents the current state of the upload */\r\n  right?: any;\r\n  /** What changed in the uploaded model */\r\n  rightChange?: ConflictChangeTypeEnum;\r\n  /** The type of model element this conflict relates to */\r\n  type?: ConflictTypeEnum;\r\n  /** How this conflict was resolved by the user */\r\n  resolution?: ConflictResolutionTemplateEnum;\r\n}\r\n\r\n/** All possible values of a conflict change type */\r\nexport enum ConflictChangeTypeEnum {\r\n  UNCHANGED = 'unchanged',\r\n  ADDED = 'added',\r\n  DELETED = 'deleted',\r\n  MODIFIED = 'modified'\r\n}\r\n\r\nexport interface ConflictSide {\r\n  /** The unprocessed raw conflicting item */\r\n  raw: any;\r\n  /** The path in the organization of the conflicting item */\r\n  organization: ConflictSideOrganization[];\r\n  /** The name of the conflicting item */\r\n  name: string;\r\n  /** The ID of the conflicting item */\r\n  id: string;\r\n  /** The hash of the conflicting item */\r\n  hash: number;\r\n  /** The type of the conflicting item */\r\n  type: string;\r\n  /** The full name of the project to which the conflicting item belongs */\r\n  project: string;\r\n  /** The name of the branch to which the conflicting item belongs */\r\n  branch: string;\r\n  /** The ID of the model to which the conflicting item belongs */\r\n  model_id: string;\r\n  /** The timestamp at which the conflicting item was added to the model */\r\n  start_date: number;\r\n  /** The timestamp at which the conflicting item expires or has expired */\r\n  end_date2: number;\r\n  /** Whether the conflicting item originates from the repository (left) or from the uploaded model (right) */\r\n  source: 'left' | 'right';\r\n}\r\n\r\nexport interface ConflictSideOrganization {\r\n  /** The name of the subfolder */\r\n  label: string;\r\n  /** The index of the subfolder in the overall path */\r\n  position: number;\r\n}\r\n\r\n/** All possible values of a conflict type */\r\nexport enum ConflictTypeEnum {\r\n  NODES = 'nodes',\r\n  RELATIONS = 'relations',\r\n  VIEWS = 'views'\r\n}\r\n\r\n/** Request body for submitting an error to the API */\r\nexport class ErrorContext {\r\n  /** The name of the application */\r\n  app: string;\r\n  /** The error as thrown */\r\n  error: Error;\r\n  /** The username of the current user */\r\n  userid: string;\r\n  /** A snapshot of the current application state */\r\n  state?: StoreSnapshot;\r\n  /** The current app version */\r\n  version: string;\r\n  /** The timestamp at which the error was recorded */\r\n  created_at?: number;\r\n}\r\n\r\n/**\r\n * Returned by the API for traceability of a model commit\r\n */\r\nexport interface ModelCommit {\r\n  /** The name of the parser used */\r\n  parserName?: string;\r\n  /** The full name of the project the model was committed to */\r\n  projectName?: string;\r\n  /** The name of the branch the model was committed to */\r\n  branchName?: string;\r\n  /** The ID of the module the model was committed to */\r\n  module?: string;\r\n  /** The ID of the committed model assigned by the API */\r\n  modelId?: string;\r\n  /** The content type of the model as it was committed */\r\n  contentType?: ModelCommitContentTypeEnum;\r\n  /** The comment provided by the user */\r\n  comment?: string;\r\n  /** The timestamp at which the model was committed */\r\n  version?: string;\r\n  /** The username of the user who committed the model */\r\n  userid?: string;\r\n  /** The ID of the commit operation assigned by the API */\r\n  taskId?: string;\r\n}\r\n\r\nexport enum ModelCommitContentTypeEnum {\r\n  /** Archimate 3.0 */\r\n  ARCHIMATE = 'archimate',\r\n  /** XML */\r\n  XML = 'xml',\r\n  /** JSON */\r\n  JSON = 'json'\r\n}\r\n\r\n/** Represents a single provenance item */\r\nexport interface ModelProvenance {\r\n  /** ?? */\r\n  name: string;\r\n  /** The ID of this provenance item */\r\n  id: string;\r\n  /** The ID of the module this operation relates to */\r\n  module: string;\r\n  /** The ID of the model this operation relates to */\r\n  modelId: string;\r\n  /** The model type of the model this operation relates to */\r\n  type: ParserNameEnum;\r\n  /** The timestamp at which this operation was started */\r\n  start_date: number;\r\n  /** The username of the user who started this operation */\r\n  start_user: string;\r\n  /** The timestamp at which this operation was finished */\r\n  end_date: string;\r\n  /** The username of the user who finished this operation */\r\n  end_user: string;\r\n  /** The hash of the model this operation relates to */\r\n  hash: number;\r\n  /** The name of the branch this operation relates to */\r\n  branch: string;\r\n  /** The comment provided by the user */\r\n  comment: string;\r\n  /** The timestamp at which the operation was started */\r\n  version: string;\r\n  /** The model ID of the repository version */\r\n  derived_from_left: string;\r\n  /** The model ID of the uploaded version */\r\n  derived_from_right: string;\r\n  /** The branch name of the repository version */\r\n  derived_from_left_branch: string;\r\n  /** The branch name of the uploaded version */\r\n  derived_from_right_branch: string;\r\n  /** ?? */\r\n  min: string;\r\n  /** The repository operation executed */\r\n  operation: ModelProvenanceOperationEnum;\r\n  /** The full project name this provenance item relates to */\r\n  project: string;\r\n}\r\n\r\n/**\r\n * All possible provenance operations\r\n */\r\nexport enum ModelProvenanceOperationEnum {\r\n  CREATE_PROJECT = 'create_project',\r\n  RETRIEVE = 'retrieve',\r\n  COMMIT = 'commit',\r\n  CLONE = 'clone',\r\n  MERGE = 'merge',\r\n  BRANCH_CLONE = 'branch_clone',\r\n  BRANCH_MERGE = 'branch_merge',\r\n  UPLOAD = 'upload'\r\n}\r\n\r\n/** Represents a summary of provenance items over a day */\r\nexport interface ModelProvenanceSummary {\r\n  /** Number of provenance items this day */\r\n  cnt: number;\r\n  /** Start of the time period */\r\n  start_date: number;\r\n  /** List of branch names occurring in the provenance items */\r\n  branches: string[];\r\n}\r\n\r\n/** The progress of a commit operation as reported by the API */\r\nexport interface ModelQuery {\r\n  /** Textual description of the message */\r\n  message?: string;\r\n  /** Timestamp of creating this message */\r\n  timestamp?: number;\r\n  /** Timestamp of when the operation was started */\r\n  version?: number;\r\n  /** Current state of the operation */\r\n  state?: ModelQueryStateEnum;\r\n  /** Result of comparing the old and new versions of the model */\r\n  difResult?: ModelQueryDifResult;\r\n}\r\n\r\n/**\r\n * Represents the comparison between the repository and the uploaded model as reported by the API\r\n */\r\nexport interface ModelQueryDifResult {\r\n  /** The state of the comparison */\r\n  state?: ModelQueryDifResultStateEnum;\r\n  /** Timestamp of when the calculation started */\r\n  timestamp?: number;\r\n  /** The number of conflicts found */\r\n  cnt?: number;\r\n  /** The conflicts found */\r\n  conflictList?: Conflict[];\r\n}\r\n\r\n/**\r\n * Represents the state of the processing after a commit as reported by the API\r\n */\r\nexport enum ModelQueryDifResultStateEnum {\r\n  COMMITTED = 'COMMITTED',\r\n  FAILURE = 'FAILURE',\r\n  CONFLICT = 'CONFLICT',\r\n  LOCKED = 'LOCKED',\r\n  UNDEFINED = 'UNDEFINED'\r\n}\r\n\r\n/**\r\n * Represents the state of the operation as reported by the API\r\n */\r\nexport enum ModelQueryStateEnum {\r\n  CREATED = 'created',\r\n  WAITING = 'waiting',\r\n  RUNNING = 'running',\r\n  COMPLETED = 'completed',\r\n  FAILURE = 'failure'\r\n}\r\n\r\n/** All possible parser name values */\r\nexport enum ParserNameEnum {\r\n  ARCHIMATE3 = 'archimate3'\r\n}\r\n\r\n/**\r\n *  Represents a single project\r\n */\r\nexport interface Project {\r\n  last_updated?: number;\r\n  id?: string;\r\n  name?: string;\r\n  committer?: ProjectMember;\r\n  documentation?: string;\r\n  subscription?: 'public' | 'private';\r\n  start_date?: number;\r\n  end_date?: number;\r\n  derived_from?: string;\r\n  project_id?: string;\r\n  normalized_name?: string;\r\n  last_update_message?: string;\r\n  permissions?: { [username: string]: ProjectPermissionLevel };\r\n  project?: string;\r\n  owner?: string;\r\n  end_date2?: number;\r\n  type_?: 'project';\r\n}\r\n\r\n/**\r\n * Represents a member of a project\r\n */\r\nexport interface ProjectMember {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n/** The message returned by the project update */\r\nexport interface ProjectUpdateResponse {\r\n  comment?: string;\r\n  taskid?: string;\r\n}\r\n\r\n/** Data object representing user related attributes */\r\nexport interface UserInfo {\r\n  /** The username of the user */\r\n  userid: string;\r\n  /** The path in the application that the user most recently visited */\r\n  last_visited?: string;\r\n  /** A set of IDs for the projects that the user has marked as favorite */\r\n  favorite_projects?: string[];\r\n  /** A set of IDs for the projects that the user has most recently visited */\r\n  recent_projects?: string[];\r\n  /** Whether or not to show the getting started screen the app home page */\r\n  skip_welcome?: boolean;\r\n}\r\n\r\nexport interface UserRole {\r\n  /** The username of the user */\r\n  userid: string;\r\n  /** The full name of the project to which the role applies */\r\n  project: string;\r\n  /** The email of the user */\r\n  email: string;\r\n  /** The name of the role */\r\n  role_name: string;\r\n  /** The id of the role corresponding with the permission level */\r\n  role_id: PermissionLevel;\r\n}\r\n\r\n/**\r\n * Search result returned by the API representing a single user\r\n */\r\nexport class UserSearch {\r\n  /** The first name of the user */\r\n  firstName: string;\r\n  /** The last name of the user */\r\n  lastName: string;\r\n  /** The username of the user */\r\n  userName: string;\r\n  /** The email address of the user */\r\n  email: string;\r\n}\r\n","export * from './update-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Creates or updates the given `Branch` in the repository.\r\n * Whether a `Branch` is updated or created depends on whether or not the `branch_id` property is set.\r\n */\r\nexport function updateBranch(\r\n  /** The branch which to create or update */\r\n  branch: Branch\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'updateBranch');\r\n\r\n  return http.authorize().post<Branch>(path, branch);\r\n}\r\n","export * from './update-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to update an existing project; project names are immutable\r\n */\r\nexport function updateProject(\r\n  /** The ID of the project to update */\r\n  projectId: string,\r\n  /** The updated project data object */\r\n  project: Project\r\n): Observable<Project> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'updateProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http.authorize().post(path, project);\r\n}\r\n","export * from './update-user-group'","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { UserGroup } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Creates or updates the given `UserGroup` in the repository.\r\n * Whether a `UserGroup` is updated or created depends on whether or not the `group_id` property is set.\r\n */\r\nexport function updateUserGroup(\r\n  /** The user group which to create or update */\r\n  userGroup: UserGroup\r\n): Observable<UserGroup> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'updateUserGroup');\r\n\r\n  return http.authorize().post<UserGroup>(path, userGroup);\r\n}\r\n","export * from './update-user-info';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { UserInfo } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to update the user info for the current user.\r\n * The API interprets the Bearer token in the request header to determine which user info to update.\r\n */\r\nexport function updateUserInfo(\r\n  /** The new user info */\r\n  userinfo: UserInfo\r\n): Observable<UserInfo> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/user/update`;\r\n\r\n  validateRequiredArguments(arguments, 'updateUserInfo');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/json');\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http.authorize().post<UserInfo>(path, userinfo, requestOptions);\r\n}\r\n","export * from './user-search';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { userSearchBasePath } from '../constants';\r\nimport { GetOptions, UserSearch } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Get the user details matching the search string\r\n */\r\nexport function userSearch(\r\n  /** String to match the first name, last name, username or email address of any users */\r\n  search: string,\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserSearch[]> {\r\n  const http = getHttpClient(),\r\n    path = userSearchBasePath;\r\n\r\n  validateRequiredArguments(arguments, 'userSearch');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({ search });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserSearch[]>(path, requestOptions);\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { HttpService } from '@models4insight/http';\r\nimport { Dictionary, isNaN, isNil } from 'lodash';\r\nimport { RepositoryModule } from './repository.module';\r\n\r\n/**\r\n * Creates a new `HttpParams` object based on the given parameters, filtering out any parameter of which the value is null or undefined\r\n */\r\nexport function createHttpParams(\r\n  /** The set of key value pairs to include as parameters */\r\n  params: Dictionary<any>\r\n): HttpParams {\r\n  let result: HttpParams = new HttpParams();\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (!isNil(value) && !isNaN(value)) {\r\n      result = result.set(key, value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the `HttpService` as imported by the `RepositoryModule`. If the `RepositoryModule` has not been loaded, throws an error.\r\n */\r\nexport function getHttpClient(): HttpService {\r\n  if (!RepositoryModule.injector) {\r\n    throw new Error(\r\n      'Tried running an API query while the RepositoryModule was not loaded. Please make sure the RepositoryModule is imported.'\r\n    );\r\n  }\r\n  return RepositoryModule.injector.get(HttpService);\r\n}\r\n","export * from './lib/branches.service';\r\nexport * from './lib/services-branch.module';\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Branch, deleteBranch, getBranches, updateBranch } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ServicesBranchModule } from './services-branch.module';\r\n\r\nexport interface ProjectBranchesContext {\r\n  readonly branchesById?: Dictionary<Branch>;\r\n  readonly branchesByName?: Dictionary<Branch>;\r\n}\r\n\r\nexport interface BranchesStoreContext {\r\n  readonly branchesPerProject?: Dictionary<ProjectBranchesContext>;\r\n  readonly isCreatingBranch?: boolean;\r\n  readonly isDeletingBranch?: boolean;\r\n  readonly isIndexingBranchesByName?: boolean;\r\n  readonly isLoadingBranches?: boolean;\r\n  readonly isUpdatingBranch?: boolean;\r\n}\r\n\r\nexport const defaultBranchesServiceState: BranchesStoreContext = {\r\n  isCreatingBranch: false,\r\n  isDeletingBranch: false,\r\n  isIndexingBranchesByName: false,\r\n  isLoadingBranches: false,\r\n  isUpdatingBranch: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesBranchModule\r\n})\r\nexport class BranchesService extends BasicStore<BranchesStoreContext> {\r\n  private readonly deleteBranch$ = new Subject<Branch>();\r\n  private readonly branchDeleted$ = new Subject<void>();\r\n  private readonly createBranch$ = new Subject<Branch>();\r\n  private readonly branchUpdated$ = new Subject<Branch>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultBranchesServiceState,\r\n      name: 'BranchesService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.deleteBranch$\r\n      .pipe(\r\n        concatMap(branch => this.handleDeleteBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchDeleted$);\r\n\r\n    this.createBranch$\r\n      .pipe(\r\n        concatMap(branch => this.handleCreateBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchUpdated$);\r\n\r\n    // Whenever a new project is selected, retrieve the branches for that project\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId => this.handleRetrieveBranches(projectId)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the branches update, build an index of branches by name\r\n    this.branches\r\n      .pipe(\r\n        switchMap(branches => this.handleIndexBranchesByName(branches)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever a branch is created or updated, save it to the backend\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.watch(['branchesPerProject', projectId, 'branchesById'])\r\n        ),\r\n        concatMap(branches => from(branches)),\r\n        mergeMap(branch => this.handleUpdateBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Saves the given `branch` to the back end.\r\n   * Use this function if your `branch` does not yet have an ID.\r\n   */\r\n  createBranch(branch: Branch) {\r\n    this.updateBranch(branch);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given `branch`\r\n   */\r\n  deleteBranch(branch: Branch) {\r\n    this.deleteBranch$.next(branch);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Branch` with the given `branchId` as a `Promise`.\r\n   * @param branchId the ID of the `Branch` to retrieve.\r\n   */\r\n  async getBranchById(branchId: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return this.get([\r\n      'branchesPerProject',\r\n      projectId,\r\n      'branchesById',\r\n      branchId\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Branch` with the given `branchName` as a `Promise`.\r\n   * @param branchName The name of the `Branch` to retrieve.\r\n   */\r\n  async getBranchByName(branchName: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return this.get([\r\n      'branchesPerProject',\r\n      projectId,\r\n      'branchesByName',\r\n      branchName\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Branch` with the given `branchId`.\r\n   * @param branchId the ID of the `Branch` to observe\r\n   */\r\n  selectBranchById(branchId: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select([\r\n            'branchesPerProject',\r\n            projectId,\r\n            'branchesById',\r\n            branchId\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Branch` with the given `branchName`.\r\n   * @param branchName The name of the `Branch` to observe.\r\n   */\r\n  selectBranchByName(branchName: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select([\r\n            'branchesPerProject',\r\n            projectId,\r\n            'branchesByName',\r\n            branchName\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Saves the given `branch` to the back end.\r\n   */\r\n  async updateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchId = branch?.id;\r\n    if (branchId) {\r\n      this.update({\r\n        description: `Branch ${branchId} updated`,\r\n        path: ['branchesPerProject', projectId, 'branchesById', branchId],\r\n        payload: branch\r\n      });\r\n    } else {\r\n      this.createBranch$.next(branch);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of all branches as a list\r\n   */\r\n  get branches(): Observable<Branch[]> {\r\n    return this.projectService.select('projectId').pipe(\r\n      switchMap(projectId =>\r\n        this.select(['branchesPerProject', projectId, 'branchesById'])\r\n      ),\r\n      map(Object.values)\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Creating the branch', { isQuiet: true })\r\n  @MonitorAsync('isCreatingBranch')\r\n  private async handleCreateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    const createBranchResponse = await updateBranch({\r\n      ...branch,\r\n      project_id: projectId\r\n    }).toPromise();\r\n\r\n    this.updateBranch(createBranchResponse);\r\n\r\n    return createBranchResponse;\r\n  }\r\n\r\n  @ManagedTask('Deleting the branch', { isQuiet: true })\r\n  @MonitorAsync('isDeletingBranch')\r\n  private async handleDeleteBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchId = branch?.id;\r\n\r\n    const deleteBranchResponse = await deleteBranch(\r\n      projectId,\r\n      branchId\r\n    ).toPromise();\r\n\r\n    if (deleteBranchResponse === 'OK') {\r\n      this.delete({\r\n        description: `Branch ${branchId} deleted`,\r\n        path: ['branchesPerProject', projectId, 'branchesById', branchId]\r\n      });\r\n    }\r\n  }\r\n\r\n  @ManagedTask('Indexing the branches by name', { isQuiet: true })\r\n  @MonitorAsync('isIndexingBranchesByName')\r\n  private async handleIndexBranchesByName(branches: Branch[]) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchesByName = indexByProperty(branches, 'name');\r\n\r\n    this.update({\r\n      description: 'New branches by name index available',\r\n      path: ['branchesPerProject', projectId, 'branchesByName'],\r\n      payload: branchesByName\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Retrieving the branches for the current project', {\r\n    isQuiet: true\r\n  })\r\n  @MonitorAsync('isLoadingBranches')\r\n  private async handleRetrieveBranches(projectId: string) {\r\n    const branches = await getBranches(projectId, {\r\n      forceUpdate: true\r\n    }).toPromise();\r\n\r\n    const branchesById = indexByProperty(branches, 'id');\r\n\r\n    this.update({\r\n      description: 'New branches available',\r\n      path: ['branchesPerProject', projectId, 'branchesById'],\r\n      payload: branchesById\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the branch', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingBranch')\r\n  private async handleUpdateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return updateBranch({ ...branch, project_id: projectId }).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesBranchModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesBranchModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesBranchModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/clickstream.module';\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ClickstreamConfig {\r\n  readonly app: string;\r\n}\r\n\r\nexport const ClickstreamConfigService = new InjectionToken<ClickstreamConfig>(\r\n  'ClickstreamConfig'\r\n);\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { ClickstreamConfig, ClickstreamConfigService } from './clickstream-config.service';\r\nimport { ClickstreamService } from './clickstream.service';\r\n\r\n@NgModule()\r\nexport class ClickstreamModule {\r\n  constructor(\r\n    clickstreamService: ClickstreamService,\r\n    @Optional() @SkipSelf() parentModule: ClickstreamModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ClickstreamModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    clickstreamService.init();\r\n  }\r\n\r\n  static forRoot(config: ClickstreamConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: ClickstreamModule,\r\n      providers: [\r\n        ClickstreamService,\r\n        {\r\n          provide: ClickstreamConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router, RouterEvent } from '@angular/router';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { ClickstreamEvent, logClickstreamEvent } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { now } from 'lodash';\r\nimport { concatMap, filter } from 'rxjs/operators';\r\nimport { ClickstreamConfig, ClickstreamConfigService } from './clickstream-config.service';\r\n\r\nfunction eventIsNavigationEnd(event: RouterEvent): event is NavigationEnd {\r\n  return event instanceof NavigationEnd;\r\n}\r\n\r\nexport interface ClickstreamStoreContext {\r\n  readonly isLoggingClickstreamEvent?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class ClickstreamService extends BasicStore<ClickstreamStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    @Inject(ClickstreamConfigService)\r\n    private readonly config: ClickstreamConfig,\r\n    private readonly router: Router,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ClickstreamService', storeService });\r\n  }\r\n\r\n  init() {\r\n    this.router.events\r\n      .pipe(\r\n        filter(eventIsNavigationEnd),\r\n        concatMap(event => this.logClickstreamEvent(event)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  @ManagedTask('Logging the clickstream event', { isQuiet: true })\r\n  @MonitorAsync('isLoggingClickstreamEvent')\r\n  private async logClickstreamEvent(event: NavigationEnd) {\r\n    const userid = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    const clickstreamEvent: ClickstreamEvent = {\r\n      app: this.config.app,\r\n      timestamp: now(),\r\n      url: event.urlAfterRedirects,\r\n      userid\r\n    };\r\n\r\n    return logClickstreamEvent(clickstreamEvent).toPromise();\r\n  }\r\n}\r\n","export * from './lib/commit-model.service';\r\nexport * from './lib/conflicts.service';\r\nexport * from './lib/model-data-commit.service';\r\nexport * from './lib/model-data.service';\r\nexport * from './lib/model.service';\r\nexport * from './lib/retrieve-model.service';\r\nexport * from './lib/services-model.module';\r\nexport * from './lib/types';\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport {\r\n  commitJsonModel,\r\n  commitModel,\r\n  ConflictResolutionTemplateEnum,\r\n  forceCommitModel,\r\n  ModelCommit,\r\n  ModelCommitContentTypeEnum,\r\n  ModelQuery,\r\n  ModelQueryDifResultStateEnum,\r\n  monitorStatus\r\n} from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { TaskManagerService } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap, first } from 'rxjs/operators';\r\nimport { ConflictsService } from './conflicts.service';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface CommitOptions {\r\n  readonly conflictResolutionTemplate?: ConflictResolutionTemplateEnum;\r\n  readonly keepOriginalIds?: boolean;\r\n}\r\n\r\ninterface CommitModelContext {\r\n  readonly branchId: string;\r\n  readonly comment: string;\r\n  readonly model: File | string;\r\n  readonly options?: CommitOptions;\r\n  readonly how?: 'file' | 'json';\r\n}\r\n\r\nexport interface CommitModelStoreContext {\r\n  readonly isCommittingModel?: boolean;\r\n}\r\n\r\nexport const defaultCommitModelServiceState: CommitModelStoreContext = {\r\n  isCommittingModel: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class CommitModelService extends BasicStore<CommitModelStoreContext> {\r\n  private readonly commitModel$ = new Subject<CommitModelContext>();\r\n  private readonly onModelCommitted$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly conflictsService: ConflictsService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly taskManager: TaskManagerService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultCommitModelServiceState,\r\n      name: 'CommitModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever a commit is triggered, handle the commit. Only one commit can be active at a time.\r\n    this.commitModel$\r\n      .pipe(\r\n        exhaustMap(({ branchId, comment, model, options, how }) =>\r\n          this.handleCommitModel(branchId, comment, model, options, how)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.onModelCommitted$);\r\n  }\r\n\r\n  async commitModel(\r\n    branchId: string,\r\n    comment: string,\r\n    model: File,\r\n    options: CommitOptions = {}\r\n  ) {\r\n    this.commitModel$.next({\r\n      branchId,\r\n      comment,\r\n      model,\r\n      options,\r\n      how: 'file'\r\n    });\r\n\r\n    return this.onModelCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  async commitJsonModel(\r\n    branchId: string,\r\n    comment: string,\r\n    model: string,\r\n    options: CommitOptions = {}\r\n  ) {\r\n    this.commitModel$.next({\r\n      branchId,\r\n      comment,\r\n      model,\r\n      options,\r\n      how: 'json'\r\n    });\r\n\r\n    return this.onModelCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  get onModelCommitted() {\r\n    return this.onModelCommitted$.asObservable();\r\n  }\r\n\r\n  @MonitorAsync('isCommittingModel')\r\n  private async handleCommitModel(\r\n    branchName: string,\r\n    comment: string,\r\n    model: File | string,\r\n    { conflictResolutionTemplate, keepOriginalIds = false }: CommitOptions = {},\r\n    how: 'file' | 'json' = 'file'\r\n  ) {\r\n    const [project, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    const task = this.taskManager.createTask();\r\n\r\n    const commitMethods = {\r\n      file: () =>\r\n        commitModel(project.project, branchName, model as File, username, {\r\n          keepOriginalIds,\r\n          comment\r\n        }),\r\n      json: () =>\r\n        commitJsonModel(\r\n          project.project,\r\n          branchName,\r\n          model as string,\r\n          username,\r\n          {\r\n            comment\r\n          }\r\n        )\r\n    };\r\n\r\n    const commitMethod = commitMethods[how],\r\n      uploadModel = commitMethod().toPromise();\r\n\r\n    await task.addOperation({\r\n      description: 'Uploading the model to the repository',\r\n      operation: uploadModel\r\n    });\r\n\r\n    // Monitor the processing of the model and continue after processing is complete\r\n    const commitStatus = uploadModel.then(commit =>\r\n      monitorStatus(project.project, commit.taskId).toPromise()\r\n    );\r\n\r\n    await task.addOperation({\r\n      description: 'Processing the committed model',\r\n      operation: commitStatus\r\n    });\r\n\r\n    // If no conflict resolution template is given, register the conflict set with the conflicts service\r\n    const handleConflicts = Promise.all([commitStatus, uploadModel]).then(\r\n      ([query, commit]) => {\r\n        if (!conflictResolutionTemplate) {\r\n          this.conflictsService.registerConflictsForTask(\r\n            query,\r\n            project,\r\n            branchName,\r\n            branchName,\r\n            commit.taskId,\r\n            {\r\n              fromModelId: commit.taskId,\r\n              toModelId: 'TRUNK',\r\n              parserName: 'archimate3',\r\n              contentType: 'archimate',\r\n              comment: commit.comment\r\n            }\r\n          );\r\n        }\r\n        return [query, commit] as [ModelQuery, ModelCommit];\r\n      }\r\n    );\r\n\r\n    await task.addOperation({\r\n      description: 'Checking for conflicts',\r\n      operation: handleConflicts\r\n    });\r\n\r\n    // If a conflict resolution template is given, automatically resolve the conflicts\r\n    if (conflictResolutionTemplate) {\r\n      const resolveConflicts = handleConflicts.then(async ([query, commit]) => {\r\n        if (query.difResult.state === ModelQueryDifResultStateEnum.CONFLICT) {\r\n          const forceCommit = await forceCommitModel(\r\n            'archimate3',\r\n            project.project,\r\n            branchName,\r\n            '',\r\n            commit.taskId,\r\n            branchName,\r\n            'TRUNK',\r\n            username,\r\n            commit.comment,\r\n            ModelCommitContentTypeEnum.JSON,\r\n            commit.taskId,\r\n            conflictResolutionTemplate\r\n          ).toPromise();\r\n\r\n          return monitorStatus(project.project, forceCommit.taskId).toPromise();\r\n        } else {\r\n          return query;\r\n        }\r\n      });\r\n\r\n      await task.addOperation({\r\n        description: 'Resolving the conflicts',\r\n        operation: resolveConflicts\r\n      });\r\n    }\r\n\r\n    const executable = await task.getExecutable();\r\n\r\n    return executable.toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { ModelQuery, ModelQueryDifResultStateEnum, ModelQueryStateEnum, Project } from '@models4insight/repository';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\n/**\r\n * Represents the conflicts for a single commit or moved branch\r\n */\r\nexport interface ConflictSetContext {\r\n  readonly project: Project;\r\n  readonly parserName: string;\r\n  readonly fromBranchName: string;\r\n  readonly toBranchName: string;\r\n  readonly fromModelId: string;\r\n  readonly toModelId: string;\r\n  readonly comment: string;\r\n  readonly contentType: string;\r\n  readonly taskId: string;\r\n  readonly conflictSet: ModelQuery;\r\n  readonly addListLeft: Set<string>;\r\n  readonly addListRight: Set<string>;\r\n  readonly deleteListLeft: Set<string>;\r\n  readonly deleteListRight: Set<string>;\r\n}\r\n\r\n/**\r\n * Data object for the state of the conflicts service.\r\n */\r\nexport interface ConflictsStoreContext {\r\n  /** Index of conflict sets keyed by their task ID */\r\n  readonly conflictSetsByTaskId?: Dictionary<ConflictSetContext>;\r\n  /** Groups conflict sets by their associated project IDs */\r\n  readonly conflictSetsPerProject?: Dictionary<string[]>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ConflictsService extends BasicStore<ConflictsStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({\r\n      name: 'ConflictsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the conflict sets update, create an index of the conflict sets per project\r\n    this.select('conflictSetsByTaskId')\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(conflictSetsByTaskId =>\r\n        this.groupConflictSetsByProjectId(conflictSetsByTaskId)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Registers a new conflict set\r\n   */\r\n  addConflictSet(\r\n    /** The parser that should be used to interpret the model */\r\n    parserName: string,\r\n    /** The project to which the model belongs */\r\n    project: Project,\r\n    /** The source branch for the commit/move */\r\n    fromBranchName: string,\r\n    /** The target branch for the commit/move */\r\n    toBranchName: string,\r\n    /** The source model ID for the commit/move */\r\n    fromModelId: string,\r\n    /** The target model ID for the commit/move */\r\n    toModelId: string,\r\n    /** The original comment provided by the user */\r\n    comment: string,\r\n    /** The task ID as assigned by the API */\r\n    taskId: string,\r\n    /** The content type in which the model was submitted */\r\n    contentType: string,\r\n    /** The server response indicating there was a conflict */\r\n    conflictSet: ModelQuery\r\n  ) {\r\n    this.update({\r\n      description: 'New conflict set available',\r\n      path: ['conflictSetsByTaskId', taskId],\r\n      payload: {\r\n        parserName: parserName,\r\n        project: project,\r\n        taskId: taskId,\r\n        fromBranchName: fromBranchName,\r\n        toBranchName: toBranchName,\r\n        fromModelId: fromModelId,\r\n        toModelId: toModelId,\r\n        conflictSet: conflictSet,\r\n        comment: comment,\r\n        contentType: contentType,\r\n        addListLeft: new Set<string>(),\r\n        addListRight: new Set<string>(),\r\n        deleteListLeft: new Set<string>(),\r\n        deleteListRight: new Set<string>()\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the specific conflict set identified by the given task ID as a `Promise`\r\n   * @param taskId The identifier of the conflict set\r\n   */\r\n  async getConflictSet(taskId: string): Promise<ConflictSetContext> {\r\n    return this.get(['conflictSetsByTaskId', taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns the conflict sets for the project with the given `projectId` as a `Promise`\r\n   * @param projectId The id of the project for which to retrieve the conflict sets\r\n   */\r\n  async getConflictSetsForProject(projectId: string) {\r\n    const [conflictSetsByTaskId, taskIds] = await Promise.all([\r\n      this.get('conflictSetsByTaskId'),\r\n      this.get(['conflictSetsPerProject', projectId])\r\n    ]);\r\n\r\n    return taskIds.map(taskId => conflictSetsByTaskId[taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the given task indicates any conflicts\r\n   * @param modelQuery The task that should be checked\r\n   */\r\n  hasConflicts(modelQuery: ModelQuery) {\r\n    return (\r\n      modelQuery?.state === ModelQueryStateEnum.COMPLETED &&\r\n      modelQuery?.difResult?.state === ModelQueryDifResultStateEnum.CONFLICT\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks the given server response whether it indicates any conflicts.\r\n   * If so, registers a new conflict set.\r\n   */\r\n  registerConflictsForTask(\r\n    modelQuery: ModelQuery,\r\n    project: Project,\r\n    fromBranchName: string,\r\n    toBranchName: string,\r\n    taskId: string,\r\n    options: {\r\n      fromModelId?: string;\r\n      toModelId?: string;\r\n      parserName?: 'archimate3';\r\n      contentType?: 'archimate';\r\n      comment?: string;\r\n    } = {}\r\n  ) {\r\n    const config = {\r\n      fromModelId: 'TRUNK',\r\n      toModelId: 'TRUNK',\r\n      parserName: 'archimate3',\r\n      contentType: 'archimate',\r\n      comment: '',\r\n      ...options\r\n    };\r\n\r\n    if (this.hasConflicts(modelQuery)) {\r\n      this.addConflictSet(\r\n        config.parserName,\r\n        project,\r\n        fromBranchName,\r\n        toBranchName,\r\n        config.fromModelId,\r\n        config.toModelId,\r\n        config.comment,\r\n        taskId,\r\n        config.contentType,\r\n        modelQuery\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregisters a conflict set identified by the given `taskId`\r\n   */\r\n  removeConflictSet(\r\n    /** The task ID which identifies the conflict set */\r\n    taskId: string\r\n  ): void {\r\n    this.delete({\r\n      description: 'Removed a conflict set',\r\n      path: ['conflictSetsByTaskId', taskId]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves an `Observable` stream of the specific conflict set identified by the given `taskId`\r\n   * @param taskId The identifier of the conflict set\r\n   */\r\n  selectConflictSet(taskId: string): Observable<ConflictSetContext> {\r\n    return this.select(['conflictSetsByTaskId', taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the conflict sets for the project with the given `projectId`\r\n   * @param projectId The id of the project for which to retrieve the conflict sets\r\n   */\r\n  selectConflictSetsForProject(projectId: string) {\r\n    return combineLatest([\r\n      this.select('conflictSetsByTaskId'),\r\n      this.select(['conflictSetsPerProject', projectId])\r\n    ]).pipe(\r\n      map(([conflictSetsByTaskId, taskIds]) =>\r\n        taskIds\r\n          .map(taskId => conflictSetsByTaskId[taskId])\r\n          .filter(conflictSet => !!conflictSet)\r\n      )\r\n    );\r\n  }\r\n\r\n  private groupConflictSetsByProjectId(\r\n    conflictSetsByTaskId: Dictionary<ConflictSetContext>\r\n  ) {\r\n    const conflictSetsPerProject = Object.entries(conflictSetsByTaskId).reduce(\r\n      (result, [taskId, conflictSet]) => ({\r\n        ...result,\r\n        [conflictSet.project.id]: [\r\n          ...(result[conflictSet.project.id] ?? []),\r\n          taskId\r\n        ]\r\n      }),\r\n      {} as Dictionary<string[]>\r\n    );\r\n\r\n    this.update({\r\n      description: 'New conflict sets per project available',\r\n      payload: {\r\n        conflictSetsPerProject\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { commitData } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap, first } from 'rxjs/operators';\r\nimport { ModelDataService } from './model-data.service';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nfunction* formatData(dataByConceptId: Dictionary<Dictionary<any>>) {\r\n  for (const [id, data] of Object.entries(dataByConceptId)) {\r\n    yield {\r\n      id,\r\n      data\r\n    };\r\n  }\r\n}\r\n\r\nexport interface ModelDataCommitStoreContext {\r\n  readonly isCommittingData?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelDataCommitService extends BasicStore<\r\n  ModelDataCommitStoreContext\r\n> {\r\n  private readonly commitData$ = new Subject<string>();\r\n  private readonly dataCommitted$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private readonly modelDataService: ModelDataService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ModelDataCommitService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.commitData$\r\n      .pipe(\r\n        exhaustMap(branch => this.handleCommitData(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.dataCommitted$);\r\n  }\r\n\r\n  async commitData(branch: string) {\r\n    this.commitData$.next(branch);\r\n    return this.onDataCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  get onDataCommitted() {\r\n    return this.dataCommitted$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Committing the model data')\r\n  @MonitorAsync('isCommittingData')\r\n  private async handleCommitData(branch: string) {\r\n    const [{ project }, data] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.modelDataService.get('dataByConceptId')\r\n    ]);\r\n\r\n    const formattedData = Array.from(formatData(data));\r\n\r\n    return commitData(project, branch, formattedData).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { Dictionary } from 'lodash';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface ModelDataStoreContext {\r\n  readonly dataByConceptId?: Dictionary<Dictionary<any>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelDataService extends BasicStore<ModelDataStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({ name: 'ModelDataService', storeService });\r\n  }\r\n\r\n  set dataByConceptId(dataByConceptId: Dictionary<Dictionary<any>>) {\r\n    this.update({\r\n      description: 'New model data available',\r\n      payload: { dataByConceptId }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { getModel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest } from 'rxjs';\r\nimport { debounceTime, filter, switchMap } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface ModelStoreContext {\r\n  readonly branch?: string;\r\n  readonly isLoadingModel?: boolean;\r\n  readonly model?: any;\r\n  readonly version?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelService extends BasicStore<ModelStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'ModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(() => this.reset());\r\n\r\n    combineLatest([\r\n      this.select('branch', { includeFalsy: true }),\r\n      this.select('version', { includeFalsy: true })\r\n    ])\r\n      .pipe(\r\n        debounceTime(50),\r\n        filter(([branch]) => !!branch),\r\n        switchMap(([branch, version]) =>\r\n          this.handleRetrieveModel(branch, version)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  set model(model: any) {\r\n    this.update({\r\n      description: 'New model available',\r\n      payload: { model }\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Loading the model', { isQuiet: true })\r\n  @MonitorAsync('isLoadingModel')\r\n  private async handleRetrieveModel(branch: string, version: number) {\r\n    const [{ project }, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    const model = await getModel(\r\n      'archimate3',\r\n      project,\r\n      branch,\r\n      '',\r\n      'TRUNK',\r\n      username,\r\n      'json',\r\n      { version }\r\n    ).toPromise();\r\n\r\n    this.model = model;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { downloadModel, ModelCommitContentTypeEnum } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\ninterface RetrieveModelContext {\r\n  readonly branchId: string;\r\n  readonly contentType: ModelCommitContentTypeEnum;\r\n  readonly version?: number;\r\n}\r\n\r\nexport interface RetrieveModelStoreContext {\r\n  readonly isRetrievingModel?: boolean;\r\n}\r\n\r\nexport const defaultRetrieveModelServiceState: RetrieveModelStoreContext = {\r\n  isRetrievingModel: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class RetrieveModelService extends BasicStore<RetrieveModelStoreContext> {\r\n  private readonly onModelRetrieved$ = new Subject<void>();\r\n  private readonly retrieveModel$ = new Subject<RetrieveModelContext>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultRetrieveModelServiceState,\r\n      name: 'RetrieveModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever a retrieve model is triggered, handle the retrieve. Only one retrieve can be active at a time.\r\n    this.retrieveModel$\r\n      .pipe(\r\n        exhaustMap(({ branchId, contentType, version }) =>\r\n          this.handleRetrieveModel(branchId, contentType, version)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.onModelRetrieved$);\r\n  }\r\n\r\n  retrieveModel(\r\n    branchId: string,\r\n    contentType: ModelCommitContentTypeEnum,\r\n    version?: number\r\n  ) {\r\n    this.retrieveModel$.next({\r\n      branchId,\r\n      contentType,\r\n      version\r\n    });\r\n  }\r\n\r\n  get onModelRetrieved() {\r\n    return this.onModelRetrieved$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Retrieving the model from the repository')\r\n  @MonitorAsync('isRetrievingModel')\r\n  private async handleRetrieveModel(\r\n    branchId: string,\r\n    contentType: ModelCommitContentTypeEnum,\r\n    version: number\r\n  ) {\r\n    const [{ project }, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    return downloadModel(project, branchId, username, version, {\r\n      contentType\r\n    }).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesModelModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesModelModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesModelModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/project-members.service';\r\nexport * from './lib/project-user-groups.service';\r\nexport * from './lib/project.service';\r\nexport * from './lib/projects.service';\r\nexport * from './lib/services-project.module';\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { PermissionLevel } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, switchMap } from 'rxjs/operators';\r\nimport { ProjectService } from './project.service';\r\nimport { ProjectsService } from './projects.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectMembersStoreContext {\r\n  readonly isUpdatingMemberPermissions?: boolean;\r\n}\r\n\r\nexport const defaultProjectMembersServiceState: ProjectMembersStoreContext = {\r\n  isUpdatingMemberPermissions: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectMembersService extends BasicStore {\r\n  private readonly deleteProjectMember$ = new Subject<string>();\r\n  private readonly projectMemberDeleted$ = new Subject<string>();\r\n  private readonly updateProjectMember$ = new Subject<\r\n    [string, PermissionLevel]\r\n  >();\r\n  private readonly projectMemberUpdated$ = new Subject<\r\n    Dictionary<PermissionLevel>\r\n  >();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly projectsService: ProjectsService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectMembersServiceState,\r\n      name: 'ProjectMembersService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.deleteProjectMember$\r\n      .pipe(\r\n        concatMap(username => this.handleDeleteProjectMember(username)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectMemberDeleted$);\r\n\r\n    this.updateProjectMember$\r\n      .pipe(\r\n        concatMap(([username, permission]) =>\r\n          this.handleUpdateMemberPermissions(username, permission)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectMemberUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Add the member with the given `username` to the current project with the given `permission` level.\r\n   * By default, their permission level will be set to `BUSINESS_USER`.\r\n   *\r\n   * @param username The username of the new project member\r\n   * @param permission The permission level of the new project member\r\n   */\r\n  addProjectMember(\r\n    username: string,\r\n    permission: PermissionLevel = PermissionLevel.BUSINESS_USER\r\n  ) {\r\n    this.setProjectMemberPermissions(username, permission);\r\n  }\r\n\r\n  /**\r\n   * Removes the member with the given username from the project.\r\n   *\r\n   * @param username The username of the project member.\r\n   */\r\n  deleteProjectMember(username: string) {\r\n    this.deleteProjectMember$.next(username);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's permission level as a `Promise`.\r\n   */\r\n  async getCurrentUserPermissions() {\r\n    const username = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    return this.getMemberPermissions(username);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the permission level of the user with the given `username` as a `Promise`.\r\n   */\r\n  async getMemberPermissions(username: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    return this.projectsService.get(\r\n      ['projectsById', projectId, 'permissions', username],\r\n      { includeFalsy: true }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's permission level.\r\n   */\r\n  selectCurrentUserPermissions() {\r\n    return this.authenticationService\r\n      .select(['credentials', 'username'])\r\n      .pipe(switchMap(username => this.selectMemberPermissions(username)));\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the permission level of the project member with the given `username`.\r\n   */\r\n  selectMemberPermissions(username: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.projectsService.select([\r\n            'projectsById',\r\n            projectId,\r\n            'permissions',\r\n            username\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Updates the `permission` level of the user with the given `username`.\r\n   *\r\n   * @param username The username of the new project member\r\n   * @param permission The permission level of the new project member\r\n   */\r\n  setProjectMemberPermissions(username: string, permission: PermissionLevel) {\r\n    this.updateProjectMember$.next([username, permission]);\r\n  }\r\n\r\n  /** Returns a list of project members */\r\n  get members() {\r\n    return this.projectService\r\n      .selectCurrentProject()\r\n      .pipe(map(project => Object.keys(project.permissions)));\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a project member has been deleted\r\n   */\r\n  get onProjectMemberDeleted(): Observable<string> {\r\n    return this.projectMemberDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a project member has been created or changed\r\n   */\r\n  get onProjectMemberUpdated(): Observable<Dictionary<PermissionLevel>> {\r\n    return this.projectMemberUpdated$.asObservable();\r\n  }\r\n\r\n  @ManagedTask(\"Updating the project member's permissions\", { isQuiet: true })\r\n  @MonitorAsync('isUpdatingMemberPermissions')\r\n  private async handleUpdateMemberPermissions(\r\n    username: string,\r\n    permission: PermissionLevel\r\n  ) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    this.projectsService.update({\r\n      description: `Updated permissions for user ${username} to project ${projectId}`,\r\n      path: ['projectsById', projectId, 'permissions', username],\r\n      payload: permission\r\n    });\r\n\r\n    return { username: permission };\r\n  }\r\n\r\n  @ManagedTask('Deleting the project member', { isQuiet: true })\r\n  @MonitorAsync('isDeletingProjectMember')\r\n  private async handleDeleteProjectMember(username: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    this.projectsService.delete({\r\n      description: `Removed permissions for user ${username} to project ${projectId}`,\r\n      path: ['projectsById', projectId, 'permissions', username]\r\n    });\r\n\r\n    return username;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { deleteUserGroup, getUserGroups, updateUserGroup, UserGroup } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ProjectService } from './project.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectUserGroupsContext {\r\n  readonly userGroupsById?: Dictionary<UserGroup>;\r\n}\r\n\r\nexport interface ProjectUserGroupsStoreContext {\r\n  readonly isCreatingUserGroup?: boolean;\r\n  readonly isDeletingUserGroup?: boolean;\r\n  readonly isRetrievingUserGroups?: boolean;\r\n  readonly isUpdatingUserGroup?: boolean;\r\n  readonly userGroupsPerProject?: Dictionary<ProjectUserGroupsContext>;\r\n}\r\n\r\nexport const defaultProjectUserGroupsServiceState: ProjectUserGroupsStoreContext = {\r\n  isCreatingUserGroup: false,\r\n  isDeletingUserGroup: false,\r\n  isRetrievingUserGroups: false,\r\n  isUpdatingUserGroup: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectUserGroupsService extends BasicStore<\r\n  ProjectUserGroupsStoreContext\r\n> {\r\n  private readonly createUserGroup$ = new Subject<UserGroup>();\r\n  private readonly deleteUserGroup$ = new Subject<UserGroup>();\r\n  private readonly userGroupDeleted$ = new Subject<void>();\r\n  private readonly userGroupUpdated$ = new Subject<UserGroup>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectUserGroupsServiceState,\r\n      name: 'ProjectUserGroupsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the project id changes, retrieve the associated user groups\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId => this.handleRetrieveUserGroups(projectId)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever a user group create is triggered, handle the create user group operation.\r\n    // Ony one user group create can be active at any time.\r\n    this.createUserGroup$\r\n      .pipe(\r\n        exhaustMap(userGroup => this.handleCreateUserGroup(userGroup)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.userGroupUpdated$);\r\n\r\n    // Whenever a user group delete is triggered, try to delete the given user group\r\n    // A user group can only be deleted by a project owner\r\n    this.deleteUserGroup$\r\n      .pipe(\r\n        exhaustMap(userGroup => this.handleDeleteUserGroup(userGroup)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.userGroupDeleted$);\r\n\r\n    // Whenever a user group is added or updated, save it to the repository\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.watch(['userGroupsPerProject', projectId, 'userGroupsById'])\r\n        ),\r\n        concatMap(userGroups => from(userGroups)),\r\n        mergeMap(userGroup => this.handleUpdateUserGroup(userGroup))\r\n      )\r\n      .subscribe(this.userGroupUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Saves the given user group to the back end.\r\n   * Use this function if your user group does not yet have an ID.\r\n   */\r\n  createUserGroup(userGroup: UserGroup) {\r\n    this.updateUserGroup(userGroup);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given user group\r\n   */\r\n  deleteUserGroup(userGroup: UserGroup) {\r\n    this.deleteUserGroup$.next(userGroup);\r\n  }\r\n\r\n  /**\r\n   * Saves the given user group to the back end.\r\n   */\r\n  async updateUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      userGroupId = userGroup?.id;\r\n    if (userGroupId) {\r\n      this.update({\r\n        description: `User group ${userGroupId} updated`,\r\n        path: [\r\n          'userGroupsPerProject',\r\n          projectId,\r\n          'userGroupsById',\r\n          userGroupId\r\n        ],\r\n        payload: userGroup\r\n      });\r\n    } else {\r\n      this.createUserGroup$.next(userGroup);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a user group has been deleted\r\n   */\r\n  get onUserGroupDeleted(): Observable<void> {\r\n    return this.userGroupDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a user group has been created or changed\r\n   */\r\n  get onUserGroupUpdated(): Observable<UserGroup> {\r\n    return this.userGroupUpdated$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns a list of user groups\r\n   */\r\n  get userGroups(): Observable<UserGroup[]> {\r\n    return this.projectService.select('projectId').pipe(\r\n      switchMap(projectId =>\r\n        this.select(['userGroupsPerProject', projectId, 'userGroupsById'])\r\n      ),\r\n      map(Object.values)\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Creating the user group', { isQuiet: true })\r\n  @MonitorAsync('isCreatingUserGroup')\r\n  private async handleCreateUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    const createUserGroupResponse = await updateUserGroup({\r\n      ...userGroup,\r\n      project_id: projectId\r\n    }).toPromise();\r\n\r\n    this.updateUserGroup(createUserGroupResponse);\r\n\r\n    return createUserGroupResponse;\r\n  }\r\n\r\n  @ManagedTask('Deleting the user group', { isQuiet: true })\r\n  @MonitorAsync('isDeletingUserGroup')\r\n  private async handleDeleteUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      userGroupId = userGroup?.id;\r\n\r\n    const deleteUserGroupResponse = await deleteUserGroup(\r\n      projectId,\r\n      userGroupId\r\n    ).toPromise();\r\n\r\n    if (deleteUserGroupResponse === 'OK') {\r\n      this.delete({\r\n        description: `User group ${userGroupId} deleted`,\r\n        path: ['userGroupsPerProject', projectId, 'userGroupsById', projectId]\r\n      });\r\n    }\r\n  }\r\n\r\n  @ManagedTask('Retrieving the user groups of the current project', {\r\n    isQuiet: true\r\n  })\r\n  @MonitorAsync('isRetrievingUserGroups')\r\n  private async handleRetrieveUserGroups(projectId: string) {\r\n    const userGroups = await getUserGroups(projectId).toPromise();\r\n\r\n    const userGroupsById = indexByProperty(userGroups, 'id');\r\n\r\n    this.update({\r\n      description: 'New user groups available',\r\n      path: ['userGroupsPerProject', projectId, 'userGroupsById'],\r\n      payload: userGroupsById\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the user group', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingUserGroup')\r\n  private async handleUpdateUserGroup(userGroup: UserGroup) {\r\n    return updateUserGroup(userGroup).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ProjectsService } from './projects.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectStoreContext {\r\n  /** The id of the current project */\r\n  readonly projectId?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectService extends BasicStore<ProjectStoreContext> {\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'ProjectService',\r\n      storeService\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current `Project` as a `Promise`.\r\n   */\r\n  async getCurrentProject() {\r\n    const projectId = await this.get('projectId');\r\n    return this.projectsService.getProjectById(projectId);\r\n  }\r\n\r\n  /**\r\n   * Deletes the current project\r\n   */\r\n  async deleteCurrentProject() {\r\n    const project = await this.getCurrentProject();\r\n    this.projectsService.deleteProject(project);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current `Project`.\r\n   */\r\n  selectCurrentProject() {\r\n    return this.select('projectId').pipe(\r\n      switchMap(projectId => this.projectsService.selectProjectById(projectId))\r\n    );\r\n  }\r\n\r\n  /** Updates the ID of the currently selected `Project` */\r\n  setCurrentProject(projectId: string) {\r\n    this.update({\r\n      description: `Project ${projectId} selected`,\r\n      payload: {\r\n        projectId\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { createProject, deleteProject, getUserProjects, Project, updateProject } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary, orderBy } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectsStoreContext {\r\n  readonly isCreatingProject?: boolean;\r\n  readonly isDeletingProject?: boolean;\r\n  readonly isRetrievingProjects?: boolean;\r\n  readonly isUpdatingProject?: boolean;\r\n  readonly projectsById?: Dictionary<Project>;\r\n}\r\n\r\nexport const defaultProjectsServiceState: ProjectsStoreContext = {\r\n  isCreatingProject: false,\r\n  isDeletingProject: false,\r\n  isRetrievingProjects: false,\r\n  isUpdatingProject: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectsService extends BasicStore<ProjectsStoreContext> {\r\n  private readonly createProject$ = new Subject<Project>();\r\n  private readonly projectCreated$ = new Subject<Project>();\r\n  private readonly deleteProject$ = new Subject<Project>();\r\n  private readonly projectDeleted$ = new Subject<void>();\r\n  private readonly projectUpdated$ = new Subject<Project>();\r\n\r\n  constructor(\r\n    readonly authenticationService: AuthenticationService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectsServiceState,\r\n      name: 'ProjectsService',\r\n      storeService\r\n    });\r\n\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the username of the user changes, retrieve the projects of the current user\r\n    this.authenticationService\r\n      .select(['credentials', 'username'])\r\n      .pipe(\r\n        switchMap(username => this.handleRetrieveProjects(username)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    this.createProject$\r\n      .pipe(\r\n        concatMap(project => this.handleCreateProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectCreated$);\r\n\r\n    this.deleteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleDeleteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectDeleted$);\r\n\r\n    // Whenever a project is added or changes, save it to the repository\r\n    this.watch('projectsById')\r\n      .pipe(\r\n        concatMap(projects => from(projects)),\r\n        mergeMap(project => this.handleUpdateProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectUpdated$);\r\n  }\r\n\r\n  @ManagedTask('Creating the project', { isQuiet: true })\r\n  @MonitorAsync('isCreatingProject')\r\n  private async handleCreateProject(project: Project) {\r\n    const { username, email } = await this.authenticationService.get(\r\n      'credentials'\r\n    );\r\n\r\n    const projectCreateResponse = await createProject(\r\n      project,\r\n      username,\r\n      email\r\n    ).toPromise();\r\n\r\n    this.updateProject(projectCreateResponse);\r\n\r\n    return projectCreateResponse;\r\n  }\r\n\r\n  /**\r\n   * Saves the given project to the back end.\r\n   * Use this function if your project does not yet have an ID.\r\n   */\r\n  createProject(project: Project) {\r\n    this.updateProject(project);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given project\r\n   */\r\n  deleteProject(project: Project) {\r\n    this.deleteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Saves the given project to the back end.\r\n   */\r\n  updateProject(project: Project) {\r\n    if (project?.id) {\r\n      this.update({\r\n        description: `Project ${project.id} updated`,\r\n        path: ['projectsById', project.id],\r\n        payload: project\r\n      });\r\n    } else {\r\n      this.createProject$.next(project);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Project` with the given `projectId` as a `Promise`.\r\n   * @param projectId the ID of the project to retrieve\r\n   */\r\n  async getProjectById(projectId: string) {\r\n    return this.get(['projectsById', projectId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Project` with the given `projectId`.\r\n   * @param projectId the ID of the project to observe\r\n   */\r\n  selectProjectById(projectId: string) {\r\n    return this.select(['projectsById', projectId]);\r\n  }\r\n\r\n  /**\r\n   * An `Observable` stream of an `Array` containing all the user's current `Projects`.\r\n   */\r\n  get projects(): Observable<Project[]> {\r\n    return this.select('projectsById').pipe(\r\n      map(projectsById => {\r\n        const projects = Object.values(projectsById);\r\n        return orderBy(projects, 'last_updated', 'desc');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been created.\r\n   */\r\n  get onProjectCreated(): Observable<Project> {\r\n    return this.projectCreated$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been deleted.\r\n   */\r\n  get onProjectDeleted(): Observable<void> {\r\n    return this.projectDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been updated.\r\n   */\r\n  get onProjectUpdated(): Observable<Project> {\r\n    return this.projectUpdated$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Deleting the project', { isQuiet: true })\r\n  @MonitorAsync('isDeletingProject')\r\n  private async handleDeleteProject(project: Project) {\r\n    await deleteProject(project?.id).toPromise();\r\n\r\n    this.delete({\r\n      description: `Project ${project?.id} deleted`,\r\n      path: ['projectsById', project?.id]\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Retrieving your projects', { isQuiet: true })\r\n  @MonitorAsync('isRetrievingProjects')\r\n  private async handleRetrieveProjects(username: string) {\r\n    const projects = await getUserProjects(username).toPromise();\r\n\r\n    const projectsById = indexByProperty(projects, 'id');\r\n\r\n    this.update({\r\n      description: 'New projects available',\r\n      payload: { projectsById }\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the project', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingProject')\r\n  private async handleUpdateProject(project: Project) {\r\n    return updateProject(project.id, project).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesProjectModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesProjectModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesProjectModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/favorite-projects.service';\r\nexport * from './lib/recent-projects.service';\r\nexport * from './lib/services-user-info.module';\r\nexport * from './lib/user-info.service';\r\nexport * from './lib/last-visited-route.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Project } from '@models4insight/repository';\r\nimport {\r\n  ProjectService,\r\n  ProjectsService\r\n} from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, Subject } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\nexport interface FavoriteProjectsStoreContext {\r\n  readonly isAddingFavoriteProject?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class FavoriteProjectsService extends BasicStore<\r\n  FavoriteProjectsStoreContext\r\n> {\r\n  private readonly addFavoriteProject$ = new Subject<Project>();\r\n  private readonly removeFavoriteProject$ = new Subject<Project>();\r\n\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly userInfoService: UserInfoService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'FavoriteProjectsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.addFavoriteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleAddFavoriteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    this.removeFavoriteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleRemoveFavoriteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Register the given project as one of the current user's favorites.\r\n   * @param project The project that should be registered as a favorite.\r\n   */\r\n  addFavoriteProject(project: Project) {\r\n    this.addFavoriteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's favorite projects as a `Promise`\r\n   */\r\n  async getFavoriteProjects() {\r\n    const [favoriteProjectIds, projectsById] = await Promise.all([\r\n      this.userInfoService.get(['userInfo', 'favorite_projects']),\r\n      this.projectsService.get('projectsById')\r\n    ]);\r\n\r\n    return favoriteProjectIds\r\n      .filter(projectId => projectId in projectsById)\r\n      .map(projectId => projectsById[projectId]);\r\n  }\r\n\r\n  /**\r\n   * Unregisters the given project as one of the current user's favorites.\r\n   * @param project The project that should be unregistered as a favorite.\r\n   */\r\n  removeFavoriteProject(project: Project) {\r\n    this.removeFavoriteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's favorite projects\r\n   */\r\n  selectFavoriteProjects() {\r\n    return combineLatest([\r\n      this.userInfoService.select(['userInfo', 'favorite_projects']),\r\n      this.projectsService.select('projectsById')\r\n    ]).pipe(\r\n      map(([favoriteProjectIds, projectsById]) =>\r\n        favoriteProjectIds\r\n          .filter(projectId => projectId in projectsById)\r\n          .map(projectId => projectsById[projectId])\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether the current projcect is a favorite as an `Observable` stream.\r\n   */\r\n  get isCurrentProjectFavorite() {\r\n    return combineLatest([\r\n      this.projectService.select('projectId'),\r\n      this.userInfoService.select(['userInfo', 'favorite_projects'], {\r\n        includeFalsy: true\r\n      })\r\n    ]).pipe(\r\n      map(([projectId, favoriteProjects]) =>\r\n        !!favoriteProjects?.includes(projectId)\r\n      )\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Adding a favorite project', { isQuiet: true })\r\n  @MonitorAsync('isAddingFavoriteProject')\r\n  private async handleAddFavoriteProject(project: Project) {\r\n    // If the favorite projects are unavailable, start with an empty list\r\n    const favoriteProjects =\r\n      (await this.userInfoService.get(['userInfo', 'favorite_projects'], {\r\n        includeFalsy: true\r\n      })) ?? [];\r\n\r\n    const updatedFavoriteProjects = [\r\n      project?.id,\r\n      ...favoriteProjects.filter(\r\n        favoriteProject => favoriteProject !== project?.id\r\n      )\r\n    ];\r\n\r\n    this.userInfoService.update({\r\n      description: 'Favorite projects updated',\r\n      path: ['userInfo', 'favorite_projects'],\r\n      payload: updatedFavoriteProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n\r\n  @ManagedTask('Removing a favorite project', { isQuiet: true })\r\n  @MonitorAsync('isRemovingFavoriteProject')\r\n  private async handleRemoveFavoriteProject(project: Project) {\r\n    const favoriteProjects = await this.userInfoService.get([\r\n      'userInfo',\r\n      'favorite_projects'\r\n    ]);\r\n\r\n    const updatedFavoriteProjects = favoriteProjects.filter(\r\n      favoriteProject => favoriteProject !== project?.id\r\n    );\r\n\r\n    this.userInfoService.update({\r\n      description: 'Favorite project removed',\r\n      path: ['userInfo', 'favorite_projects'],\r\n      payload: updatedFavoriteProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { getQueryParametersFromUrl } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\n/** Represents the last visited route in the application */\r\nexport interface LastVisitedRoute {\r\n  /** The path of the last visited route */\r\n  readonly path: string;\r\n  /** Any query parameters applied to the last visited route */\r\n  readonly queryParams?: Dictionary<string>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class LastVisitedRouteService {\r\n  constructor(private readonly userInfoService: UserInfoService) {}\r\n\r\n  /**\r\n   * Returns a snapshot of the user's last visited route as a `Promise`\r\n   */\r\n  async getLastVisitedRoute() {\r\n    const lastVisitedUrl = await this.userInfoService.get([\r\n      'userInfo',\r\n      'last_visited'\r\n    ]);\r\n    return this.handleFormatLastVisitedRoute(lastVisitedUrl);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the user's last visited route\r\n   */\r\n  selectLastVisitedRoute() {\r\n    return this.userInfoService\r\n      .select(['userInfo', 'last_visited'])\r\n      .pipe(\r\n        map(lastVisitedUrl => this.handleFormatLastVisitedRoute(lastVisitedUrl))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Sets the user's last vistited route to the given `url`\r\n   * @param url The url of the user's last visited route\r\n   */\r\n  updateLastVisitedRoute(url: string) {\r\n    const [pathAndParameters] = url.split('#');\r\n\r\n    this.userInfoService.update({\r\n      description: 'New last visited url available',\r\n      path: ['userInfo', 'last_visited'],\r\n      payload: pathAndParameters\r\n    });\r\n  }\r\n\r\n  private handleFormatLastVisitedRoute(\r\n    lastVisitedUrl: string\r\n  ): LastVisitedRoute {\r\n    const [path] = lastVisitedUrl.split('?'),\r\n      queryParams = getQueryParametersFromUrl(lastVisitedUrl);\r\n    return { path, queryParams };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Project } from '@models4insight/repository';\r\nimport { ProjectsService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, Subject } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\nexport interface RecentProjectsStoreContext {\r\n  readonly isAddingRecentProject?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class RecentProjectsService extends BasicStore {\r\n  private readonly addRecentProject$ = new Subject<Project>();\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    private readonly userInfoService: UserInfoService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({ name: 'RecentProjectsService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.addRecentProject$\r\n      .pipe(\r\n        concatMap(project => this.handleAddRecentProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Adds the given project to the user's recently visited projects\r\n   * @param project The project that should be added to the list\r\n   */\r\n  addRecentProject(project: Project) {\r\n    this.addRecentProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's recently visited projects as a `Promise`\r\n   */\r\n  async getRecentProjects() {\r\n    const [recentProjectIds, projectsById] = await Promise.all([\r\n      this.userInfoService.get(['userInfo', 'recent_projects']),\r\n      this.projectsService.get('projectsById')\r\n    ]);\r\n\r\n    return recentProjectIds\r\n      .filter(projectId => projectId in projectsById)\r\n      .map(projectId => projectsById[projectId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's recently visited projects\r\n   */\r\n  selectRecentProjects() {\r\n    return combineLatest([\r\n      this.userInfoService.select(['userInfo', 'recent_projects']),\r\n      this.projectsService.select('projectsById')\r\n    ]).pipe(\r\n      map(([recentProjectIds, projectsById]) =>\r\n        recentProjectIds\r\n          .filter(projectId => projectId in projectsById)\r\n          .map(projectId => projectsById[projectId])\r\n      )\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Updating your recent projects', { isQuiet: true })\r\n  @MonitorAsync('isAddingRecentProject')\r\n  private async handleAddRecentProject(project: Project) {\r\n    // If the recent projects are unavailable, start with an empty list\r\n    const recentProjects =\r\n      (await this.userInfoService.get(['userInfo', 'recent_projects'], {\r\n        includeFalsy: true\r\n      })) ?? [];\r\n\r\n    const updatedRecentProjects = [\r\n      project?.id,\r\n      ...recentProjects.filter(recentProject => recentProject !== project?.id)\r\n    ].slice(0, 5);\r\n\r\n    this.userInfoService.update({\r\n      description: 'Recent projects updated',\r\n      path: ['userInfo', 'recent_projects'],\r\n      payload: updatedRecentProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesUserInfoModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesUserInfoModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesUserInfoModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { getUserInfo, updateUserInfo, UserInfo } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { identity } from 'lodash';\r\nimport { partition } from 'rxjs';\r\nimport { filter, pairwise, switchMap, debounceTime } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\n\r\nexport interface UserInfoStoreContext {\r\n  readonly isAddingFavoriteProject?: boolean;\r\n  readonly isRemovingFavoriteProject?: boolean;\r\n  readonly isRetrievingUserInfo?: boolean;\r\n  readonly isUpdatingUserInfo?: boolean;\r\n  readonly userInfo?: UserInfo;\r\n}\r\n\r\nconst defaultUserInfoServiceState: UserInfoStoreContext = {\r\n  isAddingFavoriteProject: false,\r\n  isRemovingFavoriteProject: false,\r\n  isRetrievingUserInfo: false,\r\n  isUpdatingUserInfo: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class UserInfoService extends BasicStore<UserInfoStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultUserInfoServiceState,\r\n      name: 'UserInfoService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Returns the current user preferences.\r\n   */\r\n  get userinfo() {\r\n    return this.select('userInfo');\r\n  }\r\n\r\n  private init() {\r\n    const [authenticated, notAuthenticated] = partition(\r\n      this.authenticationService.isAuthenticated(),\r\n      identity\r\n    );\r\n\r\n    // Whenever a user authenticates, retrieve their userinfo\r\n    authenticated\r\n      .pipe(\r\n        switchMap(() => this.handleRetrieveUserInfo()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the user is not or no longer authenticated, reset the userinfo\r\n    notAuthenticated.pipe(untilDestroyed(this)).subscribe(() => this.reset());\r\n\r\n    // Whenever the user info updates, send it over to the back end.\r\n    // Don't update on the initial load, or when another user logs in.\r\n    this.select('userInfo')\r\n      .pipe(\r\n        pairwise(),\r\n        filter(\r\n          ([old, current]) =>\r\n            old?.userid && current?.userid && old?.userid === current?.userid\r\n        ),\r\n        debounceTime(50),\r\n        switchMap(([, userInfo]) => this.handleUpdateUserInfo(userInfo)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  @ManagedTask('Retrieving your preferences', { isQuiet: true })\r\n  @MonitorAsync('isRetrievingUserInfo')\r\n  private async handleRetrieveUserInfo() {\r\n    const userInfo = await getUserInfo().toPromise();\r\n\r\n    this.update({\r\n      description: 'New user info available',\r\n      payload: { userInfo }\r\n    });\r\n\r\n    return userInfo;\r\n  }\r\n\r\n  @ManagedTask('Saving your preferences', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingUserInfo')\r\n  private async handleUpdateUserInfo(userInfo: UserInfo) {\r\n    return updateUserInfo(userInfo).toPromise();\r\n  }\r\n}\r\n","export * from './lib/route-reusable-strategy';\nexport * from './lib/shell';\nexport { ShellConfig } from './lib/shell-config.service';\nexport * from './lib/shell.module';\nexport { ShellService, ShellStoreContext } from './lib/shell.service';\n\n","import { Component, Inject, Optional } from '@angular/core';\r\nimport { faCopyright } from '@fortawesome/free-regular-svg-icons';\r\nimport { VersionService } from '@models4insight/version';\r\nimport { ShellConfig, ShellConfigService } from '../shell-config.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent {\r\n  readonly appName: string;\r\n  readonly copyright: number;\r\n  readonly version: string;\r\n\r\n  readonly faCopyright = faCopyright;\r\n\r\n  constructor(\r\n    versionService: VersionService,\r\n    @Optional()\r\n    @Inject(ShellConfigService)\r\n    config: ShellConfig = {}\r\n  ) {\r\n    this.appName = config.appName;\r\n    this.copyright = config.appCopyright;\r\n    this.version = versionService.appVersion;\r\n  }\r\n}\r\n","<footer class=\"footer\">\n  <div class=\"container\">\n    <div class=\"level\">\n      <div class=\"level-left\">\n        <div class=\"level-item has-text-centered has-text-white\">\n          <span translate>shell.footer.copyright</span>\n          <span class=\"icon\">\n            <fa-icon [icon]=\"faCopyright\"></fa-icon>\n          </span>\n          {{ copyright }}\n        </div>\n      </div>\n      <div class=\"level-item has-text-centered has-text-white\">\n        {{ appName }}\n      </div>\n      <div class=\"level-right\">\n        <div class=\"level-item has-text-centered has-text-white\">\n          {{ version }}\n        </div>\n      </div>\n    </div>\n  </div>\n</footer>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { faArrowCircleDown, faBook, faEllipsisV, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { AuthenticationService, Credentials } from '@models4insight/authentication';\nimport { I18nService } from '@models4insight/i18n';\nimport { Feature } from '@models4insight/permissions';\nimport { Observable } from 'rxjs';\nimport { ShellConfig, ShellConfigService } from '../shell-config.service';\nimport { ShellService } from '../shell.service';\n\n@Component({\n  selector: 'models4insight-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  readonly Feature = Feature;\n\n  readonly appLogoPath: string;\n  readonly appName: string;\n\n  readonly faArrowCircleDown = faArrowCircleDown;\n  readonly faBook = faBook;\n  readonly faEllipsisV = faEllipsisV;\n  readonly faSync = faSync;\n\n  credentials$: Observable<Credentials>;\n  currentLanguage$: Observable<string>;\n  isAppInstallable$: Observable<boolean>;\n  isUpdateAvailable$: Observable<boolean>;\n  routes$: Observable<Route[]>;\n  supportedLanguages$: Observable<string[]>;\n\n  menuHidden = true;\n\n  constructor(\n    public i18nService: I18nService,\n    private authenticationService: AuthenticationService,\n    private shellService: ShellService,\n    @Optional() @Inject(ShellConfigService) config: ShellConfig = {}\n  ) {\n    this.appLogoPath = config.appLogoPath || 'assets/m4i-logo-notext.png';\n    this.appName = config.appName;\n  }\n\n  ngOnInit() {\n    this.credentials$ = this.authenticationService.credentials();\n    this.currentLanguage$ = this.i18nService.select('currentLanguage');\n    this.isAppInstallable$ = this.shellService.select('isAppInstallable');\n    this.isUpdateAvailable$ = this.shellService.select('isUpdateAvailable');\n    this.routes$ = this.shellService.select('routes');\n    this.supportedLanguages$ = this.i18nService.select('supportedLanguages');\n  }\n\n  applyUpdate() {\n    this.shellService.applyUpdate();\n  }\n\n  triggerInstallPrompt() {\n    this.shellService.installApp();\n  }\n\n  toggleMenu() {\n    this.menuHidden = !this.menuHidden;\n  }\n\n  logout() {\n    this.authenticationService.logout();\n  }\n\n  accountManagement() {\n    this.authenticationService.accountManagement();\n  }\n\n  setLanguage(language: string) {\n    this.i18nService.setLanguage(language);\n  }\n}\n","<nav class=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\r\n  <div class=\"container\">\r\n    <div class=\"navbar-brand\">\r\n      <a class=\"navbar-item is-size-4\" routerLink=\"/\"\r\n        ><img class=\"logo\" [src]=\"appLogoPath\" [alt]=\"appName\"\r\n      /></a>\r\n      <a\r\n        role=\"button\"\r\n        class=\"navbar-burger burger\"\r\n        type=\"button\"\r\n        aria-label=\"Toggle navigation\"\r\n        data-target=\"primaryNavMenu\"\r\n        [attr.aria-expanded]=\"!menuHidden\"\r\n        [class.is-active]=\"!menuHidden\"\r\n        (click)=\"toggleMenu()\"\r\n      >\r\n        <span aria-hidden=\"true\"></span>\r\n        <span aria-hidden=\"true\"></span>\r\n        <span aria-hidden=\"true\"></span>\r\n      </a>\r\n    </div>\r\n    <div\r\n      id=\"primaryNavMenu\"\r\n      class=\"navbar-menu is-paddingless\"\r\n      [ngClass]=\"{ 'is-active': !menuHidden }\"\r\n    >\r\n      <div class=\"navbar-start\">\r\n        <div class=\"navbar-item\">\r\n          <div class=\"buttons\">\r\n            <!-- Primary navigation items -->\r\n            <ng-container *ngFor=\"let route of routes$ | async\">\r\n              <a\r\n                class=\"button is-outlined is-dark is-hidden-touch\"\r\n                [routerLink]=\"'/' + route.path\"\r\n                routerLinkActive=\"has-text-white has-background-dark\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon\r\n                    [icon]=\"route.data ? route.data['icon'] : null\"\r\n                  ></fa-icon>\r\n                </span>\r\n                <span translate>\r\n                  {{\r\n                    (route.data && route.data['title']\r\n                      ? route.data['title']\r\n                      : route.path\r\n                    )\r\n                      | titlecase\r\n                      | translate\r\n                  }}\r\n                </span>\r\n              </a>\r\n              <a\r\n                class=\"button is-outlined is-dark is-fullwidth is-hidden-desktop\"\r\n                [routerLink]=\"'/' + route.path\"\r\n                routerLinkActive=\"has-text-white has-background-dark\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon\r\n                    [icon]=\"route.data ? route.data['icon'] : null\"\r\n                  ></fa-icon>\r\n                </span>\r\n                <span translate>\r\n                  {{\r\n                    (route.data && route.data['title']\r\n                      ? route.data['title']\r\n                      : route.path\r\n                    )\r\n                      | titlecase\r\n                      | translate\r\n                  }}\r\n                </span>\r\n              </a>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"navbar-end\">\r\n        <div class=\"navbar-item\">\r\n          <div class=\"buttons\">\r\n            <ng-container *ngIf=\"isUpdateAvailable$ | async\">\r\n              <a class=\"button is-info is-hidden-touch\" (click)=\"applyUpdate()\">\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faSync\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.update</span>\r\n              </a>\r\n              <a\r\n                class=\"button is-info is-fullwidth is-hidden-desktop\"\r\n                (click)=\"applyUpdate()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faSync\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.update</span>\r\n              </a>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"isAppInstallable$ | async\">\r\n              <a\r\n                class=\"button is-primary is-hidden-touch\"\r\n                (click)=\"triggerInstallPrompt()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faArrowCircleDown\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.install</span>\r\n              </a>\r\n              <a\r\n                class=\"button is-primary is-fullwidth is-hidden-desktop\"\r\n                (click)=\"triggerInstallPrompt()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faArrowCircleDown\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.install</span>\r\n              </a>\r\n            </ng-container>\r\n            <a\r\n              class=\"button is-outlined is-dark is-hidden-touch\"\r\n              href=\"https://docs.models4insight.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span class=\"icon\"> <fa-icon [icon]=\"faBook\"></fa-icon> </span>\r\n              <span translate>shell.header.documentation</span>\r\n            </a>\r\n            <a\r\n              class=\"button is-outlined is-dark is-fullwidth is-hidden-desktop\"\r\n              href=\"https://docs.models4insight.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span class=\"icon\"> <fa-icon [icon]=\"faBook\"></fa-icon> </span>\r\n              <span translate>shell.header.documentation</span>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- Language selection -->\r\n      <ng-container *ngIf=\"supportedLanguages$ | async as supportedLanguages\">\r\n        <ng-container *ngIf=\"supportedLanguages.length > 1\">\r\n          <div class=\"navbar-item has-dropdown is-hoverable\">\r\n            <a class=\"navbar-link\">\r\n              <span>\r\n                <span translate>shell.header.language</span>\r\n                <span>&nbsp;</span>\r\n                <strong>{{ currentLanguage$ | async }}</strong>\r\n              </span>\r\n            </a>\r\n            <div class=\"navbar-dropdown\">\r\n              <a\r\n                class=\"navbar-item\"\r\n                *ngFor=\"let language of supportedLanguages$ | async\"\r\n                (click)=\"setLanguage(language)\"\r\n              >\r\n                {{ language }}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <!-- User account-->\r\n      <div\r\n        *ngIf=\"credentials$ | async as credentials\"\r\n        class=\"navbar-item has-dropdown is-hoverable\"\r\n      >\r\n        <a class=\"navbar-link\">\r\n          <span>\r\n            <span translate>shell.header.welcome</span>\r\n            <span>&nbsp;</span>\r\n            <strong>{{ credentials.username || credentials.email }}</strong>\r\n          </span>\r\n        </a>\r\n        <div class=\"navbar-dropdown\">\r\n          <a\r\n            role=\"button\"\r\n            class=\"navbar-item\"\r\n            (click)=\"accountManagement()\"\r\n            translate\r\n            >shell.header.security</a\r\n          >\r\n          <hr class=\"navbar-divider\" />\r\n          <a role=\"button\" class=\"navbar-item\" (click)=\"logout()\" translate\r\n            >shell.header.logout</a\r\n          >\r\n        </div>\r\n      </div>\r\n      <!-- Models4Insight apps-->\r\n      <div class=\"navbar-item has-dropdown is-hoverable\">\r\n        <a class=\"navbar-link is-arrowless\">\r\n          <span class=\"icon is-large is-hidden-touch\">\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n          </span>\r\n          <span class=\"is-hidden-desktop\" translate>shell.header.services</span>\r\n        </a>\r\n        <div class=\"navbar-dropdown is-right\">\r\n          <a\r\n            *models4insight-feature=\"Feature.PLATFORM_ACCESS\"\r\n            href=\"/platform\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/m4i-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Platform\r\n            </span>\r\n          </a>\r\n          <a\r\n            *models4insight-feature=\"Feature.DATA2MODEL_ACCESS\"\r\n            href=\"/data2model\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/d2m-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Data2Model\r\n            </span>\r\n          </a>\r\n          <a\r\n            *models4insight-feature=\"Feature.ANALYTICS_ACCESS\"\r\n            href=\"/consistency_metrics\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/m4i-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Analytics\r\n            </span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ShellService } from '../shell.service';\n\n@Component({\n  selector: 'models4insight-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements OnInit {\n  isActive$: Observable<boolean>;\n\n  constructor(private shellService: ShellService) {}\n\n  ngOnInit() {\n    this.isActive$ = this.shellService.select('isNavigating');\n  }\n}\n","<progress *ngIf=\"(isActive$ | async)\" class=\"progress is-link\" max=\"100\"></progress>\n","<article\n  *ngIf=\"\n    task &&\n    ((task.currentState === TaskState.RUNNING && !task.options.isQuiet) ||\n      (task.currentState == TaskState.INTERRUPTED && !task.options.isQuiet) ||\n      (task.currentState === TaskState.DONE && !task.options.clearOnSuccess) ||\n      (task.currentState === TaskState.ERROR && !task.options.clearOnError))\n  \"\n  class=\"message\"\n  [ngClass]=\"{\n    'is-success':\n      task.currentState === TaskState.RUNNING ||\n      task.currentState === TaskState.DONE,\n    'is-warning': task.currentState === TaskState.INTERRUPTED,\n    'is-danger': task.currentState === TaskState.ERROR\n  }\"\n  role=\"alert\"\n>\n  <div class=\"message-body has-background-light\">\n    <div class=\"columns is-mobile\">\n      <div class=\"column is-vcentered\">\n        <ng-container\n          *ngIf=\"\n            task.currentState === TaskState.RUNNING ||\n            task.currentState === TaskState.INTERRUPTED\n          \"\n        >\n          <div class=\"content\">{{ task.currentOperation.description }}</div>\n        </ng-container>\n        <ng-container *ngIf=\"task.currentState === TaskState.ERROR\">\n          <div class=\"content\">\n            <span>\n              <strong translate>shell.pipeline.oops</strong>\n              <span>&nbsp;</span>\n              <ng-container *ngIf=\"!task.options.showDetailedErrorDescription\">\n                <span translate>shell.pipeline.error</span>\n                {{ task.currentOperation.description | lowercase }}\n              </ng-container>\n              <ng-container *ngIf=\"task.options.showDetailedErrorDescription\">\n                {{ task.error }}\n                {{ task.error?.message }}\n              </ng-container>\n            </span>\n          </div>\n        </ng-container>\n      </div>\n      <ng-container\n        *ngIf=\"\n          task.currentState === TaskState.ERROR ||\n          task.currentState === TaskState.INTERRUPTED ||\n          task.currentState === TaskState.DONE\n        \"\n      >\n        <div class=\"column is-narrow is-vcentered\">\n          <div class=\"buttons\">\n            <ng-container *ngIf=\"task.currentState === TaskState.ERROR\">\n              <a\n                class=\"button is-danger\"\n                (click)=\"report()\"\n                [ngClass]=\"{\n                  'is-loading': isReporting,\n                  'is-static': hasBeenReported\n                }\"\n              >\n                <ng-container *ngIf=\"!hasBeenReported\">\n                  <span class=\"icon\">\n                    <fa-icon [icon]=\"faBug\"></fa-icon>\n                  </span>\n                  <span translate>shell.pipeline.report</span>\n                </ng-container>\n                <ng-container *ngIf=\"hasBeenReported\">\n                  <span translate>shell.pipeline.thanks</span>\n                </ng-container>\n              </a>\n            </ng-container>\n            <ng-container *ngIf=\"task.currentState === TaskState.INTERRUPTED\">\n              <ng-container\n                *ngIf=\"task.currentNavigationContext as navigationContext\"\n              >\n                <a class=\"button is-warning\" (click)=\"navigate()\">\n                  <span class=\"icon\">\n                    <fa-icon [icon]=\"faArrowRight\"></fa-icon>\n                  </span>\n                </a>\n              </ng-container>\n            </ng-container>\n            <a class=\"delete\" (click)=\"clear()\"></a>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"task.currentState === TaskState.RUNNING\">\n      <ng-container *ngIf=\"task.operations.length > 1\">\n        <progress\n          class=\"progress is-success\"\n          [value]=\"(task.currentOperation.index / task.operations.length) * 100\"\n          max=\"100\"\n        >\n        </progress>\n      </ng-container>\n      <ng-container *ngIf=\"task.operations.length === 1\">\n        <progress class=\"progress is-success\" max=\"100\"></progress>\n      </ng-container>\n    </ng-container>\n  </div>\n</article>\n","import { Component, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { faArrowRight, faBug } from '@fortawesome/free-solid-svg-icons';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { StoreService } from '@models4insight/redux';\r\nimport { reportError } from '@models4insight/repository';\r\nimport { TaskContext, TaskManagerService, TaskState } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { VersionService } from '@models4insight/version';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap } from 'rxjs/operators';\r\nimport { ShellConfig, ShellConfigService } from '../../shell-config.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-pipeline-task',\r\n  templateUrl: './pipeline-task.component.html',\r\n  styleUrls: ['./pipeline-task.component.scss']\r\n})\r\nexport class PipelineTaskComponent implements OnInit, OnDestroy {\r\n  readonly TaskState = TaskState;\r\n\r\n  readonly faArrowRight = faArrowRight;\r\n  readonly faBug = faBug;\r\n\r\n  private readonly report$: Subject<void> = new Subject<void>();\r\n\r\n  isReporting = false;\r\n  hasBeenReported = false;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private taskManager: TaskManagerService,\r\n    private storeService: StoreService,\r\n    private versionService: VersionService,\r\n    @Optional() @Inject(ShellConfigService) private config: ShellConfig = {}\r\n  ) {}\r\n\r\n  @Input() task: TaskContext;\r\n\r\n  ngOnInit() {\r\n    this.report$\r\n      .pipe(\r\n        exhaustMap(() => this.handleReportError()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  clear() {\r\n    this.taskManager.clearTask(this.task.id);\r\n  }\r\n\r\n  navigate() {\r\n    const { route, relativeTo } = this.task.currentNavigationContext;\r\n    this.router\r\n      .navigate(route, { relativeTo: relativeTo })\r\n      .then(() => this.clear());\r\n  }\r\n\r\n  report() {\r\n    this.report$.next();\r\n  }\r\n\r\n  private async handleReportError() {\r\n    this.isReporting = true;\r\n\r\n    const username = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    try {\r\n      await reportError(\r\n        this.config.appName,\r\n        this.versionService.appVersion,\r\n        this.task.error,\r\n        username,\r\n        this.storeService.snapshot\r\n      ).toPromise();\r\n    } finally {\r\n      this.hasBeenReported = true;\r\n      this.isReporting = false;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {\n  TaskContext,\n  TaskManagerService,\n  TaskState\n} from '@models4insight/task-manager';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'models4insight-pipeline',\n  templateUrl: './pipeline.component.html',\n  styleUrls: ['./pipeline.component.css']\n})\nexport class PipelineComponent implements OnInit {\n  tasks$: Observable<TaskContext[]>;\n\n  constructor(private taskManager: TaskManagerService) {}\n\n  ngOnInit() {\n    // Select the tasks from the task manager that are not pending\n    this.tasks$ = this.taskManager\n      .select('tasks')\n      .pipe(\n        map(tasks =>\n          Object.values(tasks).filter(\n            task => task.currentState !== TaskState.PENDING\n          )\n        )\n      );\n  }\n}\n","<models4insight-pipeline-task\r\n  *ngFor=\"let task of (tasks$ | async)\"\r\n  [task]=\"task\"\r\n></models4insight-pipeline-task>\r\n","import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void {}\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig || future.data.reuse;\n  }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ShellConfig {\r\n  readonly appLogoPath?: string;\r\n  readonly appName?: string;\r\n  readonly appCopyright?: number;\r\n}\r\n\r\nexport const ShellConfigService = new InjectionToken<ShellConfig>(\r\n  'ShellConfig'\r\n);\r\n","import { Component, HostListener } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { ShellService } from './shell.service';\r\n\r\nconst log = new Logger('ShellComponent');\r\n\r\n@Component({\r\n  selector: 'models4insight-shell',\r\n  templateUrl: './shell.component.html',\r\n  styleUrls: ['./shell.component.scss']\r\n})\r\nexport class ShellComponent {\r\n  constructor(private shellService: ShellService) {}\r\n\r\n  /** Scroll to the top of the page whenever a new component is loaded */\r\n  onActivate(): void {\r\n    const scrollToTop = window.setInterval(() => {\r\n      const pos = window.pageYOffset;\r\n      if (pos > 0) {\r\n        window.scrollTo(0, pos - 20); // how far to scroll on each step\r\n      } else {\r\n        window.clearInterval(scrollToTop);\r\n      }\r\n    }, 16);\r\n  }\r\n  \r\n  /**\r\n   * Triggers a check whether the current authentication token is still valid whenever the user (re-)focusses the shell\r\n   */\r\n  @HostListener('window:focus')\r\n  onFocus(): void {\r\n    this.shellService.updateToken();\r\n  }\r\n}\r\n","<models4insight-header></models4insight-header>\r\n<div class=\"sticky\" [style.width]=\"'100%'\">\r\n  <models4insight-loading></models4insight-loading>\r\n  <models4insight-pipeline></models4insight-pipeline>\r\n</div>\r\n<div class=\"is-tall-container has-background-light\">\r\n  <router-outlet (activate)=\"onActivate()\"></router-outlet>\r\n</div>\r\n<models4insight-footer></models4insight-footer>\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouteReuseStrategy, RouterModule } from '@angular/router';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { I18nService } from '@models4insight/i18n';\r\nimport { FeatureModule } from '@models4insight/permissions';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport enUS from '../translations/en-US.json';\r\nimport { FooterComponent } from './footer/footer.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { LoadingComponent } from './loading/loading.component';\r\nimport { PipelineTaskComponent } from './pipeline/pipeline-task/pipeline-task.component';\r\nimport { PipelineComponent } from './pipeline/pipeline.component';\r\nimport { RouteReusableStrategy } from './route-reusable-strategy';\r\nimport { ShellConfig, ShellConfigService } from './shell-config.service';\r\nimport { ShellComponent } from './shell.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FeatureModule,\r\n    FontAwesomeModule,\r\n    RouterModule,\r\n    TranslateModule.forChild(),\r\n  ],\r\n  declarations: [\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    ShellComponent,\r\n    LoadingComponent,\r\n    PipelineComponent,\r\n    PipelineTaskComponent\r\n  ]\r\n})\r\nexport class ShellModule {\r\n  constructor(\r\n    private i18nService: I18nService,\r\n  ) {\r\n    this.i18nService.setTranslation('en-US', enUS);\r\n  }\r\n\r\n  static forRoot(\r\n    config: ShellConfig = {}\r\n  ): ModuleWithProviders<ShellModule> {\r\n    return {\r\n      ngModule: ShellModule,\r\n      providers: [\r\n        {\r\n          provide: ShellConfigService,\r\n          useValue: config\r\n        },\r\n        {\r\n          provide: RouteReuseStrategy,\r\n          useClass: RouteReusableStrategy\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Event as RouterNavigationEvent, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Route, Router } from '@angular/router';\r\nimport { SwUpdate } from '@angular/service-worker';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, ConnectableObservable, fromEvent, Subject } from 'rxjs';\r\nimport { concatMap, exhaustMap, filter, pairwise, publish, switchMap, tap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('ShellService');\r\n\r\n/**\r\n * The BeforeInstallPromptEvent is fired at the Window.onbeforeinstallprompt handler\r\n * before a user is prompted to \"install\" a web site to a home screen on mobile.\r\n *\r\n * @deprecated Only supported on Chrome and Android Webview.\r\n */\r\ninterface BeforeInstallPromptEvent extends Event {\r\n  /**\r\n   * Returns an array of DOMString items containing the platforms on which the event was dispatched.\r\n   * This is provided for user agents that want to present a choice of versions to the user such as,\r\n   * for example, \"web\" or \"play\" which would allow the user to chose between a web version or\r\n   * an Android version.\r\n   */\r\n  readonly platforms: Array<string>;\r\n\r\n  /**\r\n   * Returns a Promise that resolves to a DOMString containing either \"accepted\" or \"dismissed\".\r\n   */\r\n  readonly userChoice: Promise<{\r\n    outcome: 'accepted' | 'dismissed';\r\n    platform: string;\r\n  }>;\r\n\r\n  /**\r\n   * Allows a developer to show the install prompt at a time of their own choosing.\r\n   * This method returns a Promise.\r\n   */\r\n  prompt(): Promise<void>;\r\n}\r\n\r\nexport interface ShellStoreContext {\r\n  readonly isAppInstallable?: boolean;\r\n  readonly isNavigating?: boolean;\r\n  readonly isUpdateAvailable?: boolean;\r\n  readonly previousRoute?: string;\r\n  readonly routes?: Route[];\r\n}\r\n\r\nexport const shellServiceDefaultState: ShellStoreContext = {\r\n  isAppInstallable: false,\r\n  isNavigating: false,\r\n  isUpdateAvailable: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellService extends BasicStore<ShellStoreContext>\r\n  implements OnDestroy {\r\n  private readonly applyUpdate$: Subject<void> = new Subject<void>();\r\n  private readonly installApp$: Subject<void> = new Subject<void>();\r\n  private readonly updateToken$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly router: Router,\r\n    private readonly swUpdate: SwUpdate,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: shellServiceDefaultState,\r\n      name: 'ShellService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  private init() {\r\n    // These are the top level routes of the application which are not configured to be hidden and are not redirects\r\n    const routes = this.router.config.filter(\r\n      route =>\r\n        route.redirectTo === undefined && !(route.data && route.data.hidden)\r\n    );\r\n\r\n    // Update the store with the routes found\r\n    this.update({\r\n      description: 'New top level routes available',\r\n      payload: { routes }\r\n    });\r\n\r\n    // Whenever update token fires, update the authentication token\r\n    this.updateToken$\r\n      .pipe(\r\n        exhaustMap(() => this.authenticationService.updateToken()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(() => log.debug('Authentication token successfully updated'));\r\n\r\n    // Intercept router navigation events\r\n    this.router.events\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(event => this.navigationInterceptor(event));\r\n\r\n    // Track the previous page route for go back functionality\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        pairwise(),\r\n        concatMap(([previousRoute, currentRoute]) =>\r\n          this.handleTrackPreviousRoute(\r\n            previousRoute as NavigationEnd,\r\n            currentRoute as NavigationEnd\r\n          )\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Handle service worker triggers if the service worker is enabled\r\n    if (this.swUpdate.isEnabled) {\r\n      // Check whether an update is available\r\n      this.swUpdate.available.pipe(untilDestroyed(this)).subscribe(event =>\r\n        this.update({\r\n          description: 'Service worker update available',\r\n          payload: {\r\n            isUpdateAvailable: !!event\r\n          }\r\n        })\r\n      );\r\n\r\n      // When the user applies an update, activate the update and reload the page\r\n      this.applyUpdate$\r\n        .pipe(\r\n          exhaustMap(() => this.swUpdate.activateUpdate()),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(() => document.location.reload());\r\n\r\n      // Check for updates on startup\r\n      this.swUpdate.checkForUpdate();\r\n\r\n      const beforeInstallPrompt$ = fromEvent<BeforeInstallPromptEvent>(\r\n        window,\r\n        'beforeinstallprompt'\r\n      ).pipe(publish()) as ConnectableObservable<BeforeInstallPromptEvent>;\r\n\r\n      beforeInstallPrompt$\r\n        .pipe(\r\n          tap(() =>\r\n            this.update({\r\n              description: 'App is installable',\r\n              payload: {\r\n                isAppInstallable: true\r\n              }\r\n            })\r\n          ),\r\n          switchMap(event => event.userChoice),\r\n          tap(() =>\r\n            this.update({\r\n              description: 'User decided whether or not to install the app',\r\n              payload: {\r\n                isAppInstallable: false\r\n              }\r\n            })\r\n          ),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(decision =>\r\n          log.debug(`App install outcome: ${decision.outcome}`)\r\n        );\r\n\r\n      // Prompt the user to install the app\r\n      combineLatest([beforeInstallPrompt$, this.installApp$])\r\n        .pipe(\r\n          exhaustMap(([event]) => event.prompt()),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(() => log.debug('User prompted to intall the app'));\r\n\r\n      beforeInstallPrompt$.connect();\r\n    }\r\n  }\r\n\r\n  applyUpdate() {\r\n    this.applyUpdate$.next();\r\n  }\r\n\r\n  installApp() {\r\n    this.installApp$.next();\r\n  }\r\n\r\n  updateToken() {\r\n    this.updateToken$.next();\r\n  }\r\n\r\n  private async handleTrackPreviousRoute(\r\n    previousRoute: NavigationEnd,\r\n    currentRoute: NavigationEnd\r\n  ) {\r\n    const [previousPath] = previousRoute.urlAfterRedirects.split('?'),\r\n      [currentPath] = currentRoute.urlAfterRedirects.split('?');\r\n\r\n    if (previousPath === currentPath) return;\r\n\r\n    this.update({\r\n      description: 'New previous route available',\r\n      payload: { previousRoute: previousRoute.urlAfterRedirects }\r\n    });\r\n  }\r\n\r\n  private navigationInterceptor(event: RouterNavigationEvent) {\r\n    if (event instanceof NavigationStart) {\r\n      this.update({\r\n        description: 'Navigation start',\r\n        payload: {\r\n          isNavigating: true\r\n        }\r\n      });\r\n    } else if (\r\n      event instanceof NavigationEnd ||\r\n      event instanceof NavigationCancel ||\r\n      event instanceof NavigationError\r\n    ) {\r\n      this.update({\r\n        description: 'Navigation complete',\r\n        payload: {\r\n          isNavigating: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Route, Routes } from '@angular/router';\r\nimport { AuthenticationGuard } from '@models4insight/authentication';\r\nimport { ShellComponent } from './shell.component';\r\n\r\n/**\r\n * Provides helper methods to create routes.\r\n */\r\nexport class Shell {\r\n  /**\r\n   * Creates routes using the shell component and authentication.\r\n   * @param routes The routes to add.\r\n   * @return The new route using shell as the base.\r\n   */\r\n  static childRoutes(routes: Routes): Route {\r\n    return {\r\n      path: '',\r\n      component: ShellComponent,\r\n      children: routes,\r\n      canActivate: [AuthenticationGuard],\r\n      // Reuse ShellComponent instance when navigating between child views\r\n      data: { reuse: true }\r\n    };\r\n  }\r\n}\r\n","export * from './lib/decorators';\nexport * from './lib/task-manager.module';\nexport * from './lib/task-manager.service';\n\n","import { throwError } from 'rxjs';\r\nimport { TaskManagerModule } from './task-manager.module';\r\nimport { TaskManagerService, TaskOptions } from './task-manager.service';\r\n\r\nfunction createOperation(original: any, args: any, thisArg: any) {\r\n  try {\r\n    return original.apply(thisArg, args);\r\n  } catch (e) {\r\n    return throwError(e);\r\n  }\r\n}\r\n\r\nfunction getTaskManagerService(): TaskManagerService {\r\n  if (!TaskManagerModule.injector) {\r\n    throw new Error(\r\n      'Tried running a managed task while the TaskManager module was not loaded. Please make sure the Task Manager module is imported.'\r\n    );\r\n  }\r\n  return TaskManagerModule.injector.get(TaskManagerService);\r\n}\r\n\r\n/**\r\n * Method decorator for functions returning an observable.\r\n * Registers the observable returned by the function as a managed task with the Task Manager.\r\n * Returns the executable of the Task instead.\r\n *\r\n * Use this decorator whenever you need to define a task with a single step.\r\n */\r\nexport function ManagedTask(description?: string, options?: TaskOptions) {\r\n  return function(\r\n    target: Object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor\r\n  ) {\r\n    const original = descriptor.value;\r\n    descriptor.value = async function(...args: any[]) {\r\n      const taskManagerService = getTaskManagerService();\r\n\r\n      const operation = {\r\n        operation: createOperation(original, args, this),\r\n        description: description\r\n      };\r\n\r\n      const task = taskManagerService.createTask([operation], options);\r\n\r\n      const executable = await task.getExecutable();\r\n\r\n      return executable.toPromise();\r\n    };\r\n    \r\n    return descriptor;\r\n  };\r\n}\r\n","import { Injector, NgModule, SkipSelf, Optional } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class TaskManagerModule {\r\n  static injector: Injector;\r\n\r\n  constructor(\r\n    injector: Injector,\r\n    @Optional() @SkipSelf() parentModule: TaskManagerModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'TaskManagerModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    TaskManagerModule.injector = injector;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { EMPTY, from, Observable, of, range, Subject, zip, race } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  shareReplay,\r\n  switchMap,\r\n  switchMapTo,\r\n  takeLast,\r\n  takeUntil,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { TaskManagerModule } from './task-manager.module';\r\n\r\nconst log = new Logger('TaskManager');\r\n\r\nexport interface OperationContext {\r\n  readonly operation: Observable<any> | Promise<any>;\r\n  readonly description?: string;\r\n}\r\n\r\nexport interface CurrentOperationContext {\r\n  readonly description?: string;\r\n  readonly index?: number;\r\n}\r\n\r\nexport interface TaskNavigationContext {\r\n  readonly relativeTo?: ActivatedRoute;\r\n  readonly route: string[];\r\n}\r\n\r\nexport interface TaskOptions {\r\n  /**\r\n   * Whether or not to clear the task if it completes with an error. Defaults to false.\r\n   */\r\n  readonly clearOnError?: boolean;\r\n  /**\r\n   * Whether or not to clear the task if it completes successfully. Defaults to true.\r\n   */\r\n  readonly clearOnSuccess?: boolean;\r\n  /**\r\n   * Whether or not to hide the progress bar while the task is in progress. Defaults to false.\r\n   */\r\n  readonly isQuiet?: boolean;\r\n  /**\r\n   * When set, navigate to the given route if the task completes with an error\r\n   */\r\n  readonly navigateOnError?: TaskNavigationContext;\r\n  /**\r\n   * When set, navigate to the given route if the task completes successfully\r\n   */\r\n  readonly navigateOnSuccess?: TaskNavigationContext;\r\n  /**\r\n   * Whether or not to show the original error message when an error occurs. Defaults to false.\r\n   */\r\n  readonly showDetailedErrorDescription?: boolean;\r\n}\r\n\r\nexport interface TaskContext {\r\n  readonly currentOperation?: CurrentOperationContext;\r\n  readonly currentState?: TaskState;\r\n  readonly currentNavigationContext?: TaskNavigationContext;\r\n  readonly error?: Error;\r\n  readonly id?: string;\r\n  readonly operations?: OperationContext[];\r\n  readonly options?: TaskOptions;\r\n}\r\n\r\nexport interface TaskManagerStoreContext {\r\n  readonly tasks?: Dictionary<TaskContext>;\r\n}\r\n\r\nexport enum TaskState {\r\n  PENDING = 'pending',\r\n  RUNNING = 'running',\r\n  DONE = 'done',\r\n  ERROR = 'error',\r\n  INTERRUPTED = 'interrupted'\r\n}\r\n\r\nexport const defaultTaskOptions: TaskOptions = {\r\n  clearOnError: false,\r\n  clearOnSuccess: true,\r\n  isQuiet: false,\r\n  showDetailedErrorDescription: false\r\n};\r\n\r\nexport class Task {\r\n  private readonly interrupt$ = new Subject<void>();\r\n\r\n  constructor(\r\n    public id: string,\r\n    private managedBy: TaskManagerService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async addOperation(operation: OperationContext) {\r\n    const operations = await this.managedBy.get(\r\n      ['tasks', this.id, 'operations'],\r\n      { includeFalsy: true }\r\n    );\r\n\r\n    this.managedBy.update({\r\n      description: `Added an operation for task ${this.id}`,\r\n      path: ['tasks', this.id, 'operations'],\r\n      payload: [...operations, operation]\r\n    });\r\n  }\r\n\r\n  /** Interrupts the task if it is currently running */\r\n  interrupt() {\r\n    this.interrupt$.next();\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} was interrupted`,\r\n      path: ['tasks', this.id, 'currentState'],\r\n      payload: TaskState.INTERRUPTED\r\n    });\r\n  }\r\n\r\n  /** Returns an executable of this task */\r\n  async getExecutable() {\r\n    const task = await this.managedBy.get(['tasks', this.id]);\r\n\r\n    const onStart = () =>\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} started`,\r\n        path: ['tasks', task.id, 'currentState'],\r\n        payload: TaskState.RUNNING\r\n      });\r\n\r\n    const pipeline = zip(\r\n      range(0, task.operations.length),\r\n      from(task.operations)\r\n    ).pipe(\r\n      // Execute each operation sequentially. Ensure each task completes by only taking at most one emission from the stream\r\n      concatMap(([index, operation]) =>\r\n        this.handleOperation(task.id, operation, index)\r\n      ),\r\n      takeLast(1)\r\n    );\r\n\r\n    const onComplete = () => {\r\n      this.managedBy.update({\r\n        description: `Task ${this.id} completed`,\r\n        path: ['tasks', this.id, 'currentState'],\r\n        payload: TaskState.DONE\r\n      });\r\n      this.finalize(task);\r\n    };\r\n\r\n    const onInterrupt = () => {\r\n      this.managedBy.update({\r\n        description: `Task ${this.id} interrupted`,\r\n        path: ['tasks', this.id, 'currentState'],\r\n        payload: TaskState.INTERRUPTED\r\n      });\r\n    };\r\n\r\n    const onError = (error: Error) => {\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} encountered an error`,\r\n        path: ['tasks', task.id, 'error'],\r\n        payload: error\r\n      });\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} completed with an error`,\r\n        path: ['tasks', task.id, 'currentState'],\r\n        payload: TaskState.ERROR\r\n      });\r\n      return EMPTY;\r\n    };\r\n\r\n    const interrupt = this.interrupt$.pipe(tap(onInterrupt));\r\n\r\n    const tasks = of(task).pipe(\r\n      tap(onStart),\r\n      switchMapTo(pipeline),\r\n      tap(onComplete),\r\n      catchError(onError)\r\n    );\r\n\r\n    const executable = race(tasks, interrupt);\r\n\r\n    return executable;\r\n  }\r\n\r\n  /**\r\n   * Can be used to override the description of the current operation\r\n   */\r\n  set currentDescription(description: string) {\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} description updated`,\r\n      path: ['tasks', this.id, 'currentOperation', 'description'],\r\n      payload: description\r\n    });\r\n  }\r\n\r\n  set currentNavigationContext(context: TaskNavigationContext) {\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} navigation context updated`,\r\n      path: ['tasks', this.id, 'currentNavigationContext'],\r\n      payload: context\r\n    });\r\n  }\r\n\r\n  private finalize(task: TaskContext) {\r\n    // When the task completed successfully...\r\n    if (task.currentState === TaskState.DONE) {\r\n      if (task.options.navigateOnSuccess) {\r\n        this.navigate(task.options.navigateOnSuccess);\r\n      }\r\n    }\r\n    // When the task completed with an error...\r\n    if (task.currentState === TaskState.ERROR) {\r\n      if (task.options.navigateOnError) {\r\n        this.navigate(task.options.navigateOnError);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleOperation(\r\n    taskId: string,\r\n    operation: OperationContext,\r\n    index: number\r\n  ) {\r\n    this.managedBy.update({\r\n      description: 'Start executing operation',\r\n      path: ['tasks', taskId, 'currentOperation'],\r\n      payload: {\r\n        description: operation.description || `Step ${index}`,\r\n        index: index\r\n      }\r\n    });\r\n    return of(1).pipe(\r\n      tap(() => log.time(taskId, operation.description)),\r\n      switchMap(() => operation.operation),\r\n      tap(() => log.timeEnd(taskId, operation.description))\r\n    );\r\n  }\r\n\r\n  private navigate(context: TaskNavigationContext) {\r\n    this.router.navigate(context.route, { relativeTo: context.relativeTo });\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: TaskManagerModule\r\n})\r\nexport class TaskManagerService extends BasicStore<TaskManagerStoreContext> {\r\n  constructor(private router: Router, storeService: StoreService) {\r\n    super({ name: 'TaskManagerService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Clean up completed tasks that can be removed from the queue\r\n    this.watch('tasks')\r\n      .pipe(\r\n        concatMap(tasks => this.handleRemoveCompletedTasks(tasks)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  createTask(\r\n    operations: OperationContext[] = [],\r\n    options: TaskOptions = {}\r\n  ): Task {\r\n    const taskId = uuid();\r\n\r\n    this.update({\r\n      description: `Task ${taskId} created`,\r\n      path: ['tasks', taskId],\r\n      payload: {\r\n        currentState: TaskState.PENDING,\r\n        id: taskId,\r\n        operations: operations,\r\n        options: { ...defaultTaskOptions, ...options }\r\n      }\r\n    });\r\n\r\n    return new Task(taskId, this, this.router);\r\n  }\r\n\r\n  clearTask(taskId: string) {\r\n    this.delete({\r\n      description: `Cleared task ${taskId}`,\r\n      path: ['tasks', taskId]\r\n    });\r\n  }\r\n\r\n  private async handleRemoveCompletedTasks(tasks: TaskContext[]) {\r\n    for (const task of tasks) {\r\n      const clearAfterError =\r\n          task.currentState === TaskState.ERROR && task.options.clearOnError,\r\n        clearAfterSuccess =\r\n          task.currentState === TaskState.DONE && task.options.clearOnSuccess;\r\n\r\n      if (clearAfterError || clearAfterSuccess) {\r\n        this.clearTask(task.id);\r\n      }\r\n    }\r\n  }\r\n}\r\n","export * from './lib/classes';\r\nexport * from './lib/functions';\r\nexport * from './lib/rxjs-operators';\r\nexport * from './lib/types';","import MultiMap from 'mnemonist/multi-map';\r\n\r\n/**\r\n * A multi-map implementation that also maintains a shadow copy mapping all values to their respective keys.\r\n */\r\nexport class BidirectionalMultiMap<K, V> {\r\n  readonly mapping: MultiMap<K, V>;\r\n  readonly inverse: MultiMap<V, K>;\r\n\r\n  constructor(container: ArrayConstructor | SetConstructor = Array) {\r\n    this.mapping = new MultiMap(container);\r\n    this.inverse = new MultiMap(container);\r\n  }\r\n\r\n  clear() {\r\n    this.inverse.clear();\r\n    this.mapping.clear();\r\n  }\r\n\r\n  delete(key: K) {\r\n    for (const value of this.mapping.get(key) ?? []) {\r\n      this.inverse.remove(value, key);\r\n    }\r\n    return this.mapping.delete(key);\r\n  }\r\n\r\n  remove(key: K, value: V) {\r\n    this.inverse.remove(value, key);\r\n    return this.mapping.remove(key, value);\r\n  }\r\n\r\n  set(key: K, value: V) {\r\n    this.inverse.set(value, key);\r\n    return this.mapping.set(key, value);\r\n  }\r\n}\r\n","import { isEqual, uniqWith } from 'lodash';\r\n\r\nexport class ComplexSet<T> {\r\n  private array: T[] = [];\r\n\r\n  /**\r\n   * Represents a `Set` with a custom comparator.\r\n   * This allows you to create sets of complex objects.\r\n   * The `isEqual` method from `lodash` is used by default.\r\n   *\r\n   * **IMPORTANT**: For primitive values, the built-in `Set` object is more efficient.\r\n   */\r\n  constructor(\r\n    /**\r\n     * This method determines whether or not an item is already present in the set.\r\n     * Defaults to the `isEqual` method from `lodash`.\r\n     */\r\n    private comparator: (item: T, otherItem: T) => boolean = isEqual\r\n  ) {}\r\n\r\n  /**\r\n   * Adds one or more additional values to the set.\r\n   * @param value the value(s) which should be added to the set.\r\n   */\r\n  add(value: T | T[]) {\r\n    if (!Array.isArray(value)) {\r\n      value = [value];\r\n    }\r\n    this.array = uniqWith([...this.array, ...value], this.comparator);\r\n  }\r\n\r\n  /**\r\n   * Returns the set as an an array of unique items\r\n   */\r\n  get items() {\r\n    return this.array;\r\n  }\r\n}\r\n","/** Custom error base class that allows instanceof checking */\r\nexport abstract class CustomError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    // Set the prototype explicitly\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n","export * from './bidirectional-multi-map';\r\nexport * from './complex-set';\r\nexport * from './custom-error';\r\nexport * from './stream';\r\n","import { isEqual } from 'lodash';\r\n\r\n/**\r\n * Sequence based on an Iterator that supports sequential operations similar to an `Array`.\r\n *\r\n * To perform a computation, stream operations are composed into a stream pipeline.\r\n * A stream pipeline consists of:\r\n *\r\n * - A single source (e.g. a `Function` that supplies an `Iterable`, or a `Generator` function)\r\n * - Zero or more intermediate operations (which transform the `Stream` into another `Stream`)\r\n * - A single terminal operation (which produces a result or side-effect)\r\n *\r\n * It is not required to end a stream pipeline with a terminal operation provided by this class.\r\n * A `Stream` can be consumed like any regular `Iterable`, e.g. using a `for...of` loop.\r\n *\r\n * Streams are lazy.\r\n * Computation on the source data is only performed when the terminal operation is initiated.\r\n * Source elements are consumed only as needed.\r\n */\r\nexport class Stream<T> implements Iterable<T> {\r\n  public [Symbol.iterator]: () => Iterator<T>;\r\n\r\n  constructor(source: () => Iterator<T>) {\r\n    this[Symbol.iterator] = source;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of all elements of the given `source`.\r\n   * @param source The source of the stream.\r\n   */\r\n  static from<T>(source: Iterable<T>): Stream<T> {\r\n    function* from() {\r\n      yield* source;\r\n    }\r\n    return new Stream<T>(from);\r\n  }\r\n\r\n  /**\r\n   * Reduces the elements of this stream using the given `collector`.\r\n   * @param collector the `Function` describing the reduction\r\n   */\r\n  collect<R>(collector: (stream: this) => R): R {\r\n    return collector(this);\r\n  }\r\n\r\n  /**\r\n   * Returns a lazily concatenated `Stream` whose elements are all the elements of this stream followed by all the elements of the given `iterables`.\r\n   * @param iterables The iterables that should be concatenated to this stream.\r\n   */\r\n  concat<R>(...iterables: Iterable<R>[]) {\r\n    function* concat(base: Iterable<T>) {\r\n      yield* base;\r\n      for (const iterable of iterables) {\r\n        yield* iterable;\r\n      }\r\n    }\r\n    return new Stream(() => concat(this));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the unique elements of this stream.\r\n   * @param comparator Function that returns `true` if two stream elements are the same. Defaults to `isEqual`.\r\n   */\r\n  distinct(comparator: (item: T, other: T) => boolean = isEqual) {\r\n    function* distinct(iterable: Iterable<T>) {\r\n      const seenItems = [];\r\n      for (const item of iterable) {\r\n        const hasBeenSeen = seenItems.some(seen => comparator(item, seen));\r\n        if (!hasBeenSeen) {\r\n          yield item;\r\n          seenItems.push(item);\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => distinct(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether all elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  every(predicate: (item?: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (!predicate(item)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the elements of this stream that match the given `predicate`.\r\n   * @param predicate The filter condition.\r\n   */\r\n  filter(predicate: (item?: T) => boolean): Stream<T> {\r\n    function* filter(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        if (predicate(item)) {\r\n          yield item;\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => filter(this));\r\n  }\r\n\r\n  /**\r\n   * Returns the first element of this stream that matches the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  find(predicate: (item: T) => boolean): T {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return item;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the first element of this stream.\r\n   */\r\n  first(): T {\r\n    for (const item of this) {\r\n      return item;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the results of replacing each element of this stream with the contents of a mapped `Iterable` produced by applying the provided `projection` to each element.\r\n   * @param projection The function to apply to each element of this stream.\r\n   */\r\n  flatMap<R>(projection: (item?: T) => Iterable<R>): Stream<R> {\r\n    function* map(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        yield* projection(item);\r\n      }\r\n    }\r\n    return new Stream(() => map(this));\r\n  }\r\n\r\n  /**\r\n   * Performs an action for each element of this stream.\r\n   * @param effect The action to perform.\r\n   */\r\n  forEach(effect: (item?: T) => void) {\r\n    for (const item of this) {\r\n      effect(item);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retruns a `Stream` consisting of the results of applying the given `projection` to the elements of this stream.\r\n   * @param projection The function to apply to each element of this stream.\r\n   */\r\n  map<R>(projection: (item?: T) => R): Stream<R> {\r\n    function* map(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        yield projection(item);\r\n      }\r\n    }\r\n    return new Stream(() => map(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether no elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  none(predicate: (item: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Accumulates the elements of this stream.\r\n   * @param accumulator The function that accumulates the elements of the stream.\r\n   * @param startWith The starting value of the accumulation.\r\n   */\r\n  reduce<R>(accumulator: (acc: R, item: T) => R, startWith: R): R {\r\n    let accumulation = startWith;\r\n    for (const item of this) {\r\n      accumulation = accumulator(accumulation, item);\r\n    }\r\n    return accumulation;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the remaining elements of this stream after discarding the first given `number` of elements.\r\n   * @param number The number of elements to skip.\r\n   */\r\n  skip(number: number): Stream<T> {\r\n    function* skip(iterable: Iterable<T>) {\r\n      let i = 0;\r\n      for (const item of iterable) {\r\n        if (i >= number) {\r\n          yield item;\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n    return new Stream(() => skip(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether any elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  some(predicate: (item?: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the first given `number` of elements of this stream.\r\n   * @param number The number of elements to take.\r\n   */\r\n  take(number: number): Stream<T> {\r\n    function* take(iterable: Iterable<T>) {\r\n      let i = 0;\r\n      for (const item of iterable) {\r\n        yield item;\r\n        i++;\r\n        if (i >= number) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => take(number > 0 ? this : []));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the first elements of this stream that match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  takeUntil(predicate: (item?: T) => boolean): Stream<T> {\r\n    function* takeUntil(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        if (predicate(item)) {\r\n          break;\r\n        }\r\n        yield item;\r\n      }\r\n    }\r\n    return new Stream(() => takeUntil(this));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the elements of this stream, additionally performing the given `effect` on each element.\r\n   * @param effect The effect to perform.\r\n   */\r\n  tap(effect: (item?: T) => void) {\r\n    function* tap(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        effect(item);\r\n        yield item;\r\n      }\r\n    }\r\n    return new Stream(() => tap(this));\r\n  }\r\n\r\n  /**\r\n   * Retruns an `Array` containing the elements of this stream.\r\n   */\r\n  toArray(): T[] {\r\n    return Array.from(this);\r\n  }\r\n}\r\n","export function b64ToB64url(base64: string) {\r\n  return base64\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=/g, '');\r\n}\r\n","export function b64toBlob(base64: string, contentType = '', sliceSize = 512) {\r\n  const byteCharacters = atob(base64);\r\n  const byteArrays = [];\r\n\r\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n    const byteNumbers = new Array(slice.length);\r\n    for (let i = 0; i < slice.length; i++) {\r\n      byteNumbers[i] = slice.charCodeAt(i);\r\n    }\r\n\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    byteArrays.push(byteArray);\r\n  }\r\n\r\n  const blob = new Blob(byteArrays, { type: contentType });\r\n  return blob;\r\n}\r\n","export function b64urlToB64(base64url: string) {\r\n  return base64url.replace(/_/g, '/').replace(/-/g, '+');\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Helper function to create an object URL for the given function.\r\n * Useful for executing the given function as a web worker.\r\n * Use this as a workaround only if native web worker compilation with Angular is not available, e.g. in libraries.\r\n *\r\n * @param workerFunction The function for which to create an object url\r\n */\r\nexport function buildWorkerBlobURL(workerFunction: Function): string {\r\n  const functionName = workerFunction.name;\r\n\r\n  // Make sure code starts with \"function()\"\r\n  // Chrome, Firefox: \"[`functionName`](){...}\", Safari: \"function [`functionName`](){...}\"\r\n  // we need an anonymous function: \"function() {...}\"\r\n  const functionAsString = workerFunction.toString().replace(/^function +/, '');\r\n\r\n  // Convert to anonymous function\r\n  const anonymousFunctionString = functionAsString.replace(\r\n    functionName + '()',\r\n    'function()'\r\n  );\r\n\r\n  // Self executing\r\n  const workerString = '(' + anonymousFunctionString + ')();';\r\n\r\n  // Build the worker blob\r\n  const workerBlob = new Blob([workerString], { type: 'text/javascript' });\r\n\r\n  const workerBlobUrl = window.URL.createObjectURL(workerBlob);\r\n  return workerBlobUrl;\r\n}\r\n","/**\r\n * Converts a byte array to its UTF-16 string representation\r\n * @param bytes the byte array to convert\r\n * @param sliceSize the number of bytes to process per chunk\r\n */\r\nexport function bytesToBinaryString(bytes: Uint8Array, sliceSize = 512) {\r\n  const len = bytes.byteLength;\r\n  let binary = '';\r\n  for (let i = 0; i < len; i += sliceSize) {\r\n    binary += String.fromCharCode(...bytes.slice(i, i + sliceSize));\r\n  }\r\n  return binary;\r\n}\r\n","/**\r\n * Returns a function which replaces circular references in a JSON object\r\n */\r\nexport function circularReplacer() {\r\n  const seen = new WeakSet();\r\n  return (key: string, value: any) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (seen.has(value)) {\r\n        return;\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n","/**\r\n * Returns a `Generator` of all unique pairs of elements from the given `iterable`.\r\n * @param iterable The collection of which to find all unique element pairs.\r\n */\r\nexport function combinations<T>(iterable: Iterable<T>): Generator<[T, T]>;\r\n/**\r\n * Returns a `Generator` of all unique combinations with the given `length` of elements from the given `iterable`.\r\n * @param iterable The collection of which to find all unique element combinations with the given `length`.\r\n * @param length A positive number indicating the desired length of the returned combinations\r\n */\r\nexport function combinations<T>(\r\n  iterable: Iterable<T>,\r\n  length: number\r\n): Generator<T[]>;\r\nexport function* combinations<T>(\r\n  iterable: Iterable<T>,\r\n  length = 2\r\n): Generator<T[]> {\r\n  // If the desired length is 0, yield nothing\r\n  if (length === 0) return;\r\n\r\n  // Keep a record of the items we've seen so far to cut down on processing and avoid duplicate combinations\r\n  const seenItems = new Set<T>();\r\n\r\n  for (const currentItem of iterable) {\r\n    if (seenItems.has(currentItem)) continue;\r\n    if (length === 1) yield [currentItem];\r\n\r\n    // Concatenate the current item with combinations of the items that we've seen so far\r\n    // This will eventually result in all combinations for the current item\r\n    // The recursion stops when the desired length reaches 0\r\n    for (const combination of combinations(seenItems, length - 1)) {\r\n      yield [...combination, currentItem];\r\n    }\r\n\r\n    seenItems.add(currentItem);\r\n  }\r\n}\r\n","declare var document: any;\r\ndeclare var navigator: any;\r\n\r\nasync function fallbackCopyValueToClipboard(value: string) {\r\n  const textArea = document.createElement('textarea');\r\n  textArea.value = value;\r\n  textArea.style.position = 'fixed'; //avoid scrolling to bottom\r\n  document.body.appendChild(textArea);\r\n  textArea.focus();\r\n  textArea.select();\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      document.execCommand('copy')\r\n        ? resolve()\r\n        : reject(`Value ${value} could not be copied to the clipboard!`);\r\n    } catch (e) {\r\n      reject(e);\r\n    } finally {\r\n      document.body.removeChild(textArea);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Writes the given value to the clipboard.\r\n * @param value The value that should be written to the clipboard\r\n */\r\nexport async function copyToClipboard(value: string): Promise<void> {\r\n  // If the clipboard API is supported by the browser, use it.\r\n  // Otherwise, use a fallback method instead.\r\n  return navigator.clipboard\r\n    ? navigator.clipboard.writeText(value)\r\n    : fallbackCopyValueToClipboard(value);\r\n}\r\n","const specialCharactersMap = {\r\n  '&amp;': '&',\r\n  '&quot;': '\"',\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&#xA;': '\\n'\r\n};\r\n\r\nconst pattern = new RegExp(Object.keys(specialCharactersMap).join('|'), 'g');\r\n\r\nfunction replacer(specialCharacter: keyof typeof specialCharactersMap) {\r\n  return specialCharactersMap[specialCharacter];\r\n}\r\n\r\n/**\r\n * Replaces XML encoded characters in the given string with their respective decoded characters.\r\n * @param xml The string that contains XML encoded characters\r\n */\r\nexport function decodeXML(xml: string): string {\r\n  if (!xml) return xml;\r\n  return xml.replace(pattern, replacer);\r\n}\r\n","/**\r\n * Iterates over the given `items` and yields for every item a tuple of that item and its sequential index.\r\n * @param items The items to iterate over.\r\n */\r\nexport function* enumerate<T>(items: Iterable<T>): Generator<[T, number]> {\r\n  let index = 0;\r\n  for (const item of items) {\r\n    yield [item, index];\r\n    index++;\r\n  }\r\n}\r\n","/**\r\n * Returns the final item of the given `items` that matches the given `predicate`.\r\n * \r\n * @param items The data to search through\r\n * @param predicate The condition that the item should match\r\n */\r\nexport function findLast<T>(\r\n  [...items]: Iterable<T>,\r\n  predicate: (item: T) => boolean\r\n) {\r\n  for (let i = items.length - 1; i >= 0; i--) {\r\n    const item = items[i];\r\n    if (predicate(item)) {\r\n      return item;\r\n    }\r\n  }\r\n}\r\n","import { Dictionary, omit } from 'lodash';\r\nimport { union } from './union';\r\n\r\n/**\r\n * Returns a flattened representation of the given object\r\n */\r\nexport function flattenObject(\r\n  /** The object to flatten */\r\n  object: Dictionary<any>\r\n) {\r\n  let result = Object.assign({}, object);\r\n  Object.keys(object).forEach(key => {\r\n    const property = object[key];\r\n    if (typeof property === 'object') {\r\n      result = omit(union(result, flattenObject(property)), key);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n","import { Dictionary } from 'lodash';\r\n\r\n/**\r\n * Builds a dictionary out of the given key-value pairs.\r\n *\r\n * @param entries The key-value pairs out of which to build the dictionary.\r\n */\r\nexport function fromEntries<K extends keyof Dictionary<V>, V>(\r\n  entries: Iterable<[K, V]>\r\n): Dictionary<V> {\r\n  const result: Dictionary<V> = {};\r\n  for (const [key, value] of entries) {\r\n    result[key] = value;\r\n  }\r\n  return result;\r\n}\r\n","import { Dictionary } from 'lodash';\r\nimport { fromEntries } from './from-entries';\r\n\r\nfunction* parseQueryParams(queryParams: string[]): Generator<[string, string]> {\r\n  for (const queryParam of queryParams) {\r\n    const [key, value] = queryParam.split('=') as [string, string];\r\n\r\n    if (typeof value !== 'string')\r\n      throw new Error('Query param string is not correctly formatted');\r\n\r\n    yield [decodeURIComponent(key), decodeURIComponent(value)];\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the query parameters from the given `url` and returns them as a dictionary of key-value pairs\r\n *\r\n * @param url The URI string from which to get the query parameters\r\n */\r\nexport function getQueryParametersFromUrl(url: string): Dictionary<string> {\r\n  if (!url) return {};\r\n\r\n  const [, params] = url.split('?');\r\n\r\n  if (!params?.length) return {};\r\n\r\n  const queryParamString = params.split('#')[0];\r\n\r\n  if (!queryParamString?.length) return {};\r\n\r\n  const queryParams = queryParamString.split('&');\r\n\r\n  const parsedQueryParams = parseQueryParams(queryParams);\r\n\r\n  return fromEntries(parsedQueryParams);\r\n}\r\n","import { Dictionary, groupBy as _groupBy } from 'lodash';\r\n\r\n/**\r\n * Performs a group by operation on a dictionary based on one or multiple keys.\r\n * In the case of multiple keys, the resulting dictionary is indexed by a composite key delimited by # symbols.\r\n */\r\nexport function groupBy<T extends Dictionary<any>>(\r\n  /** The dataset to group */\r\n  data: T[],\r\n  /** The keys to group by */\r\n  keys: keyof T | [...(keyof T)[]]\r\n): Dictionary<T[]> {\r\n  // Harmonize the function inputs to always be an array\r\n  if (!Array.isArray(keys)) {\r\n    keys = [keys];\r\n  }\r\n\r\n  // Group the data by the given keys. If multiple keys are given, construct a composite key delimited by # symbols.\r\n  return _groupBy(data, item =>\r\n    (keys as (keyof T)[]).map(key => item[key]).join('#')\r\n  );\r\n}\r\n","import { Dictionary } from 'lodash';\r\nimport { SubType } from '../types';\r\n\r\n/**\r\n * Returns a dictionary containing all rows of the given `data` indexed by property `propertyName`.\r\n * The keys referenced by `propertyName` should be unique (e.g. an id).\r\n * If duplicate index keys do exist, only the last found row is indexed.\r\n *\r\n * A common use case for this function is to create a lookup table of a dataset.\r\n *\r\n * @param data The data to index\r\n * @param propertyName The name of the property to index by\r\n */\r\nexport function indexByProperty<T extends Dictionary<any>>(\r\n  data: Iterable<T>,\r\n  propertyName: keyof SubType<T, string | number>\r\n): Dictionary<T> {\r\n  // Iterate over the dataset and add every row to the index keyed by its respective value for `propertyName`.\r\n  const result: Dictionary<T> = {};\r\n  for (const row of data) {\r\n    result[row[propertyName as string | number]] = row;\r\n  }\r\n  return result;\r\n}\r\n","export * from './b64-to-b64url';\r\nexport * from './b64-to-blob';\r\nexport * from './b64url-to-b64';\r\nexport * from './build-worker-blob-url';\r\nexport * from './bytes-to-binary-string';\r\nexport * from './circular-replacer';\r\nexport * from './combinations';\r\nexport * from './copy-to-clipboard';\r\nexport * from './decode-xml';\r\nexport * from './enumerate';\r\nexport * from './find-last';\r\nexport * from './flatten-object';\r\nexport * from './from-entries';\r\nexport * from './get-query-parameters-from-url';\r\nexport * from './group-by';\r\nexport * from './index-by-property';\r\nexport * from './iterate';\r\nexport * from './iterator';\r\nexport * from './memoize';\r\nexport * from './pairs';\r\nexport * from './pairwise';\r\nexport * from './permutations';\r\nexport * from './race-until';\r\nexport * from './read-file-as-string';\r\nexport * from './rgb-to-hex';\r\nexport * from './save-as-file';\r\nexport * from './string-to-hash';\r\nexport * from './substrings';\r\nexport * from './union';\r\nexport * from './user-agent-is-edge';\r\nexport * from './user-agent-is-internet-explorer';\r\nexport * from './validate-required-arguments';\r\n","/**\r\n * Convenience function to help iterate over the given `iterator`.\r\n */\r\nexport function* iterate<T>(iterator: Iterator<T>): Iterable<T> {\r\n  let item: IteratorResult<T> = iterator.next();\r\n  while (!item.done) {\r\n    yield item.value;\r\n    item = iterator.next();\r\n  }\r\n}\r\n","/**\r\n * Returns an `Iterator` over every element of the given `iterable`.\r\n * @param iterable The collection of elements to iterate over\r\n */\r\nexport function* iterator<T>(iterable: Iterable<T>): Iterator<T> {\r\n  yield* iterable;\r\n}\r\n","import LRUMap from 'mnemonist/lru-map';\r\n\r\n/**\r\n * The default maximum size of the cache.\r\n */\r\nexport const defaultCacheLimit = 1000;\r\n\r\n/**\r\n * The default cache key resolver.\r\n * Returns the first argument as the cache key.\r\n * The first argument should therefore be a string.\r\n *\r\n * @param args the arguments from which to take the key.\r\n */\r\nexport const defaultResolver: MemoResolver<(\r\n  arg0: string,\r\n  ...args: any[]\r\n) => any> = (...args) => args[0];\r\n\r\n/**\r\n * Function that builds a cache key from its arguments.\r\n */\r\nexport type MemoResolver<T extends Memoizable> = (\r\n  ...args: Parameters<T>\r\n) => string;\r\n\r\n/**\r\n * Functions that match this type can be memoized.\r\n */\r\nexport type Memoizable = (...args: any[]) => any;\r\n\r\n/**\r\n * A memoized function caches its results by a key built from its arguments.\r\n */\r\nexport type Memoized<T extends Memoizable> = T & Memo<T>;\r\n\r\n/**\r\n * A memoized function exposes its cache as a read-only attribute.\r\n */\r\ninterface Memo<T extends Memoizable> {\r\n  /**\r\n   * The cache from which memoized results are retrieved.\r\n   */\r\n  readonly cache: Map<string, ReturnType<T>>;\r\n}\r\n\r\n/**\r\n * Optional settings for the memoize function.\r\n */\r\nexport interface MemoizeOptions<T extends Memoizable> {\r\n  /**\r\n   * The max number of items in the cache.\r\n   * When the size of the cache exceeds this limit, the least recently used items are removed from the cache.\r\n   * Defaults to `defaultCacheLimit`.\r\n   */\r\n  readonly cacheLimit?: number;\r\n  /**\r\n   * Function that returns the cache key.\r\n   * Defaults to `defaultResolver`.\r\n   */\r\n  readonly resolver?: MemoResolver<T>;\r\n}\r\n\r\n/**\r\n * Caches the results of the given function by a key built from its arguments.\r\n *\r\n * When the function is called again for the same arguments, the result is returned from the cache instead.\r\n *\r\n * Use `memoize` whenever you need to repeat an expensive computation often.\r\n *\r\n * If your function takes multiple arguments, or if the first argument of your function is not a string, you should pass a custom `resolver`.\r\n *\r\n * Whenever the size of the cache exceeds the given `cacheLimit`, the least recently used entries is removed from the cache.\r\n * You can optionally increase or decrease the size of the cache.\r\n *\r\n * @param func The function of which the results should be cached.\r\n * @param options Configuration parameters.\r\n */\r\nexport function memoize<T extends Memoizable>(\r\n  func: T,\r\n  {\r\n    cacheLimit = defaultCacheLimit,\r\n    resolver = defaultResolver\r\n  }: MemoizeOptions<T> = {}\r\n): Memoized<T> {\r\n  const cache = new LRUMap<string, ReturnType<T>>(cacheLimit);\r\n\r\n  function memoized(...args: Parameters<T>) {\r\n    const key = resolver.apply(null, args);\r\n\r\n    if (cache.has(key)) return cache.get(key);\r\n\r\n    const value = func.apply(null, args);\r\n\r\n    cache.set(key, value);\r\n\r\n    return value;\r\n  }\r\n\r\n  const result = Object.defineProperty(memoized, 'cache', {\r\n    get: () => cache\r\n  });\r\n\r\n  return result;\r\n}\r\n","import { iterator } from './iterator';\r\n\r\n/**\r\n * For two collections `A` and `B`, returns a list of tuples `[A, B]` representing the items at index `i` for every item in `A` and `B`.\r\n * If either `A` or `B` does not contain an item at index `i`, the respective side of the tuple will be `undefined`.\r\n */\r\nexport function* pairs<A, B>(\r\n  /* A collection */\r\n  a: Iterable<A>,\r\n  /* Another collection */\r\n  b: Iterable<B>\r\n): Generator<[A, B]> {\r\n  const iteratorA = iterator(a),\r\n    iteratorB = iterator(b);\r\n  for (\r\n    let itemA = iteratorA.next(), itemB = iteratorB.next();\r\n    !(itemA.done && itemB.done);\r\n    itemA = iteratorA.next(), itemB = iteratorB.next()\r\n  ) {\r\n    yield [itemA.value, itemB.value] as [A, B];\r\n  }\r\n}\r\n","/**\r\n * Returns a generator that returns every item from the given sequence, along with the previous item in the sequence.\r\n * @param items The seuqence of items\r\n */\r\nexport function* pairwise<T>(items: Iterable<T>): Generator<[T, T]> {\r\n  let previous: T;\r\n  for (const item of items) {\r\n    if (previous) {\r\n      yield [previous, item];\r\n    }\r\n    previous = item;\r\n  }\r\n}\r\n","/**\r\n * Returns all permutations of the given items that are of the given length\r\n * @param iterable The items for which to find all permutations\r\n * @param length The desired length of the permutations\r\n */\r\nexport function* permutations<T>(\r\n  iterable: Iterable<T>,\r\n  length: number\r\n): Generator<T[]> {\r\n  if (length === 0) return;\r\n\r\n  const seenItems = new Set<T>();\r\n\r\n  for (const currentItem of iterable) {\r\n    if (seenItems.has(currentItem)) continue;\r\n    if (length === 1) yield [currentItem];\r\n\r\n    for (const [...permutation] of permutations(seenItems, length - 1)) {\r\n      for (let i = 0; i <= permutation.length; i++) {\r\n        const [...clone] = permutation;\r\n        clone.splice(i, 0, currentItem);\r\n        yield clone;\r\n      }\r\n    }\r\n\r\n    seenItems.add(currentItem);\r\n  }\r\n}\r\n","/**\r\n * Returns a new `Promise` which resolves when either:\r\n * - One of the given `promises` resolves with a value which meets the given `predicate`. In this case, the resolved value is returned.\r\n * - None of the given `promises` resolves with a value which meets the given `predicate`. In this case, a default value (`null` by default) is returned instead.\r\n *\r\n * If one of the given `promises` rejects before a value which meets the given `predicate` is found, the result is rejected overall.\r\n */\r\nexport async function raceUntil<T>(\r\n  /** The promises to resolve */\r\n  promises: Promise<T>[],\r\n  /** The condition which the resolved value should fulfill */\r\n  predicate: (value: T) => boolean,\r\n  /** The value to return if none of the given promises resolves with a value which meets the given predicate */\r\n  defaultValue: T = null\r\n): Promise<T> {\r\n  const conditionalPromises = promises.map(\r\n    async promise =>\r\n      new Promise<T>((resolve, reject) =>\r\n        promise.then(value => predicate(value) && resolve(value), reject)\r\n      )\r\n  );\r\n\r\n  return Promise.race<T>([\r\n    ...conditionalPromises,\r\n    Promise.all(promises).then(() => defaultValue)\r\n  ]);\r\n}\r\n","/**\r\n * Returns the content of the given `file` as a `string`\r\n */\r\nexport async function readFileAsString(file: File): Promise<string> {\r\n  return new Promise<string>((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => resolve(reader.result as string);\r\n    reader.onerror = () => reject(reader.error);\r\n    reader.onabort = () => reject('Read process aborted');\r\n\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n","function componentToHex(c: number) {\r\n  const hex = c.toString(16);\r\n  return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\n\r\n/**\r\n * Converts an rgb value to a hex color value, prefixed with a #. Defaults to #000000 if one of the given values cannot be mapped to a hex value.\r\n * @param r the redness value between 0 and 255\r\n * @param g the blueness value between 0 and 255\r\n * @param b the greenness value between 0 and 255\r\n */\r\nexport function rgbToHex(r: number, g: number, b: number) {\r\n  return typeof r === 'number' && typeof g === 'number' && typeof b === 'number'\r\n    ? `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`\r\n    : '#000000';\r\n}\r\n","import { saveAs } from 'file-saver';\r\n\r\ndeclare var window: any;\r\n\r\n/**\r\n * Saves content in the form of a `string` or `Blob` to the user's device as a file with the given name.\r\n */\r\nexport function saveAsFile(content: string | Blob, name: string) {\r\n  if (typeof content === 'string') {\r\n    content = new Blob([content]);\r\n  }\r\n  if (window && window.navigator.msSaveOrOpenBlob) {\r\n    window.navigator.msSaveOrOpenBlob(content, name);\r\n  } else if (window && window.navigator.msSaveBlob) {\r\n    window.navigator.msSaveBlob(content, name);\r\n  } else {\r\n    const objectUrl = window.URL.createObjectURL(content);\r\n    saveAs(objectUrl, name);\r\n  }\r\n}\r\n","/**\r\n * Returns a unique hash for the given string\r\n */\r\nexport function stringToHash(string: string): number {\r\n  return string\r\n    .split('')\r\n    .reduce(\r\n      (prevHash, currVal) =>\r\n        ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0,\r\n      0\r\n    );\r\n}\r\n","export interface SubstringOptions {\r\n  /** The minimum length of the substrings. Default is `1`. */\r\n  minLength?: number;\r\n  /** The maximum length of the substrings. Default is the length of the given `string`. */\r\n  maxLength?: number;\r\n}\r\n\r\n/**\r\n * Returns all unique substrings of the given `string`. You can optionally specify a minimum and maximum substring length.\r\n * @param string The string for which to find all substrings.\r\n */\r\nexport function* substrings(\r\n  string: string,\r\n  { minLength = 1, maxLength = string.length }: SubstringOptions = {}\r\n): Generator<string> {\r\n  const seen = new Set<string>();\r\n  for (let i = 0; i <= string.length - minLength; i++) {\r\n    for (let j = i + minLength; j <= Math.min(maxLength, string.length); j++) {\r\n      const substring = string.slice(i, j);\r\n      if (!seen.has(substring)) {\r\n        yield substring;\r\n        seen.add(substring);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns a new object that represents the union between a and b. Nested objects are unified, nested lists are extended.\r\n */\r\nexport function union<A, B>(\r\n  /** The base object */\r\n  a: A,\r\n  /** The other object */\r\n  b: B,\r\n  /** Whether or not to overwrite properties that exist in both a and b in case of a primitive value or non-matching types */\r\n  overwrite = true\r\n): A & B {\r\n  // Make a shallow copy of the base object\r\n  const result = Object.assign({}, a) as A;\r\n\r\n  // Iterate over the keys in the other object and assign its values to the result object\r\n  Object.keys(b).forEach((key: string) => {\r\n    const newValue = b[key];\r\n\r\n    // If the property already exists in the result object...\r\n    if (result.hasOwnProperty(key)) {\r\n      const currentValue = result[key];\r\n\r\n      // If the types between A and B don't match, or if the value is a primitive...\r\n      if (\r\n        Object(newValue) !== newValue ||\r\n        newValue.constructor !== currentValue.constructor\r\n      ) {\r\n        if (overwrite) {\r\n          result[key] = newValue;\r\n        }\r\n      }\r\n\r\n      // Else, if the value is an array\r\n      else if (Array.isArray(newValue)) {\r\n        result[key] = currentValue.concat(newValue);\r\n      }\r\n\r\n      // Else, if the value is a set\r\n      else if (newValue instanceof Set) {\r\n        result[key] = new Set([Array.from(currentValue), Array.from(newValue)]);\r\n      }\r\n\r\n      // Else, if the value is a random object\r\n      else {\r\n        result[key] = union(currentValue, newValue);\r\n      }\r\n    }\r\n\r\n    // Otherwise simply assign the value\r\n    else {\r\n      result[key] = newValue;\r\n    }\r\n  });\r\n\r\n  return result as A & B;\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Returns `true` if the current User Agent is a Microsoft Edge (non-chromium) variant.\r\n */\r\nexport function userAgentIsEdge() {\r\n  return ['Edge/'].some(\r\n    userAgent => window && window.navigator.userAgent.includes(userAgent)\r\n  );\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Returns `true` if the current User Agent is an Internet Explorer variant.\r\n */\r\nexport function userAgentIsInternetExplorer() {\r\n  return ['MSIE ', 'Trident/'].some(\r\n    userAgent => window && window.navigator.userAgent.includes(userAgent)\r\n  );\r\n}\r\n","import { Dictionary, isNil } from 'lodash';\r\n\r\n/**\r\n * Throws an error if any of the given `args` cannot be validated.\r\n * By default, checks whether any argument is `null` or `undefined`.\r\n *\r\n * Use this function to check the required parameters of any function, such as an API call.\r\n *\r\n * @example function exampleApiCall(\r\n *            requiredArgumentA: string,\r\n *            requiredArgumentB: number,\r\n *            options: ExampleApiCallOptions = {}\r\n *          ) {\r\n *            // Validate the required arguments for the API call before we do anything else.\r\n *            // By passing the `arguments` variable, we check all function parameters, including `options`.\r\n *            // This works since `options` has a default value.\r\n *            validateRequiredArguments(arguments, 'exampleApiCall');\r\n *\r\n *            // If not all parameters are required, you can validate a subset by passing an array or an object.\r\n *            // In the example below, we exclude `requiredArgumentB` and `options` from the check.\r\n *            validateRequiredArguments([requiredArgumentA], 'exampleApiCall');\r\n *            validateRequiredArguments({requiredArgumentA}, 'exampleApiCall');\r\n *          }\r\n *\r\n *          // Let's now call `exampleApiCall` with null as the first parameter.\r\n *          // This results in an error telling us the parameter at index 0 was invalid.\r\n *          exampleApiCall(null, 0);\r\n *          // -> Error: Required parameter 0 was null when calling exampleApiCall.\r\n */\r\nexport function validateRequiredArguments(\r\n  /** The arguments to validate. */\r\n  args: Dictionary<any>,\r\n  /**\r\n   * The name of the function to which the arguments belong.\r\n   * Passing the function name ensures a meaningful error message from uglified code.\r\n   */\r\n  calleeName: string,\r\n  /**\r\n   * The function used to validate each of the given arguments.\r\n   * It should return `true` if the given argument is invalid.\r\n   * By default, checks whether the given argument is `null` or `undefined`.\r\n   */\r\n  isInvalidFn: (arg: any) => boolean = isNil\r\n) {\r\n  const invalidArgument = Object.entries(args).find(([, value]) =>\r\n    isInvalidFn(value)\r\n  );\r\n  \r\n  if (invalidArgument) {\r\n    throw new Error(\r\n      `Required parameter ${invalidArgument[0]} was ${\r\n        invalidArgument[1]\r\n      } when calling ${calleeName}.`\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * When the value emitted by the source observable is either `null`, `undefined` or `NaN`, emit the given `defaultValue` instead\r\n * @param defaultValue The value to emit when the source observable emits `null`, `undefined` or `NaN`\r\n */\r\nexport function defaultIfFalsy<T>(\r\n  defaultValue: T\r\n): (source: Observable<T>) => Observable<T> {\r\n  return source => source.pipe(map(value => value ?? defaultValue));\r\n}\r\n","export * from './default-if-falsy';\r\nexport * from './switch-tap';\r\nexport * from './until-destroyed';\r\n","import { concat, MonoTypeOperatorFunction, Observable, of } from 'rxjs';\r\nimport { ignoreElements, switchMap } from 'rxjs/operators';\r\n\r\n/**\r\n * Perform an asynchronous side effect for every emission of the source Observable, but return an observable that is identical to the source.\r\n */\r\nexport function switchTap<T, R>(\r\n  next: (x: T) => Observable<R>\r\n): MonoTypeOperatorFunction<T>;\r\nexport function switchTap<R>(\r\n  observable: Observable<R>\r\n): MonoTypeOperatorFunction<R>;\r\nexport function switchTap<T, R>(\r\n  arg: Observable<T> | ((x: T) => Observable<R>)\r\n): MonoTypeOperatorFunction<T> {\r\n  const next: (x: any) => Observable<T | R> =\r\n    typeof arg === 'function' ? arg : (x: any): Observable<T> => arg;\r\n  return switchMap(value =>\r\n    concat(next(value).pipe(ignoreElements()), of(value))\r\n  );\r\n}\r\n","import { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { OnDestroy } from '@angular/core';\r\n\r\nconst untilDestroyedSymbol = Symbol('untilDestroyed');\r\n\r\n/**\r\n * RxJS operator that stops emissions from the source `Observable` when the specified method is called on the given object.\r\n * This operator provides a convenient overload which hooks into the `OnDestroy` Angular lifecycle event on an Angular Component, Directive or Service.\r\n * By default, references the `ngOnDestroy` lifecycle hook.\r\n *\r\n * When using the default, `ngOnDestroy` must be present on the referenced component or service, even if the implementation of the given method is empty.\r\n *\r\n * **IMPORTANT**: Add the `untilDestroyed` operator as the last one to prevent leaks with intermediate observables in the\r\n * operator chain.\r\n * \r\n * @example\r\n * export class ExampleComponent implements OnInit, OnDestroy {\r\n *                ngOnInit() {\r\n *                  // This stream prints a message to the console every second until this component is destroyed\r\n *                  interval(1000)\r\n *                    .pipe(untilDestroyed(this))\r\n *                    .subscribe(console.log);\r\n *                 }\r\n *\r\n *                // This method must be present, even if empty.\r\n *                ngOnDestroy() {\r\n *                  // To protect you, an error will be thrown if it doesn't exist.\r\n *                }\r\n * }\r\n */\r\nexport function untilDestroyed<T>(\r\n  /** The parent Angular component or object instance. */\r\n  instance: OnDestroy\r\n): (source: Observable<T>) => Observable<T>;\r\nexport function untilDestroyed<T>(\r\n  /** The parent Angular component or object instance. */\r\n  instance: object,\r\n  /** The method to hook on. Defaults to `ngOnDestroy`. */\r\n  destroyMethodName: string = 'ngOnDestroy'\r\n): (source: Observable<T>) => Observable<T> {\r\n  return (source: Observable<T>) => {\r\n    const originalDestroy = instance[destroyMethodName];\r\n    const hasDestroyFunction = typeof originalDestroy === 'function';\r\n\r\n    if (!hasDestroyFunction) {\r\n      throw new Error(\r\n        `${\r\n          instance.constructor.name\r\n        } is using untilDestroyed but doesn't implement ${destroyMethodName}`\r\n      );\r\n    }\r\n\r\n    if (!instance[untilDestroyedSymbol]) {\r\n      instance[untilDestroyedSymbol] = new Subject();\r\n\r\n      instance[destroyMethodName] = function() {\r\n        if (hasDestroyFunction) {\r\n          originalDestroy.apply(this, arguments);\r\n        }\r\n        instance[untilDestroyedSymbol].next();\r\n        instance[untilDestroyedSymbol].complete();\r\n      };\r\n    }\r\n\r\n    return source.pipe(takeUntil<T>(instance[untilDestroyedSymbol]));\r\n  };\r\n}\r\n","export { VersionConfig } from './lib/version-config.service';\r\nexport * from './lib/version.module';\r\nexport * from './lib/version.service';\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface VersionConfig {\r\n  /**\r\n   * The name of the application\r\n   */\r\n  readonly appName?: string;\r\n  /**\r\n   * Whether or not the application is running in production mode\r\n   */\r\n  readonly production?: boolean;\r\n}\r\n\r\nexport const VersionConfigService = new InjectionToken<VersionConfig>(\r\n  'VersionConfig'\r\n);\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { VersionConfig, VersionConfigService } from './version-config.service';\r\nimport { VersionService } from './version.service';\r\n\r\ndeclare var window: Window;\r\n\r\n@NgModule()\r\nexport class VersionModule {\r\n  constructor(\r\n    private readonly versionService: VersionService,\r\n    @Optional() @SkipSelf() parentModule: VersionModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'VersionModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  static forRoot(\r\n    config: VersionConfig = {}\r\n  ): ModuleWithProviders<VersionModule> {\r\n    return {\r\n      ngModule: VersionModule,\r\n      providers: [\r\n        VersionService,\r\n        {\r\n          provide: VersionConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private init() {\r\n    /**\r\n     * Makes the version of the application and its connected services accessible from the browser console as a function called `version()`.\r\n     */\r\n    if (window && !window['version']) {\r\n      window['version'] = (forceUpdate: boolean = false) => {\r\n        this.versionService.getVersionDescriptor(forceUpdate).then(console.dir);\r\n        return 'Retrieving a version descriptor of the application and connected services...';\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { repositoryVersion } from '@models4insight/repository';\r\nimport { hash as gitHash } from 'git-version.json';\r\nimport { version as packageVersion } from 'package.json';\r\nimport { VersionConfig, VersionConfigService } from './version-config.service';\r\n\r\n@Injectable()\r\nexport class VersionService {\r\n  /** The name of the application */\r\n  readonly appName: string;\r\n\r\n  /**\r\n   * The version string for this application.\r\n   * The version string is composed of the node package version and the git hash, delimited by a `#` sign.\r\n   * If not in production mode, the version string also includes a `-dev` suffix.\r\n   */\r\n  readonly appVersion: string;\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(VersionConfigService)\r\n    private readonly config: VersionConfig = {}\r\n  ) {\r\n    this.appName = this.config.appName;\r\n    this.appVersion = `${packageVersion}#${gitHash}${\r\n      this.config.production ? '' : '-dev'\r\n    }`;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the version string of the repository to which the application connects.\r\n   * The version string is composed of the release number and the git hash, delimited by a `#` sign.\r\n   * If the version string could not be retrieved for any reason, returns `unknown` instead.\r\n   * @param forceUpdate Whether or not to refresh the cache\r\n   */\r\n  async getRepositoryVersion(forceUpdate: boolean = false): Promise<string> {\r\n    try {\r\n      const { version } = await repositoryVersion({ forceUpdate }).toPromise();\r\n      return version;\r\n    } catch {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an object which represents the version of the app and connected services.\r\n   * @param forceUpdate Whether or not to refresh the cache\r\n   */\r\n  async getVersionDescriptor(forceUpdate: boolean = false) {\r\n    // Resolve the version strings of the connected services concurrently\r\n    const [repository] = await Promise.all([\r\n      this.getRepositoryVersion(forceUpdate)\r\n    ]);\r\n\r\n    return {\r\n      app: this.appVersion,\r\n      production: this.config.production,\r\n      repository\r\n    };\r\n  }\r\n}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { faChartLine, faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/search/browse', pathMatch: 'full' },\r\n  {\r\n    path: 'search',\r\n    loadChildren: () =>\r\n      import('./search/search.module').then(m => m.SearchModule),\r\n    data: { title: 'Search', icon: faSearch }\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    loadChildren: () =>\r\n      import('./dashboards/dashboard.module').then(m => m.DashboardModule),\r\n    data: { title: 'Dashboard', icon: faChartLine }\r\n  },\r\n  // Fallback when no prior route is matched\r\n  { path: '**', redirectTo: '', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { scrollPositionRestoration: 'enabled' })\r\n  ],\r\n  exports: [RouterModule],\r\n  providers: []\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core'\r\n\r\n@Component({\r\n    selector: 'models4insight-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n","<router-outlet>\r\n\r\n</router-outlet>\r\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AtlasApiModule } from '@models4insight/atlas/api';\r\nimport { Core } from '@models4insight/core';\r\nimport { I18nService } from '@models4insight/i18n';\r\nimport { environment } from '../environments/environment';\r\nimport enUS from '../translations/en-US.json';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    ...Core.imports(environment),\r\n    AtlasApiModule,\r\n    HttpClientModule,\r\n    AppRoutingModule // must be imported as the last module as it contains the fallback route\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n  constructor(private readonly i18nService: I18nService) {\r\n    this.i18nService.setTranslation('en-US', enUS);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  name: 'm4i_atlas',\r\n  googleAnalyticsMeasurementID: 'UA-138345924-1',\r\n  i18n: {\r\n    defaultLanguage: 'en-US',\r\n    languages: {}\r\n  },\r\n  keycloak: {\r\n    url: '/auth',\r\n    realm: 'm4i',\r\n    clientId: 'm4i_thijs'\r\n  },\r\n  notifications: {\r\n    badgePath: 'assets/m4i-icon.png',\r\n    iconPath: 'assets/m4i-icon.png'\r\n  },\r\n  production: false,\r\n  shell: {\r\n    appCopyright: 2022,\r\n    appLogoPath: 'assets/m4i-platform-logo.png',\r\n    appName: 'Models4Insight Data Governance',\r\n  }\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\nimport 'zone.js/dist/zone-error'; // Included with Angular CLI.\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}