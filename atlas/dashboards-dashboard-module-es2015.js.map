{"version":3,"sources":["./src/app/dashboards/dashboard-routing.module.ts","./src/app/dashboards/dashboard.module.ts","./src/app/dashboards/domains/cards/cards-dashboard.component.ts","./src/app/dashboards/domains/cards/cards-dashboard.component.html","./src/app/dashboards/domains/domains.component.ts","./src/app/dashboards/domains/domains.component.html","./src/app/dashboards/domains/domains.service.ts"],"names":[],"mappings":"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","file":"dashboards-dashboard-module-es2015.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { Shell } from \"@models4insight/shell\";\r\nimport { DomainsComponent } from \"./domains/domains.component\";\r\n\r\nconst childRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'domains'\r\n    },\r\n    {\r\n        path: 'domains',\r\n        component: DomainsComponent\r\n    },\r\n    {\r\n        path: '**',\r\n        pathMatch: 'full',\r\n        redirectTo: 'domains'\r\n    }\r\n]\r\nconst routes: Routes = [\r\n    Shell.childRoutes([\r\n        {\r\n            path: '',\r\n            component: DomainsComponent,\r\n            children: childRoutes\r\n        }\r\n    ])\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule { }\r\n\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\r\nimport { DashboardRoutingModule } from \"./dashboard-routing.module\";\r\nimport { CardDashboardComponent } from \"./domains/cards/cards-dashboard.component\";\r\nimport { DomainsComponent } from \"./domains/domains.component\";\r\n@NgModule({\r\n    declarations: [DomainsComponent, CardDashboardComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FontAwesomeModule,\r\n        DashboardRoutingModule\r\n    ]\r\n})\r\nexport class DashboardModule { }\r\n","import { Component, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DomainForDashboard } from '@models4insight/atlas/api';\r\n\r\n@Component({\r\n  selector: 'models4insight-cards-dashboard',\r\n  templateUrl: './cards-dashboard.component.html',\r\n  styleUrls: ['./cards-dashboard.component.scss'],\r\n  providers: []\r\n})\r\nexport class CardDashboardComponent {\r\n  constructor(private readonly router: Router) {}\r\n  @Input() dataDomain: DomainForDashboard;\r\n\r\n  directToDetailsPage(guid: string) {\r\n    this.router.navigate(['search/details', guid]);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <ng-container *ngIf=\"dataDomain.isActive\">\r\n        <div class=\"active box\" (click)=\"directToDetailsPage(dataDomain.guid)\">\r\n            <p class=\"title is-6 name\"> {{dataDomain.name}}</p>\r\n            <p>\r\n                Data Dictionary:\r\n            </p>\r\n            <p class=\"subtitle is-6\">\r\n                {{dataDomain.totalNumberOfEntities}} conceptual entities\r\n            </p>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!dataDomain.isActive\">\r\n        <div class=\"inactive box\">\r\n            <h2 class=\"title is-5\"> {{dataDomain.name}}</h2>\r\n            <p>\r\n                No data Dictionary created.\r\n            </p>\r\n        </div>\r\n    </ng-container>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { DomainForDashboard } from '@models4insight/atlas/api';\r\nimport { Observable } from 'rxjs';\r\nimport { DomainsService } from './domains.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-domains',\r\n  templateUrl: './domains.component.html',\r\n  styleUrls: ['./domains.component.scss'],\r\n  providers: [DomainsService]\r\n})\r\nexport class DomainsComponent implements OnInit {\r\n  totalNumberOfDataDomains$: Observable<number>\r\n  totalNumberOfActiveDomains$: Observable<number>\r\n  listOfDashboardDomains$: Observable<DomainForDashboard[]>\r\n  isRetrivingDomainsForDashboards$: Observable<boolean>\r\n\r\n  constructor(private readonly domainsService: DomainsService) { }\r\n\r\n  ngOnInit() {\r\n    this.listOfDashboardDomains$ = this.domainsService.select('listOfDashboardDomains');\r\n    this.isRetrivingDomainsForDashboards$ = this.domainsService.select('isRetrivingDashboardInformation');\r\n    this.totalNumberOfDataDomains$ = this.domainsService.select('totalNumberOfDataDomains');\r\n    this.totalNumberOfActiveDomains$ = this.domainsService.select('totalNumberOfActiveDomains')\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <ng-container *ngIf=\"listOfDashboardDomains$ | async as domains\">\r\n        <ng-container *ngIf=\"totalNumberOfDataDomains$ | async as totalNumberOfDomains \">\r\n            <ng-container *ngIf=\"totalNumberOfActiveDomains$ | async as numberOfActiveDomains \">\r\n                <div class=\"title\">State of Data Governance at Van Oord</div>\r\n                <div class=\"progress-wrapper\">\r\n                    <progress class=\"progress is-primary is-large\" value=\"{{numberOfActiveDomains}}\"\r\n                        max=\"{{totalNumberOfDomains}}\">\r\n                    </progress>\r\n                    <p class=\"progress-value has-text-black\">\r\n                        {{numberOfActiveDomains}} of {{totalNumberOfDomains}} departaments.\r\n                    </p>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n        <div class=\"box\">\r\n            <ng-container *ngFor=\"let domain of domains\">\r\n                <models4insight-cards-dashboard [dataDomain]=\"domain\"></models4insight-cards-dashboard>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { DomainForDashboard, getDashboard, ListOfDomainsForDashboard } from '@models4insight/atlas/api';\r\nimport { BasicStore } from '@models4insight/redux';\r\n\r\nexport interface DashboardDomainsContext {\r\n  readonly isRetrivingDashboardInformation: boolean,\r\n  readonly listOfDashboardDomains?: DomainForDashboard[]\r\n  readonly totalNumberOfDataDomains?: number\r\n  readonly totalNumberOfActiveDomains?: number\r\n}\r\n\r\nconst dashboardDomainsDefaultContext: DashboardDomainsContext = {\r\n  isRetrivingDashboardInformation: true\r\n};\r\n\r\n@Injectable()\r\nexport class DomainsService extends BasicStore<DashboardDomainsContext> {\r\n  constructor() {\r\n    super({ name: 'DashBoardDomain', defaultState: dashboardDomainsDefaultContext });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.getAllDomainsForDashboard();\r\n  }\r\n\r\n  private async getAllDomainsForDashboard() {\r\n    const results: ListOfDomainsForDashboard = await getDashboard().toPromise()\r\n\r\n    const listOfDomains = Object.values(results.domains).sort(function (a, b) {\r\n      return a.name.localeCompare(b.name);\r\n    })\r\n    const totalNumberOfDataDomains = results.totalNumberOfDomains\r\n    const numberOfActiveDomains = results.totalNumberOfActiveDomains\r\n\r\n    this.update({\r\n      description: \"New set of Dashboards available\",\r\n      payload: {\r\n        isRetrivingDashboardInformation: false,\r\n        listOfDashboardDomains: listOfDomains,\r\n        totalNumberOfDataDomains: totalNumberOfDataDomains,\r\n        totalNumberOfActiveDomains: numberOfActiveDomains\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\n"],"sourceRoot":"webpack:///"}