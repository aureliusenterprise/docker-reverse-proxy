{"version":3,"sources":["C:/Users/thijs/Development/models4insight/libs/atlas/api/src/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/atlas-api.module.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/delete-entity-soft/delete-entity-soft.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/delete-entity-soft/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-domains/get-all-domains.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-domains/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-systems/get-all-systems.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-all-systems/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-app-seach-entity/get-app-search-entity.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-app-seach-entity/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-def-by-name/get-classification-def-by-name.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-def-by-name/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-definitions/get-classification-definitions.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-definitions/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-for-entity/get-classification-for-entity.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-classification-for-entity/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-dashboard/get-dashboards.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-dashboard/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-data-quality/get-data-quality.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-data-quality/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-entity-by-id/get-entity-by-id.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-entity-by-id/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-filters-and-results/get-filters-and-results.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-filters-and-results/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-governance-quality/get-governance-quality.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-governance-quality/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-lineage-model/get-lineage-model.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-lineage-model/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-query-results/get-query-results.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-query-results/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-term-by-id/get-term-by-id.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-term-by-id/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-terms-definitions/get-terms-definitions.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-terms-definitions/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-by-name/get-type-by-name.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-by-name/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-defs/get-type-defs.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/get-type-defs/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/remove-entity-classification/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/remove-entity-classification/remove-entity-classification.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity-classification/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity-classification/save-entity-classification.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity/index.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/save-entity/save-entity.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/types.ts","C:/Users/thijs/Development/models4insight/libs/atlas/api/src/lib/utils.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/index.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication-config.service.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.guard.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.module.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/authentication.service.ts","C:/Users/thijs/Development/models4insight/libs/authentication/src/lib/keycloak.service.ts","C:/Users/thijs/Development/models4insight/libs/core/src/index.ts","C:/Users/thijs/Development/models4insight/libs/core/src/lib/core.ts","C:/Users/thijs/Development/models4insight/libs/google-analytics/src/index.ts","C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics-config.service.ts","C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics.module.ts","C:/Users/thijs/Development/models4insight/libs/google-analytics/src/lib/google-analytics.service.ts","C:/Users/thijs/Development/models4insight/libs/http/src/index.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/authorization-header-filter.interceptor.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/authorization-header.interceptor.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/cache.interceptor.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/error-handler.interceptor.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/http-cache.service.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/http-config.service.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/http.module.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/http.service.ts","C:/Users/thijs/Development/models4insight/libs/http/src/lib/ie-cache-header-interceptor.ts","C:/Users/thijs/Development/models4insight/libs/i18n/src/index.ts","C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n-config.service.ts","C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n.module.ts","C:/Users/thijs/Development/models4insight/libs/i18n/src/lib/i18n.service.ts","C:/Users/thijs/Development/models4insight/libs/logger/src/index.ts","C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger-config.service.ts","C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger.module.ts","C:/Users/thijs/Development/models4insight/libs/logger/src/lib/logger.ts","C:/Users/thijs/Development/models4insight/libs/notifications/src/index.ts","C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications-config.service.ts","C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications.module.ts","C:/Users/thijs/Development/models4insight/libs/notifications/src/lib/notifications.service.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/index.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/abstract-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/abstract-branch-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.module.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/branch-permission.service.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/has-branch-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/branch-permission/index.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.module.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/feature.service.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/feature/index.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/abstract-project-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/has-project-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/index.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.directive.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.module.ts","C:/Users/thijs/Development/models4insight/libs/permissions/src/lib/project-permission/project-permission.service.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/index.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/abstract-store.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/action.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/basic-store.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/redux-config.service.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/redux.module.ts","C:/Users/thijs/Development/models4insight/libs/redux/src/lib/store.service.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/check-commit-status/check-commit-status.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/check-commit-status/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-data/commit-data.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-data/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-event-log/commit-event-log.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-event-log/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-json-model/commit-json-model.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-json-model/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-model/commit-model.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/commit-model/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/compare-models/compare-models.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/compare-models/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/constants.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-metric-exemption/create-metric-exemption.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-metric-exemption/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-project/create-project.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/create-project/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-branch/delete-branch.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-branch/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-metric-exemption/delete-metric-exemption.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-metric-exemption/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-project/delete-project.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-project/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-user-group/delete-user-group.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/delete-user-group/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/download-model/download-model.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/download-model/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/force-commit-model/force-commit-model.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/force-commit-model/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branch/get-branch.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branch/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches-summary/get-branches-summary.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches-summary/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches/get-branches.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-branches/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-metric-exemption/get-metric-exemption.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-metric-exemption/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model-conflict/get-model-conflict.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model-conflict/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model/get-model.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-model/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-project/get-project.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-project/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance-summary/get-provenance-summary.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance-summary/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance/get-provenance.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-provenance/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-group/get-user-group.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-group/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-groups/get-user-groups.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-groups/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-info/get-user-info.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-info/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-projects/get-user-projects.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-projects/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-role/get-user-role.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/get-user-role/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/log-clickstream-event/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/log-clickstream-event/log-clickstream-event.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/merge-branch/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/merge-branch/merge-branch.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/modelview-convert/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/modelview-convert/modelview-convert.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/monitor-status/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/monitor-status/monitor-status.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/report-error/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/report-error/report-error.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository-version/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository-version/repository-version.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/repository.module.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/types.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-branch/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-branch/update-branch.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-project/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-project/update-project.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-group/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-group/update-user-group.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-info/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/update-user-info/update-user-info.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/user-search/index.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/user-search/user-search.ts","C:/Users/thijs/Development/models4insight/libs/repository/src/lib/utils.ts","C:/Users/thijs/Development/models4insight/libs/services/branch/src/index.ts","C:/Users/thijs/Development/models4insight/libs/services/branch/src/lib/branches.service.ts","C:/Users/thijs/Development/models4insight/libs/services/branch/src/lib/services-branch.module.ts","C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/index.ts","C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream-config.service.ts","C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream.module.ts","C:/Users/thijs/Development/models4insight/libs/services/clickstream/src/lib/clickstream.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/index.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/commit-model.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/conflicts.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model-data-commit.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model-data.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/model.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/retrieve-model.service.ts","C:/Users/thijs/Development/models4insight/libs/services/model/src/lib/services-model.module.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/index.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project-members.service.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project-user-groups.service.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/project.service.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/projects.service.ts","C:/Users/thijs/Development/models4insight/libs/services/project/src/lib/services-project.module.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/index.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/favorite-projects.service.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/last-visited-route.service.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/recent-projects.service.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/services-user-info.module.ts","C:/Users/thijs/Development/models4insight/libs/services/user-info/src/lib/user-info.service.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/index.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/footer/footer.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/footer/footer.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/header/header.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/header/header.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/loading/loading.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/loading/loading.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline-task/pipeline-task.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline-task/pipeline-task.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/pipeline/pipeline.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/route-reusable-strategy.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell-config.service.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.component.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.component.html","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.module.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.service.ts","C:/Users/thijs/Development/models4insight/libs/shell/src/lib/shell.ts","C:/Users/thijs/Development/models4insight/libs/task-manager/src/index.ts","C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/decorators.ts","C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/task-manager.module.ts","C:/Users/thijs/Development/models4insight/libs/task-manager/src/lib/task-manager.service.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/index.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/bidirectional-multi-map.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/complex-set.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/custom-error.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/index.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/classes/stream.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64-to-b64url.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64-to-blob.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/b64url-to-b64.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/build-worker-blob-url.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/bytes-to-binary-string.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/circular-replacer.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/combinations.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/copy-to-clipboard.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/decode-xml.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/enumerate.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/find-last.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/flatten-object.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/from-entries.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/get-query-parameters-from-url.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/group-by.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/index-by-property.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/index.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/iterate.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/iterator.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/memoize.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/pairs.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/pairwise.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/permutations.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/race-until.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/read-file-as-string.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/rgb-to-hex.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/save-as-file.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/string-to-hash.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/substrings.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/union.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/user-agent-is-edge.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/user-agent-is-internet-explorer.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/functions/validate-required-arguments.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/default-if-falsy.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/index.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/switch-tap.ts","C:/Users/thijs/Development/models4insight/libs/utils/src/lib/rxjs-operators/until-destroyed.ts","C:/Users/thijs/Development/models4insight/libs/version/src/index.ts","C:/Users/thijs/Development/models4insight/libs/version/src/lib/version-config.service.ts","C:/Users/thijs/Development/models4insight/libs/version/src/lib/version.module.ts","C:/Users/thijs/Development/models4insight/libs/version/src/lib/version.service.ts","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACE;AACH;AACA;AACK;AACU;AACA;AACD;AAChB;AACG;AACA;AACO;AACD;AACL;AACA;AACH;AACO;AACL;AACH;AACe;AACjB;AACe;AACrB;;;;;;;;;;;;;ACtB5B;AAAA;AAAA;AAAmD;;AAG5C,MAAM,cAAc;IAGzB,YAAY,QAAkB;QAC5B,cAAc,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,CAAC;;6FALU,cAAc;sJAAd,cAAc;6FAAd,cAAc;cAD1B,sDAAQ;;;;;;;;;;;;;;ACFT;AAAA;AAAA;AAAA;AAAkE;AAEzB;AAEzC,MAAM,SAAS,GAAG,sBAAsB,CAAC;AAEzC;;;GAGG;AACI,SAAS,gBAAgB,CAAC,IAAY;IAC3C,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAEzD,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAyB,IAAI,CAAC,CAAC;AAC/D,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAqC;;;;;;;;;;;;;ACArC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAClC,SAAS,UAAU;AACxB,wDAAwD;AACxD,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEnD,MAAM,IAAI,GAAG,iDAAiD,CAAC;IAE/D,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAoB,IAAI,CAAC,CAAC;AAClC,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAiE;AAGzB;AAEjC,SAAS,UAAU;AACtB,wDAAwD;AACxD,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE;IAE5B,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC;IAElD,MAAM,IAAI,GAAG,4CAA4C;IAEzD,OAAO,IAAI;SACN,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAoB,IAAI,CAAC;AACrC,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAE7B;AAEI;AAoClC,SAAS,kBAAkB,CAChC,IAAY,EACZ,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAE3D,MAAM,IAAI,GAAG,+BAA+B,IAAI,EAAE,CAAC;IAEnD,OAAO,IAAI;SACR,eAAe,EAAE;SACjB,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAwB,IAAI,CAAC;SAChC,IAAI,CAAC,0DAAG,CAAC,MAAM,CAAC,EAAE,wBAAC,MAAM,0CAAG,CAAC,IAAC,CAAC,CAAC,CAAC;AACtC,CAAC;;;;;;;;;;;;;ACvDD;AAAA;AAAA;AAAA;AAAwC;;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAEzC,MAAM,SAAS,GAAG,uCAAuC,CAAC;AAE1D;;GAEG;AACI,SAAS,2BAA2B;AACzC,2BAA2B;AAC3B,IAAY,EACZ,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC;IAEpE,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAoB,IAAI,CAAC,CAAC;AAClC,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAiD;;;;;;;;;;;;;ACAjD;AAAA;AAAA;AAAA;AAAkE;AAGP;AASpD,SAAS,6BAA6B,CAAC,EAC5C,mBAAmB,GAAG,KAAK,EAC3B,UAAU,GAAG,KAAK,EAClB,WAAW,GAAG,KAAK,KACkC,EAAE;IAGvD,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAC7B,uFAAyB,CAAC,SAAS,EAAE,+BAA+B,CAAC,CAAC;IAEtE,MAAM,IAAI,GAAG,6CAA6C,CAAC;IAE3D,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,mBAAmB;QACnB,UAAU;KACX,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAM,IAAI,EAAE,cAAc,CAAC,CAAC;AACpC,CAAC;;;;;;;;;;;;;ACrCD;AAAA;AAAA;AAAA;AAAiD;;;;;;;;;;;;;ACAjD;AAAA;AAAA;AAAA;AAAkE;AAEzB;AAEzC,MAAM,SAAS,GAAG,sBAAsB,CAAC;AAEzC;;;;GAIG;AACI,SAAS,0BAA0B,CACxC,UAAkB,EAClB,kBAA0B,EAC1B,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;IAEnE,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,UAAU,mBAAmB,kBAAkB,EAAE,CAAC;IAE/E,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAiB,IAAI,CAAC,CAAC;AAC/B,CAAC;;;;;;;;;;;;;AC1BD;AAAA;AAAA;AAAA;AAAgD;;;;;;;;;;;;;ACAhD;AAAA;AAAA;AAAA;AAAkE;AAEzB;AAElC,SAAS,YAAY,CACxB,WAAW,GAAG,KAAK;IAEnB,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAC7B,uFAAyB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IACrD,MAAM,IAAI,GAAG,+BAA+B,CAAC;IAC7C,OAAO,IAAI;SACN,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAM,IAAI,CAAC,CAAC;AACxB,CAAC;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAAA;AAAgC;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAElC,SAAS,cAAc,CAC5B,KAAa,EACb,MAAc,EACd,aAAkB,EAClB,IAGC,EACD,OAAgC,EAChC,IAAkC,EAElC,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAEvD,MAAM,IAAI,GAAG,cAAc,CAAC;IAE5B,OAAO,IAAI;SACR,eAAe,EAAE;SACjB,KAAK,CAAC,WAAW,CAAC;SAClB,IAAI,CAAuB,IAAI,EAAE;QAChC,KAAK;QACL,MAAM;QACN,OAAO;QACP,IAAI;QACJ,aAAa;QACb,IAAI;KACL,CAAC,CAAC;AACP,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAGX;AAEvD,MAAM,SAAS,GAAG,sBAAsB,CAAC;AAEzC,iEAAiE;AAC1D,SAAS,oBAAoB;AAClC,8BAA8B;AAC9B,IAAY;IAEZ,MAAM,KAAK,GAAG,2DAAY,EAAE,CAAC;IAC7B,KAAK,CAAC,UAAU,CAAC,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACI,SAAS,aAAa;AAC3B,6BAA6B;AAC7B,IAAY,EACZ,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAgC,IAAI,CAAC,CAAC;AAC9C,CAAC;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAElC,SAAS,oBAAoB,CAClC,KAAa,EACb,MAAc,EACd,aAAa,EACb,IAGC,EACD,OAAgC,EAChC,IAAkC,EAClC,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;IAE7D,MAAM,IAAI,GAAG,SAAS,CAAC;IAEvB,OAAO,IAAI;SACR,eAAe,EAAE;SACjB,KAAK,CAAC,WAAW,CAAC;SAClB,IAAI,CAAuB,IAAI,EAAE;QAChC,KAAK;QACL,MAAM;QACN,OAAO;QACP,IAAI;QACJ,aAAa;QACb,IAAI;KACL,CAAC,CAAC;AACP,CAAC;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAA0C;;;;;;;;;;;;;ACA1C;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAElC,SAAS,oBAAoB,CAClC,KAAa,EACb,MAAc,EACd,aAAkB,EAClB,IAGC,EACD,OAAgC,EAChC,IAAkC,EAElC,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;IAE7D,MAAM,IAAI,GAAG,aAAa,CAAC;IAE3B,OAAO,IAAI;SACR,eAAe,EAAE;SACjB,KAAK,CAAC,WAAW,CAAC;SAClB,IAAI,CAAuB,IAAI,EAAE;QAChC,KAAK;QACL,MAAM;QACN,OAAO;QACP,IAAI;QACJ,aAAa;QACb,IAAI;KACL,CAAC,CAAC;AACP,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAyC;;;;;;;;;;;;;ACAzC;AAAA;AAAA;AAAA;AAAkE;AAEP;AAW3D,MAAM,IAAI,GAAG,eAAe,CAAC;AAE7B;;;;;;;;GAQG;AACI,SAAS,eAAe,CAC7B,IAAY,EACZ,EACE,KAAK,GAAG,CAAC,EACT,SAAS,GAAG,MAAM,EAClB,WAAW,KAC4B,EAAE;IAE3C,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,IAAI;QACJ,KAAK;QACL,SAAS;KACV,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAM,IAAI,EAAE,cAAc,CAAC,CAAC;AACpC,CAAC;;;;;;;;;;;;;AClDD;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACApC;AAAA;AAAA;AAAA;AAAkE;AAGP;AAW3D,MAAM,IAAI,GAAG,uBAAuB,CAAC;AAErC;;GAEG;AACI,SAAS,eAAe;AAC7B,yBAAyB;AACzB,KAAa;AACb,0DAA0D;AAC1D,EACE,sBAAsB,GAAG,KAAK,EAC9B,WAAW,GAAG,KAAK,EACnB,KAAK,GAAG,CAAC,EACT,MAAM,GAAG,CAAC,KAC6B,EAAE;IAE3C,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAExD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,sBAAsB;QACtB,KAAK;QACL,MAAM;QACN,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAoB,IAAI,EAAE,cAAc,CAAC,CAAC;AAClD,CAAC;;;;;;;;;;;;;ACjDD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAEzC,MAAM,SAAS,GAAG,wBAAwB,CAAC;AAE3C;;GAEG;AACI,SAAS,WAAW;AACzB,2BAA2B;AAC3B,IAAY,EACZ,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAc,IAAI,CAAC,CAAC;AAC5B,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAkE;AAGP;AAQ3D,MAAM,SAAS,GAAG,wBAAwB,CAAC;AAEpC,SAAS,sBAAsB;AACpC,kCAAkC;AAClC,IAAY,EACZ,EACE,mBAAmB,GAAG,KAAK,EAC3B,UAAU,GAAG,KAAK,EAClB,WAAW,GAAG,KAAK,KAC2B,EAAE;IAElD,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAC7B,uFAAyB,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;IAE/D,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,mBAAmB;QACnB,UAAU;KACX,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAc,IAAI,EAAE,cAAc,CAAC,CAAC;AAC5C,CAAC;;;;;;;;;;;;;ACxCD;AAAA;AAAA;AAAA;AAAwC;;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAEzC,MAAM,SAAS,GAAG,+BAA+B,CAAC;AAElD;;GAEG;AACI,SAAS,aAAa;AAC3B,2BAA2B;AAC3B,IAAY,EACZ,EAAE,WAAW,GAAG,KAAK,KAAiB,EAAE;IAExC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,IAAI,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;IAEpC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAiB,IAAI,CAAC,CAAC;AAC/B,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAElC,SAAS,WAAW;AACzB,0DAA0D;AAC1D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAC7B,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,IAAI,GAAG,yBAAyB,CAAC;IAEvC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAgB,IAAI,CAAC,CAAC;AAC9B,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;ACA/B;AAAA;AAAA;AAAA;AAA+C;;;;;;;;;;;;;ACA/C;AAAA;AAAA;AAAA;AAAkE;AAEzB;AAEzC;;GAEG;AACI,SAAS,0BAA0B;AACxC,6BAA6B;AAC7B,IAAY;AACZ,+CAA+C;AAC/C,kBAA0B;IAE1B,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;IAEnE,MAAM,IAAI,GAAG,wBAAwB,IAAI,mBAAmB,kBAAkB,EAAE,CAAC;IAEjF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAO,IAAI,CAAC,CAAC;AAC7C,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;ACA7C;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAEzC;;GAEG;AACI,SAAS,wBAAwB;AACtC,6BAA6B;AAC7B,IAAY;AACZ,iCAAiC;AACjC,eAAiC;IAEjC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;IAEjE,MAAM,IAAI,GAAG,wBAAwB,IAAI,kBAAkB,CAAC;IAE5D,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAO,IAAI,EAAE,eAAe,CAAC,CAAC;AAC5D,CAAC;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAA8B;;;;;;;;;;;;;ACA9B;AAAA;AAAA;AAAA;AAAkE;AAGzB;AAEzC,MAAM,IAAI,GAAG,iBAAiB,CAAC;AAE/B;;GAEG;AACI,SAAS,UAAU;AACxB,2BAA2B;AAC3B,MAAqC;IAErC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEnD,OAAO,IAAI;SACR,SAAS,EAAE;SACX,IAAI,CAAyB,IAAI,EAAE,MAAM,CAAC,CAAC;AAChD,CAAC;;;;;;;;;;;;;AC8bD;AAAA;AAAA;AAAA,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,4BAAa;IACb,0BAAW;IACX,gCAAiB;AACnB,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,gCAAmB;IACnB,8BAAiB;AACnB,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;;;;;;;;;;;;;AC5dD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACC;AACqB;AACtB;AACE;AAEpD;;GAEG;AACI,SAAS,gBAAgB;AAC9B,0DAA0D;AAC1D,MAAuB;IAEvB,IAAI,MAAM,GAAe,IAAI,+DAAU,EAAE,CAAC;IAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAC9C,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE;YAClC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACjC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACI,SAAS,aAAa;IAC3B,IAAI,CAAC,gEAAc,CAAC,QAAQ,EAAE;QAC5B,MAAM,IAAI,KAAK,CACb,sHAAsH,CACvH,CAAC;KACH;IACD,OAAO,gEAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,gEAAW,CAAC,CAAC;AAClD,CAAC;AAEM,SAAS,YAAY;IAC1B,IAAI,CAAC,gEAAc,CAAC,QAAQ,EAAE;QAC5B,MAAM,IAAI,KAAK,CACb,qHAAqH,CACtH,CAAC;KACH;IACD,OAAO,gEAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,qFAAgB,CAAC,CAAC;AACvD,CAAC;;;;;;;;;;;;;ACxCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACC;AACC;;;;;;;;;;;;;ACH7C;AAAA;AAAA;AAA+C;AAaxC,MAAM,2BAA2B,GAAG,IAAI,4DAAc,CAE3D,sBAAsB,CAAC,CAAC;;;;;;;;;;;;;ACf1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEK;AAEX;AAC4B;;;AAEjE,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,qBAAqB,CAAC,CAAC;AAKvC,MAAM,mBAAmB;IAC9B,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAG,CAAC;IAEpE,WAAW,CACT,KAA6B,EAC7B,KAA0B;QAE1B,OAAO,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,CAAC,IAAI,CACtD,0DAAG,CAAC,CAAC,eAAwB,EAAE,EAAE;YAC/B,IAAI,CAAC,eAAe,EAAE;gBACpB,GAAG,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;gBACxD,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;aACpC;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;sFAfU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAA8D;AACf;AACqD;;AAK7F,MAAM,oBAAoB;IAC/B,MAAM,CAAC,OAAO,CACZ,MAA4B;QAE5B,OAAO;YACL,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,0FAA2B;oBACpC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;mGAbU,oBAAoB;kKAApB,oBAAoB,kBAFtB,CAAC,4DAAY,CAAC;mIAEZ,oBAAoB,cAFrB,4DAAY;6FAEX,oBAAoB;cAHhC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;;;;;;;;;;;;ACN0C;AACK;AACiB;AAC3B;AACa;AACY;AACV;;;;AAErD,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,uBAAuB,CAAC,CAAC;AA0BhD;;GAEG;AAII,MAAM,qBAAsB,SAAQ,gEAE1C;IACC,YACU,eAAgC,EACxC,YAA0B;QAE1B,KAAK,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,YAAY,EAAE,CAAC,CAAC;QAH/C,oBAAe,GAAf,eAAe,CAAiB;QAIxC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,iJAAiJ;QACjJ,uDAAuD;QACvD,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAC1D,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,4BAA4B;YACzC,OAAO,EAAE;gBACP,eAAe,EAAE,eAAe;aACjC;SACF,CAAC,CACH,CAAC;QAEF,kFAAkF;QAClF,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,CAClE,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,oBAAoB;YACjC,OAAO,EAAE;gBACP,eAAe,EAAE,eAAe;aACjC;SACF,CAAC,CACH,CAAC;QAEF,wGAAwG;QACxG,IAAI,CAAC,eAAe,CAAC,kBAAkB;aACpC,IAAI,CACH,6DAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,EAC3C,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC9B;aACA,SAAS,EAAE,CAAC;QAEf,gEAAgE;QAChE,4EAA4E;QAC5E,IAAI,CAAC,eAAe,EAAE;aACnB,IAAI,CACH,gEAAS,CAAC,eAAe,CAAC,EAAE,CAC1B,eAAe;YACb,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW;YAClC,CAAC,CAAC,+CAAE,CAAC,EAAiB,CAAC,CAC1B,CACF;aACA,SAAS,CAAC,WAAW,CAAC,EAAE,CACvB,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,0BAA0B;YACvC,OAAO,EAAE;gBACP,WAAW,EAAE,WAAW;aACzB;SACF,CAAC,CACH,CAAC;IACN,CAAC;IAED;;OAEG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACG,WAAW;;YACf,IAAI,KAAa,CAAC;YAClB,IAAI;gBACF,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;aAClD;YAAC,WAAM;gBACN,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;;0FArHU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB,mBAFpB,2EAAoB;6FAErB,qBAAqB;cAHjC,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAoB;aACjC;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCkD;AACH;AACb;AACuB;AACJ;AAC8C;AACrC;;AAE/D,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,iBAAiB,CAAC,CAAC;AAanC,MAAM,eAAe;IAI1B,YACuC,MAA4B;QAHlD,cAAS,GAAqB,IAAI,kDAAa,EAAW,CAAC;QAK1E,IAAI,CAAC,YAAY,GAAG,kDAAQ,CAAC,MAAM,CAAC,CAAC;QAErC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAa,EAAE,EAAE,CACzC,GAAG,CAAC,KAAK,CAAC,uBAAuB,IAAI,EAAE,CAAC,CACzC,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,YAAY,CAAC,aAAa,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElE;;;WAGG;QACH,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,GAAG,EAAE;YACtC,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;gBAClC,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;QACH,CAAC,CAAC;QACF;;WAEG;QACH,IAAI,CAAC,YAAY,CAAC,kBAAkB,GAAG,GAAG,EAAE;YAC1C,GAAG,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;YACzE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAEK,KAAK,CAAC,UAAwB,EAAE;;YACpC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5D,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,KAAK,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,MAAM;;YACV,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACtD,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,KAAK,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,iBAAiB;;YACrB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;YACjE,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,KAAK,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAED,WAAW;QACT,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC5D,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;YAChD,KAAK,CAAC,MAAM,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,eAAe;QACjB,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5C,OAAO,aAAa;YAClB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;YAChC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAChC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IACjC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;IACvC,CAAC;IAED,IAAI,WAAW;QACb,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IACrE,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2EAAoB,EAAE,CAAC,CAAC;IACrD,CAAC;IAEa,kBAAkB;;YAC9B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;YAC3E,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC9C,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,KAAK,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAEa,eAAe;;YAC3B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;YAC/D,OAAO,IAAI,OAAO,CAA2B,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/D,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,KAAK,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;;8EA7GU,eAAe,yDAKhB,0FAA2B;kGAL1B,eAAe,WAAf,eAAe,mBAFd,2EAAoB;6FAErB,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAoB;aACjC;;sBAMI,oDAAM;uBAAC,0FAA2B;;;;;;;;;;;;;;AC1BvC;AAAA;AAAA;AAAA;AAA2B;;;;;;;;;;;;;ACC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AACjB;AAC8B;AACI;AAC9C;AACY;AACR;AACmC;AACrC;AACmB;AACE;AACJ;AACI;AACG;AACX;AACA;AACT;AAWxD;;GAEG;AACI,MAAM,IAAI;IACf;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,MAAkB;QAC/B,OAAO;YACL,4FAAuB;YACvB,mEAAY,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC;YACvD,+DAAU,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC;YACrD,sEAAa,CAAC,OAAO,CAAC;gBACpB,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO;gBAC7B,UAAU,EAAE,MAAM,CAAC,UAAU;aAC9B,CAAC;YACF,iEAAW,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC;YACtD,mFAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC7C,sFAAqB,CAAC,OAAO,CAAC;gBAC5B,aAAa,EAAE,MAAM,CAAC,4BAA4B;gBAClD,UAAU,EAAE,MAAM,CAAC,UAAU;aAC9B,CAAC;YACF,+DAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;YAC/B,+EAAiB;YACjB,uFAAiB,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACxD,iFAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC;YACjD,oFAAoB;YACpB,mFAAmB;YACnB,uFAAqB;YACrB,0FAAsB;YACtB,2EAAmB,CAAC,QAAQ,CAAC,kBAAkB,EAAE;gBAC/C,OAAO,EAAE,MAAM,CAAC,UAAU;aAC3B,CAAC;YACF,kEAAW,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;SAClC,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;AChED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACC;;;;;;;;;;;;;ACF/C;AAAA;AAAA;AAA+C;AAOxC,MAAM,4BAA4B,GAAG,IAAI,4DAAc,CAE5D,uBAAuB,CAAC,CAAC;;;;;;;;;;;;;ACT3B;AAAA;AAAA;AAAA;AAAA;AAA0F;AACc;AACpC;;;AAG7D,MAAM,qBAAqB;IAChC,YAEE,SAAgC,EAAE,EAClC,sBAA8C,EACtB,YAAmC;QAE3D,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,0EAA0E,CAC3E,CAAC;SACH;QACD,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,sBAAsB,CAAC,IAAI,EAAE,CAAC;SAC/B;IACH,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,SAAgC,EAAE;QAElC,OAAO;YACL,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE;gBACT,gFAAsB;gBACtB;oBACE,OAAO,EAAE,6FAA4B;oBACrC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;oGA9BU,qBAAqB;oKAArB,qBAAqB,yDAEtB,6FAA4B,oMAGE,qBAAqB;6FALlD,qBAAqB;cADjC,sDAAQ;eAAC,EAAE;;sBAGP,oDAAM;uBAAC,6FAA4B;sHAGE,qBAAqB;sBAA1D,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACVzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAiC;AAAjC,iCAAiC;AAEkB;AACK;AACa;AACmC;;;AAKjG,MAAM,sBAAsB;IACjC,YACU,MAAc,EAEd,SAAgC,EAAE;QAFlC,WAAM,GAAN,MAAM,CAAQ;QAEd,WAAM,GAAN,MAAM,CAA4B;IACzC,CAAC;IAEJ,IAAI;QACF,kDAAkD;QAClD,kDAAkD;QAClD,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CACH,6DAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,YAAY,6DAAa,CAAC,EAC/C,4DAAK,CAAwB,mBAAmB,CAAC,EACjD,2EAAoB,EAAE,CACvB;aACA,SAAS,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;oBACxC,SAAS,EAAE,GAAG;iBACf,CAAC,CAAC;aACJ;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,8GAA8G,CAC/G,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACP,CAAC;;4FA3BU,sBAAsB,yKAGvB,6FAA4B;yGAH3B,sBAAsB,WAAtB,sBAAsB;6FAAtB,sBAAsB;cADlC,wDAAU;;sBAIN,oDAAM;uBAAC,6FAA4B;;;;;;;;;;;;;;ACZxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACC;;;;;;;;;;;;;ACInC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAC4B;AACvB;AACR;AACG;;;AAE3C,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,sCAAsC,CAAC,CAAC;AAE/D;;GAEG;AAEI,MAAM,oCAAoC;IAC/C,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAG,CAAC;IAEpE,SAAS,CACP,OAAuB,EACvB,IAAiB;QAEjB,oEAAoE;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QAExD,OAAO,iDAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CACtB,gEAAS,CAAC,KAAK,CAAC,EAAE,CAChB,IAAI,CAAC,MAAM,CACT,OAAO,CAAC,KAAK,CAAC;YACZ,UAAU,EAAE;gBACV,aAAa,EAAE,wCAAwC;aACxD;SACF,CAAC,CACH,CACF,CACF,CAAC;IACJ,CAAC;;wHArBU,oCAAoC;uHAApC,oCAAoC,WAApC,oCAAoC;6FAApC,oCAAoC;cADhD,wDAAU;;;;;;;;;;;;;;ACXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAC4B;AACvB;AACR;AACG;;;AAE3C,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,gCAAgC,CAAC,CAAC;AAEzD;;GAEG;AAEI,MAAM,8BAA8B;IACzC,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAG,CAAC;IAEpE,SAAS,CACP,OAAuB,EACvB,IAAiB;QAEjB,oEAAoE;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QAExD,OAAO,iDAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CACtB,gEAAS,CAAC,KAAK,CAAC,EAAE,CAChB,IAAI,CAAC,MAAM,CACT,OAAO,CAAC,KAAK,CAAC;YACZ,UAAU,EAAE;gBACV,aAAa,EAAE,UAAU,KAAK,EAAE;aACjC;SACF,CAAC,CACH,CACF,CACF,CAAC;IACJ,CAAC;;4GArBU,8BAA8B;iHAA9B,8BAA8B,WAA9B,8BAA8B;6FAA9B,8BAA8B;cAD1C,wDAAU;;;;;;;;;;;;;;ACjBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAC+D;AAC5D;AAEU;;;AAExD;;;GAGG;AAEI,MAAM,gBAAgB;IAG3B,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAF9C,gBAAW,GAAG,KAAK,CAAC;IAE6B,CAAC;IAE1D;;;;OAIG;IACH,SAAS,CAAC,OAAqC;QAC7C,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC7D,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;YAC7B,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;SAC7B;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;YAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC7B;QAED,OAAO,IAAI,+CAAU,CAAC,CAAC,UAAsC,EAAE,EAAE;YAC/D,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACvG,IAAI,UAAU,KAAK,IAAI,EAAE;gBACvB,4CAA4C;gBAC5C,UAAU,CAAC,IAAI,CAAC,IAAI,iEAAY,CAAC,UAAoB,CAAC,CAAC,CAAC;gBACxD,UAAU,CAAC,QAAQ,EAAE,CAAC;aACvB;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAC5B,KAAK,CAAC,EAAE;oBACN,IAAI,KAAK,YAAY,iEAAY,EAAE;wBACjC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;qBAClE;oBACD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzB,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,EAChC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAC5B,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;gFA1CU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB;6FAAhB,gBAAgB;cAD5B,wDAAU;;;;;;;;;;;;;;ACTX;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACb;AAEJ;AAC0B;;AAEtE,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,yBAAyB,CAAC,CAAC;AAElD;;GAEG;AAEI,MAAM,uBAAuB;IAClC,YACiD,SAAqB,EAAE;QAAvB,WAAM,GAAN,MAAM,CAAiB;IACrE,CAAC;IACJ,SAAS,CACP,OAAyB,EACzB,IAAiB;QAEjB,OAAO,IAAI;aACR,MAAM,CAAC,OAAO,CAAC;aACf,IAAI,CAAC,iEAAU,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,qDAAqD;IAC7C,YAAY,CAAC,QAAwB;QAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YAC3B,8BAA8B;YAC9B,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;SACtC;QACD,MAAM,QAAQ,CAAC;IACjB,CAAC;;8FApBU,uBAAuB,yDAEZ,sEAAiB;0GAF5B,uBAAuB,WAAvB,uBAAuB;6FAAvB,uBAAuB;cADnC,wDAAU;;sBAGN,sDAAQ;;sBAAI,oDAAM;uBAAC,sEAAiB;;;;;;;;;;;;;;ACdzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACK;AAClB;;AAG9B,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,kBAAkB,CAAC,CAAC;AAC3C,MAAM,mBAAmB,GAAG,WAAW,CAAC;AAOxC;;GAEG;AAEI,MAAM,gBAAgB;IAI3B;QAHQ,eAAU,GAAsC,EAAE,CAAC;QACnD,YAAO,GAAmB,IAAI,CAAC;QAGrC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,GAAW,EAAE,IAAuB,EAAE,WAAkB;QACnE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG;YACrB,WAAW,EAAE,WAAW,IAAI,IAAI,IAAI,EAAE;YACtC,IAAI,EAAE,IAAI;SACX,CAAC;QACF,GAAG,CAAC,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,GAAW;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAExC,IAAI,UAAU,EAAE;YACd,GAAG,CAAC,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC;YACzC,OAAO,UAAU,CAAC,IAAI,CAAC;SACxB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,iBAAiB,CAAC,GAAW;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,GAAW,EAAE,QAAQ,GAAC,IAAI;QACnC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;aAC9C,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aAC/E,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,iCAAK,KAAK,KAAE,CAAC,SAAS,CAAC,EAAE,UAAU,IAAE,EAAE,EAAE,CAAC;QACxF,GAAG,CAAC,KAAK,CAAC,2BAA2B,GAAG,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,cAAqB;QAC9B,IAAI,cAAc,EAAE;YAClB,mDAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,KAAqB,EAAE,GAAW,EAAE,EAAE;gBAC3D,IAAI,cAAc,IAAI,KAAK,CAAC,WAAW,EAAE;oBACvC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;SACtB;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,WAAiC;QAC9C,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO;YACV,WAAW,KAAK,OAAO,IAAI,WAAW,KAAK,SAAS;gBAClD,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;gBACjC,CAAC,CAAC,IAAI,CAAC;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACrE;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACrE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACjD,CAAC;;gFAtGU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB;6FAAhB,gBAAgB;cAD5B,wDAAU;;;;;;;;;;;;;;ACjBX;AAAA;AAAA;AAA+C;AAMxC,MAAM,iBAAiB,GAAG,IAAI,4DAAc,CAAa,YAAY,CAAC,CAAC;;;;;;;;;;;;;ACN9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AAM7C;AAC6D;AACa;AAC1C;AACe;AACd;AACc;AACzB;AAC4B;;AAKlE,MAAM,UAAU;IACrB,YAAoC,YAAwB;QAC1D,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,SAAqB,EAAE;QACpC,OAAO;YACL,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE;gBACT,gGAA8B;gBAC9B,mEAAgB;gBAChB,kFAAuB;gBACvB,qFAAwB;gBACxB,oEAAgB;gBAChB,6GAAoC;gBACpC;oBACE,OAAO,EAAE,+DAAU;oBACnB,QAAQ,EAAE,yDAAW;iBACtB;gBACD;oBACE,OAAO,EAAE,sEAAiB;oBAC1B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;yFA7BU,UAAU;8IAAV,UAAU,yDAC6B,UAAU,qBAHnD,CAAC,qEAAgB,CAAC;mIAEhB,UAAU,cAFX,qEAAgB;6FAEf,UAAU;cAHtB,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,qEAAgB,CAAC;aAC5B;sCAEmD,UAAU;sBAA/C,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACpBnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM8B;AAOP;AAE6D;AACa;AAC1C;AACe;AACG;;;AA6BzE,0EAA0E;AAC1E,MAAM,sBAAsB;IAC1B,YACU,IAAiB,EACjB,WAA4B;QAD5B,SAAI,GAAJ,IAAI,CAAa;QACjB,gBAAW,GAAX,WAAW,CAAiB;IACnC,CAAC;IAEJ,MAAM,CAAC,OAAyB;QAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;CACF;AAED;;;;;;GAMG;AACI,MAAM,yBAAyB,GAAG,IAAI,4DAAc,CACzD,2BAA2B,CAC5B,CAAC;AAEF;;GAEG;AAII,MAAM,WAAY,SAAQ,+DAAU;IACzC,YACU,WAAwB,EACxB,QAAkB,EAGlB,eAAkC,EAAE;QAE5C,KAAK,CAAC,WAAW,CAAC,CAAC;QANX,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAU;QAGlB,iBAAY,GAAZ,YAAY,CAAwB;QAI5C,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,2DAA2D;YAC3D,IAAI,CAAC,YAAY,GAAG;gBAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kFAAuB,CAAC;gBAC1C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qFAAwB,CAAC;aAC5C,CAAC;SACH;IACH,CAAC;IAED,SAAS;QACP,MAAM,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC7C,gGAA8B,CAC/B,CAAC;QACF,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;IACpD,CAAC;IACD,eAAe;QACb,MAAM,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC7C,6GAAoC,CACrC,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,WAAqB;QACzB,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ;aACnC,GAAG,CAAC,mEAAgB,CAAC;aACrB,SAAS,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC,kFAAuB,CAAC,CAAC;IACzD,CAAC;IAED,iFAAiF;IACjF,OAAO,CAAC,MAAY,EAAE,GAAS,EAAE,OAAa;QAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAC3C,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,WAAW,CAAC,EACpE,IAAI,CAAC,WAAW,CACjB,CAAC;QACF,OAAO,IAAI,+DAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IAEO,iBAAiB,CAAC,eAAyB;QACjD,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,eAAe,CAAC,CAAC,CAC/D,CAAC;IACJ,CAAC;IAEO,cAAc,CAAC,WAA4B;QACjD,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CACxC,CAAC;IACJ,CAAC;;sEAnEU,WAAW,mSAKZ,yBAAyB;8FALxB,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;sBAKI,sDAAQ;;sBACR,oDAAM;uBAAC,yBAAyB;;;;;;;;;;;;;;ACjFrC;AAAA;AAAA;AAA2C;;AAG3C;;;GAGG;AAEI,MAAM,wBAAwB;IACnC,SAAS,CACP,OAAyB,EACzB,IAAiB;QAEjB,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;YAC5B,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;gBAClC,OAAO,EAAE,OAAO,CAAC,OAAO;qBACrB,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC;qBAChC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;aAC7B,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SACnC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;gGAfU,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB;6FAAxB,wBAAwB;cADpC,wDAAU;;;;;;;;;;;;;;ACRX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACC;;;;;;;;;;;;;ACDnC;AAAA;AAAA;AAA+C;AAexC,MAAM,iBAAiB,GAAG,IAAI,4DAAc,CAAa,YAAY,CAAC,CAAC;;;;;;;;;;;;;ACf9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkF;AAC5B;AACgB;AACzB;;;;AAMtC,MAAM,UAAU;IACrB,YACmB,WAAwB,EACjB,YAAwB;QAD/B,gBAAW,GAAX,WAAW,CAAa;QAGzC,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;SACH;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,MAAkB;QAC/B,OAAO;YACL,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE;gBACT,yDAAW;gBACX;oBACE,OAAO,EAAE,sEAAiB;oBAC1B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;yFAxBU,UAAU;8IAAV,UAAU,4KAGmB,UAAU,qBANzC,CAAC,mEAAe,CAAC,OAAO,EAAE,CAAC;QAC1B,mEAAe;mIAEd,UAAU,8FAFX,mEAAe;6FAEd,UAAU;cAJtB,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,mEAAe,CAAC,OAAO,EAAE,CAAC;gBACpC,OAAO,EAAE,CAAC,mEAAe,CAAC;aAC3B;2GAIyC,UAAU;sBAA/C,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACZzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACD;AACiC;AACnC;AACiB;AACV;AACrB;AACU;AACwD;AAC9B;;;;;;AAEtE,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,aAAa,CAAC,CAAC;AACtC,MAAM,WAAW,GAAG,UAAU,CAAC;AAE/B;;;;GAIG;AACI,SAAS,OAAO,CAAC,CAAS;IAC/B,OAAO,CAAC,CAAC;AACX,CAAC;AASD;;;GAGG;AACH,SAAS,SAAS,CAAC,cAAsC;IACvD,IAAI,KAAa,CAAC;IAClB,IAAI,cAAc,CAAC,UAAU,EAAE;QAC7B,KAAK,GAAG,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;KAC9C;IACD,IAAI,CAAC,KAAK,EAAE;QACV,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACtC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAGM,MAAM,WAAY,SAAQ,gEAA4B;IAG3D,YACmB,MAAc,EACd,YAAmB,EACnB,gBAAkC,EACxB,MAAkB,EAC7C,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE;gBACZ,eAAe,EAAE,MAAM,CAAC,eAAe;gBACvC,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;gBACjD,YAAY,EACV,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC;oBACjC,gBAAgB,CAAC,qBAAqB,EAAE;aAC3C;YACD,IAAI,EAAE,aAAa;YACnB,YAAY;SACb,CAAC,CAAC;QAhBc,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAO;QACnB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAenD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE,CAChE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,CACxC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,IAAI;QACF,0DAA0D;QAC1D,IAAI,CAAC,gBAAgB,CAAC,YAAY;aAC/B,IAAI,CAAC,4DAAK,CAAC,MAAM,CAAC,CAAC;aACnB,SAAS,CAAC,CAAC,IAAY,EAAE,EAAE,CAC1B,IAAI,CAAC,MAAM,CAAC;YACV,OAAO,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE;YAClC,WAAW,EAAE,mCAAmC;SACjD,CAAC,CACH,CAAC;QAEJ,4EAA4E;QAC5E,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACvC,6DAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,YAAY,gEAAgB,CAAC,EAChD,0DAAG,CAAC,CAAC,IAAsB,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAC3D,2EAAoB,EAAE,EACtB,kEAAW,EAAE,CACd,CAAC;QAEF,iFAAiF;QACjF,kDAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;aACnD,IAAI,CAAC,kEAAW,CAAC,SAAS,CAAC,CAAC;aAC5B,SAAS,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;aAClE;QACH,CAAC,CAAC,CAAC;QAEL,2GAA2G;QAC3G,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAC9C,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CACxC,CAAC;QAEF,qIAAqI;QACrI,0DAAa,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;SAC/B,CAAC;aACC,IAAI,CACH,0DAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,cAAc,EAAE,WAAW,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,GAAG,QAAQ,CAAC;YACpB,IAAI,mBAAmB,GAAG,uDAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YACzD,wDAAwD;YACxD,IAAI,QAAQ,IAAI,CAAC,mBAAmB,EAAE;gBACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI;oBACF,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CACtC,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,CACvC,IAAI,EAAE,CAAC;gBACV,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;aACrC;YACD,wCAAwC;YACxC,IAAI,CAAC,mBAAmB,EAAE;gBACxB,IAAI,GAAG,WAAW,CAAC;aACpB;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CACH;aACA,SAAS,CAAC,IAAI,CAAC,EAAE;YAChB,GAAG,CAAC,KAAK,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,MAAM,CAAC;YACV,OAAO,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE;YACnC,WAAW,EAAE,iCAAiC;SAC/C,CAAC,CAAC;IACL,CAAC;IAED,uFAAuF;IACvF,cAAc;IACZ,8DAA8D;IAC9D,QAAgB;IAChB,4DAA4D;IAC5D,YAAoB;QAEpB,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;;sEAtHU,WAAW,gaAOZ,sEAAiB;8FAPhB,WAAW,WAAX,WAAW;6FAAX,WAAW;cADvB,wDAAU;;sBAQN,oDAAM;uBAAC,sEAAiB;;;;;;;;;;;;;;ACrD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AAEO;;;;;;;;;;;;;ACFpC;AAAA;AAAA;AAA+C;AAMxC,MAAM,mBAAmB,GAAG,IAAI,4DAAc,CAEnD,cAAc,CAAC,CAAC;;;;;;;;;;;;;ACRlB;AAAA;AAAA;AAAA;AAAA;AAA0F;AACxD;AAC0C;;AAGrE,MAAM,YAAY;IACvB,YAC2C,SAAuB,EAAE,EAC1C,YAA0B;QAElD,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;SACH;QACD,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,8CAAM,CAAC,oBAAoB,EAAE,CAAC;SAC/B;IACH,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,SAAuB,EAAE;QACtC,OAAO;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,0EAAmB;oBAC5B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;2FAzBU,YAAY;kJAAZ,YAAY,yDAED,0EAAmB,6DACD,YAAY;6FAHzC,YAAY;cADxB,sDAAQ;;sBAGJ,sDAAQ;;sBAAI,oDAAM;uBAAC,0EAAmB;0BACD,YAAY;sBAAjD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACRzB;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AAEH;;;GAGG;AACH,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,qCAAO;IACP,yCAAK;IACL,6CAAO;IACP,uCAAI;IACJ,yCAAK;AACP,CAAC,EANW,QAAQ,KAAR,QAAQ,QAMnB;AAWM,MAAM,MAAM;IAejB,YAAoB,MAAe;QAAf,WAAM,GAAN,MAAM,CAAS;IAAG,CAAC;IARvC;;;OAGG;IACH,MAAM,CAAC,oBAAoB;QACzB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;IAClC,CAAC;IAID;;;OAGG;IACH,KAAK,CAAC,GAAG,OAAc;QACrB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,GAAG,OAAc;QACrB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,GAAG,OAAc;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,GAAG,OAAc;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,GAAG,OAAc;QACvB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,GAAG,OAAc;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAEO,GAAG,CAAC,IAAc,EAAE,KAAe,EAAE,OAAc;QACzD,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,EAAE;YACzB,MAAM,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM;gBAC5B,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,cAAc,EAAE;gBACtC,CAAC,CAAC,cAAc,CAAC;YACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;SAChC;IACH,CAAC;;AAxED;;;GAGG;AACI,YAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;;;;;;;;;;;;;ACxDhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACC;;;;;;;;;;;;;ACF5C;AAAA;AAAA;AAA+C;AAOxC,MAAM,0BAA0B,GAAG,IAAI,4DAAc,CAE1D,qBAAqB,CAAC,CAAC;;;;;;;;;;;;;ACTzB;AAAA;AAAA;AAAA;AAA8D;AACmC;;AAG1F,MAAM,mBAAmB;IAC9B,MAAM,CAAC,OAAO,CAAC,SAA8B,EAAE;QAC7C,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,wFAA0B;oBACnC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;kGAXU,mBAAmB;gKAAnB,mBAAmB;6FAAnB,mBAAmB;cAD/B,sDAAQ;;;;;;;;;;;;;;;;;;;;;;;;;ACHoD;AAChC;AACK;AAC+D;AACpC;;AActD,MAAM,oBAAoB;IAG/B,YAGU,SAA8B,EAAE;QAAhC,WAAM,GAAN,MAAM,CAA0B;QAExC,IAAI,eAAe,IAAI,SAAS,EAAE;YAChC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBAChD,IAAI,CAAC,yBAAyB,GAAG,YAAY,CAAC;YAChD,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;;;OAMG;IACG,gBAAgB;IACpB,8DAA8D;IAC9D,KAAa;IACb,yBAAyB;IACzB,UAA+B,EAAE;;YAEjC,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,IAAI,cAAc,IAAI,MAAM,EAAE;gBAC5B,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,iBAAiB,EAAE,CAAC;gBAC1D,IAAI,UAAU,KAAK,SAAS,EAAE;oBAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAC1B;wBACE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;wBAC5B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;wBAC1B,GAAG,EAAE,MAAM,GAAG,+CAAI,EAAE;wBACpB,SAAS,EAAE,kDAAG,EAAE;qBACjB,EACD,OAAO,CACR,CAAC;oBACF,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;oBACpB,IAAI,IAAI,CAAC,yBAAyB,EAAE;wBAClC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;qBAChE;yBAAM;wBACL,IAAI,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;qBACjC;iBACF;aACF;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;;wFAlDU,oBAAoB,yDAKrB,wFAA0B;uGALzB,oBAAoB,WAApB,oBAAoB,mBAFnB,yEAAmB;6FAEpB,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,yEAAmB;aAChC;;sBAKI,sDAAQ;;sBACR,oDAAM;uBAAC,wFAA0B;;;;;;;;;;;;;;ACvBtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACV;AACW;;;;;;;;;;;;;ACDzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACK;AACN;;AAE/C,MAAe,2BAA2B;IAO/C,YACqB,WAA6B,EAC7B,aAA+B;QAD/B,gBAAW,GAAX,WAAW,CAAkB;QAC7B,kBAAa,GAAb,aAAa,CAAkB;QARpD,kDAAkD;QAC/B,mBAAc,GAAqB,IAAI,oDAAe,CAAC,KAAK,CAAC,CAAC;QAEjF,kHAAkH;QACxG,YAAO,GAAG,KAAK,CAAC;IAKvB,CAAC;IAEJ,QAAQ;QACN,0FAA0F;QAC1F,IAAI,CAAC,kBAAkB;aACpB,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAElC,kEAAkE;QAClE,IAAI,CAAC,cAAc;aAChB,IAAI,CACH,2EAAoB,EAAE,EACtB,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,WAAW,KAAI,CAAC;;sGA3BI,2BAA2B;2GAA3B,2BAA2B;;;;;;;;;;;;;ACHjD;AAAA;AAAA;AAAA;AAAA;AAAyE;AACR;AACc;AAGxE,MAAe,iCAAkC,SAAQ,0FAA2B;IAOzF,YACqB,uBAAgD,EACnE,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAJf,4BAAuB,GAAvB,uBAAuB,CAAyB;QAPlD,WAAM,GAAmC,IAAI,kDAAa,EAE1E,CAAC;QAEe,gBAAW,GAAoB,IAAI,kDAAa,EAAU,CAAC;IAQ9E,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,0DAAa,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CACxD,2EAAoB,EAAE,EACtB,gEAAS,CAAC,CAAC,CAAC,UAAU,EAAE,eAAe,CAAC,EAAE,EAAE,CAC1C,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAC1C,UAAU,EACV,eAAe,CAChB,CACF,CACF,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;ACjCD;AAAA;AAAA;AAAA;AAAA;AAAgF;AAEW;AACrB;;;AAM/D,MAAM,yBAA0B,SAAQ,uGAAiC;IAC9E,YACE,uBAAgD,EAChD,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,uBAAuB,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED,IACI,KAAK,CAAC,KAA4B;QACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,IACI,UAAU,CAAC,UAAkB;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACO,sBAAsB,CAAC,aAAsB;QACrD,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;aAAM,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;;kGA9BU,yBAAyB;yGAAzB,yBAAyB;6FAAzB,yBAAyB;cAJrC,uDAAS;eAAC;gBACT,QAAQ,EACN,sEAAsE;aACzE;;kBAUE,mDAAK;mBAAC,kCAAkC;;kBAKxC,mDAAK;mBAAC,wCAAwC;;;;;;;;;;;;;;ACvBjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACA;AACE;AACU;AACJ;AACW;;AAO1E,MAAM,sBAAsB;IACjC,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,sBAAsB;YAChC,SAAS,EAAE,CAAC,kFAAuB,CAAC;SACrC,CAAC;IACJ,CAAC;;qGANU,sBAAsB;sKAAtB,sBAAsB,kBAJxB,CAAC,2EAAgB,EAAE,2EAAuB,CAAC;mIAIzC,sBAAsB,mBAHlB,sFAAyB,EAAE,6FAA4B,aAD5D,2EAAgB,EAAE,2EAAuB,aAEzC,sFAAyB,EAAE,6FAA4B;6FAEtD,sBAAsB;cALlC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,2EAAgB,EAAE,2EAAuB,CAAC;gBACpD,YAAY,EAAE,CAAC,sFAAyB,EAAE,6FAA4B,CAAC;gBACvE,OAAO,EAAE,CAAC,sFAAyB,EAAE,6FAA4B,CAAC;aACnE;;;;;;;;;;;;;;;;;;;;;;;;;ACX0C;AACsB;AACmB;AAClB;AACJ;AACwB;AACrB;;;;;AAW1D,MAAM,uBAAwB,SAAQ,gEAE5C;IAGC,YACmB,cAA8B,EAC9B,wBAAkD,EACnE,YAA0B;QAE1B,KAAK,CAAC,EAAE,IAAI,EAAE,yBAAyB,EAAE,YAAY,EAAE,CAAC,CAAC;QAJxC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,6BAAwB,GAAxB,wBAAwB,CAA0B;QAJpD,qBAAgB,GAAG,IAAI,4CAAO,EAAU,CAAC;QAQxD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,4FAA4F;QAC5F,wIAAwI;QACxI,IAAI,CAAC,gBAAgB;aAClB,IAAI,CACH,qEAAc,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EACvD,gEAAS,CAAC,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE;QACpC,+HAA+H;QAC/H,+CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACR,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,EAClE,gEAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAC/D,CACF,CACF;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,eAAe,CACb,UAAkB,EAClB,uBAA8C;QAE9C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,qBAAqB,GAAG,IAAI,CAAC,cAAc;aAC9C,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CACpD,CACF,CAAC;QAEJ,MAAM,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAC3D,0EAAe,CAAC,KAAK,CACtB,CAAC;QAEF,OAAO,0DAAa,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CACzD,0DAAG,CAAC,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,qBAAqB,IAAI,uBAAuB,IAAI,OAAO,CAAC,CACvG,CAAC;IACJ,CAAC;IAEa,qBAAqB,CAAC,SAAiB,EAAE,UAAkB;;YACvE,4DAA4D;YAC5D,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,uCAAuC,UAAU,eAAe,SAAS,EAAE;gBACxF,IAAI,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC;gBAC5C,OAAO,EAAE,0EAAe,CAAC,KAAK;aAC/B,CAAC,CAAC;QACL,CAAC;KAAA;;8FAnEU,uBAAuB;0GAAvB,uBAAuB,WAAvB,uBAAuB;6FAAvB,uBAAuB;cADnC,wDAAU;;;;;;;;;;;;;;AChBX;AAAA;AAAA;AAAA;AAAA;AAAgF;AAEW;AACrB;;;AAM/D,MAAM,4BAA6B,SAAQ,uGAAiC;IAGjF,YACE,uBAAgD,EAChD,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,uBAAuB,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAPrD,YAAO,GAA+B,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;IAQvE,CAAC;IAED,IACI,KAAK,CAAC,KAA4B;QACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,IACI,UAAU,CAAC,UAAkB;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACO,sBAAsB,CAAC,aAAsB;QACrD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;IAC7C,CAAC;;wGA9BU,4BAA4B;4GAA5B,4BAA4B;6FAA5B,4BAA4B;cAJxC,uDAAS;eAAC;gBACT,QAAQ,EACN,8EAA8E;aACjF;;kBAYE,mDAAK;mBAAC,sCAAsC;;kBAK5C,mDAAK;mBAAC,4CAA4C;;;;;;;;;;;;;;ACzBrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACH;AACC;AACM;;;;;;;;;;;;;ACHlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgF;AACtB;AACO;AACc;AACnB;;;AAKrD,MAAM,gBAAiB,SAAQ,0FAA2B;IAG/D,YACmB,cAA8B,EAC/C,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAJjB,mBAAc,GAAd,cAAc,CAAgB;QAHzC,kBAAa,GAAqB,IAAI,kDAAa,EAAW,CAAC;IAQvE,CAAC;IAED,IACI,YAAY,CAAC,KAAc;QAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAC5B,2EAAoB,EAAE,EACtB,gEAAS,CAAC,YAAY,CAAC,EAAE,CACvB,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,YAAY,CAAC,CAClD,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,sBAAsB,CAAC,aAAsB;QACrD,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;aAAM,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;;gFApCU,gBAAgB;gGAAhB,gBAAgB;6FAAhB,gBAAgB;cAH5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,kDAAkD;aAC7D;;kBAYE,mDAAK;mBAAC,wBAAwB;;;;;;;;;;;;;;ACpBjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACqB;AACP;AACJ;;AAQ5C,MAAM,aAAa;;4FAAb,aAAa;oJAAb,aAAa,mBAHb,CAAC,+DAAc,CAAC,YAFlB,CAAC,2EAAgB,CAAC;mIAKhB,aAAa,mBAJT,mEAAgB,aADrB,2EAAgB,aAGhB,mEAAgB;6FAEf,aAAa;cANzB,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,2EAAgB,CAAC;gBAC3B,YAAY,EAAE,CAAC,mEAAgB,CAAC;gBAChC,SAAS,EAAE,CAAC,+DAAc,CAAC;gBAC3B,OAAO,EAAE,CAAC,mEAAgB,CAAC;aAC5B;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACsB;;;AAQjE,IAAY,OAoBX;AApBD,WAAY,OAAO;IACjB,gDAAqC;IACrC,kDAAuC;IACvC,gEAAqD;IACrD,0DAA+C;IAC/C,0DAA+C;IAC/C,0DAA+C;IAC/C,4DAAiD;IACjD,8CAAmC;IACnC,0EAA+D;IAC/D,4DAAiD;IACjD,0DAA+C;IAC/C,4DAAiD;IACjD,8DAAmD;IACnD,0DAA+C;IAC/C,wEAA6D;IAC7D,kFAAuE;IACvE,8DAAmD;IACnD,0DAA+C;IAC/C,sEAA2D;AAC7D,CAAC,EApBW,OAAO,KAAP,OAAO,QAoBlB;AAGM,MAAM,cAAe,SAAQ,gEAA+B;IACjE,YAAY,YAA0B;QACpC,KAAK,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,OAAgB;QAC9B,wEAAwE;QACxE,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,oCAAoC,OAAO,EAAE;YAC1D,IAAI,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC;YAC/B,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAChD,CAAC;;4EAjBU,cAAc;iGAAd,cAAc,WAAd,cAAc;6FAAd,cAAc;cAD1B,wDAAU;;;;;;;;;;;;;;AC/BX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACG;AACF;;;;;;;;;;;;;ACFlC;AAAA;AAAA;AAAA;AAAA;AAA+E;AACN;AACR;AAK1D,MAAe,kCAAmC,SAAQ,0FAA2B;IAK1F,YACqB,wBAAkD,EACrE,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAJf,6BAAwB,GAAxB,wBAAwB,CAA0B;QALpD,WAAM,GAErB,IAAI,kDAAa,EAA0B,CAAC;IAQhD,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CACrB,gEAAS,CAAC,eAAe,CAAC,EAAE,CAC1B,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,eAAe,CAAC,CAC/D,CACF,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;AC3BD;AAAA;AAAA;AAAA;AAAA;AAAgF;AAEa;AACrB;;;AAMjE,MAAM,6BAA8B,SAAQ,yGAAkC;IAGnF,YACE,wBAAkD,EAClD,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,wBAAwB,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAPtD,YAAO,GAA+B,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;IAQvE,CAAC;IAED,IACI,KAAK,CAAC,KAA6B;QACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACO,sBAAsB,CAAC,aAAsB;QACrD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;IAC7C,CAAC;;0GAzBU,6BAA6B;6GAA7B,6BAA6B;6FAA7B,6BAA6B;cAJzC,uDAAS;eAAC;gBACT,QAAQ,EACN,gFAAgF;aACnF;;kBAYE,mDAAK;mBAAC,uCAAuC;;;;;;;;;;;;;;ACpBhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACH;AACC;AACK;;;;;;;;;;;;;ACHlD;AAAA;AAAA;AAAA;AAAA;AAAgF;AAEa;AACrB;;;AAMjE,MAAM,0BAA2B,SAAQ,yGAAkC;IAEhF,YACE,wBAAkD,EAClD,WAA6B,EAC7B,aAA+B;QAE/B,KAAK,CAAC,wBAAwB,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAC9D,CAAC;IAED,IACI,KAAK,CAAC,KAA6B;QACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACO,sBAAsB,CAAC,aAAsB;QACrD,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;aAAM,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;;oGA1BU,0BAA0B;0GAA1B,0BAA0B;6FAA1B,0BAA0B;cAJtC,uDAAS;eAAC;gBACT,QAAQ,EACN,wEAAwE;aAC3E;;kBAWE,mDAAK;mBAAC,mCAAmC;;;;;;;;;;;;;;ACnB5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACA;AACqB;AACP;AACJ;;AAUjE,MAAM,uBAAuB;IAClC,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,uBAAuB;YACjC,SAAS,EAAE,CAAC,oFAAwB,CAAC;SACtC,CAAC;IACJ,CAAC;;sGANU,uBAAuB;wKAAvB,uBAAuB,kBAPzB,CAAC,2EAAgB,CAAC;mIAOhB,uBAAuB,mBALhC,wFAA0B;QAC1B,+FAA6B,aAHrB,2EAAgB,aAKhB,wFAA0B,EAAE,+FAA6B;6FAExD,uBAAuB;cARnC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,2EAAgB,CAAC;gBAC3B,YAAY,EAAE;oBACZ,wFAA0B;oBAC1B,+FAA6B;iBAC9B;gBACD,OAAO,EAAE,CAAC,wFAA0B,EAAE,+FAA6B,CAAC;aACrE;;;;;;;;;;;;;;;;;;;;;;;;ACb0C;AACsB;AACgB;AACf;AAC5B;AACyD;;;;AASxF,MAAM,wBAAyB,SAAQ,gEAE7C;IACC,YACU,cAA8B,EACtC,YAA0B;QAE1B,KAAK,CAAC,EAAE,IAAI,EAAE,0BAA0B,EAAE,YAAY,EAAE,CAAC,CAAC;QAHlD,mBAAc,GAAd,cAAc,CAAgB;QAItC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,4FAA4F;QAC5F,yGAAyG;QACzG,IAAI,CAAC,cAAc;aAChB,oBAAoB,EAAE;aACtB,IAAI,CACH,8EAAuB,CAAC,IAAI,CAAC,EAC7B,gEAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;QACxB,+HAA+H;QAC/H,+CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACR,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,EACrD,gEAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,CACjD,CACF,CACF;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,eAAe,CACb,uBAA+C;QAE/C,OAAO,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC,IAAI,CACpD,gEAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,EACjE,0DAAG,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,IAAI,uBAAuB,CAAC,CACnE,CAAC;IACJ,CAAC;IAED;;;OAGG;IACG,aAAa,CAAC,uBAA+C;;YACjE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,EAC/D,eAAe,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;YAE7D,OAAO,eAAe,IAAI,uBAAuB,CAAC;QACpD,CAAC;KAAA;IAEa,sBAAsB,CAAC,WAAmB;;YACtD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,8EAAW,CAAC,WAAW,EAAE;gBACjD,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC,SAAS,EAAE,CAAC;YAEf,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,wCAAwC,WAAW,EAAE;gBAClE,IAAI,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC;gBAClC,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;;gGA/DU,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB;6FAAxB,wBAAwB;cADpC,wDAAU;;;;;;;;;;;;;;ACbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACK;AAEC;AAEC;;;;;;;;;;;;;ACJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACgB;AACQ;AACZ;AACqC;AAC/D;AACyB;;AAI3D,MAAM,GAAG,GAAG,MAAa,CAAC;AA4BnB,MAAM,yBAAyB,GAAiB,EAAE,CAAC;AAE1D;;GAEG;AACI,MAAe,aAAa;IAkCjC,YAAY,EACV,YAAY,EACZ,IAAI,GAAG,+CAAI,EAAE,EACb,YAAY,GAAG,EAAE,EACjB,YAAY,GAAG,yBAAoC,KAClB,EAAE;QAVpB,aAAQ,GAAG,IAAI,4CAAO,EAAwB,CAAC;QAG/C,iBAAY,GAA4B,EAAE,CAAC;QAQ1D,sIAAsI;QACtI,IAAI,CAAC,YAAY,GAAG,wDAAS,CAAC,YAAY,CAAC,CAAC;QAE5C,oDAAoD;QACpD,IAAI,CAAC,MAAM,GAAG,IAAI,oDAAe,CAAU,IAAI,CAAC,YAAY,CAAC,CAAC;QAE9D,uDAAuD;QACvD,IAAI,CAAC,YAAY,mCACZ,YAAY,KACf,CAAC,kDAAU,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,GAC7C,CAAC;QAEF,oDAAoD;QACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,gEAAgE;QAChE,IAAI,CAAC,MAAM,GAAG,IAAI,6DAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpC,yGAAyG;QACzG,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC7B;QAED,gDAAgD;QAChD,IAAI,CAAC,QAAQ;aACV,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,4EAAc,CAAC,IAAI,CAAC,CAAC;aAC1C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,oBAAoB;QACzB,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC;IAClC,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAyCD,GAAG,CAAC,IAAS,EAAE,UAAsC,EAAE;QACrD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC;aAC9B,IAAI,CAAC,4DAAK,EAAE,CAAC;aACb,SAAS,EAAE,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAE,kDAAU,CAAC,KAAK;YACtB,WAAW,EAAE,yBAAyB;SACvC,CAAC,CAAC;IACL,CAAC;IA6CD,MAAM,CACJ,IAAkC,EAClC,UAAsC,EAAE;QAExC,IAAI,MAAuB,CAAC;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,4HAA4H;YAC5H,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4DAAK,CAAC,GAAI,IAAc,CAAC,CAAC,CAAC;SACtD;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4DAAK,CAAC,IAAI,CAAC,CAAC,CAAC;SACxC;QACD,OAAO,MAAM,CAAC,IAAI,CAChB,2EAAoB,CAAC,8CAAO,CAAC,EAC7B,6DAAM,CACJ,KAAK,CAAC,EAAE,CACN,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/D,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,CACnC,CACF,CAAC;IACJ,CAAC;IAwDD,KAAK,CAAC,IAAS,EAAE,UAAsC,EAAE;QACvD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CACpC,0DAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,EAAC,CAAC,CAAC,EACzE,+DAAQ,EAAE,EACV,0DAAG,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,CACrB,GAAG,CAAC,CAAC,CAAC,6DAAc,CAAC,OAAO,EAAE,GAAG,EAAE,8CAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CACtD,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IAED;;;OAGG;IACO,QAAQ,CAAC,MAA4B;QAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,OAAO;QACb,OAAO,2DAAI,CAAC,CAAC,KAAc,EAAE,MAA4B,EAAE,EAAE;YAC3D,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE;gBAC7B,4DAA4D;gBAC5D,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW;oBACnC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,WAAW,EAAE;oBACzC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBAEhB,uCAAuC;gBACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAE9B,oEAAoE;gBACpE,IAAI,GAAG,CAAC,QAAQ,EAAE;oBAChB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,EAAE,IAAI,CAAC,CAAC;iBACzD;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAEO,YAAY,CAClB,KAAc,EACd,MAAqC;QAErC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnD,OAAO,WAAW,CAAC,CAAC,CAAE,WAAW,CAAC,KAAK,EAAE,MAAM,CAAa,CAAC,CAAC,CAAC,KAAK,CAAC;IACvE,CAAC;IAEO,WAAW;QACjB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;;AA/TD;;GAEG;AACW,wBAAU,GAAG,KAAK,CAAC;AAEjC;;GAEG;AACqB,uBAAS,GAAG,+CAAI,EAAE,CAAC;;6FAZvB,aAAa;;;;;;;;;;;;;AC5CnC;AAAA;AAAA,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,6BAAe;IACf,yBAAW;IACX,+BAAiB;IACjB,+BAAiB;AACnB,CAAC,EALW,UAAU,KAAV,UAAU,QAKrB;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACJ;AACa;AACwB;AACC;AAGrF;;;GAGG;AACI,SAAS,YAAY,CAC1B,KAAc,EACd,EAAE,IAAI,EAAgB;IAEtB,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAC/B,CAAC,CAAE,EAAc;QACjB,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;YACnB,CAAC,CAAE,mDAAI,CAAC,KAAK,EAAE,IAAI,CAAa;YAChC,CAAC,CAAC,sDAAO,CACL,oDAAK,CAAC,KAAK,CAAC,EACZ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAC9B,mDAAI,CAAC,kDAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EACvE,4CAAK,CACN,CAAC;AACR,CAAC;AAED;;GAEG;AACI,SAAS,SAAS,CACvB,KAAc,EACd,EAAE,OAAO,EAAsB;IAE/B,OAAO,oDAAK,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC;AAED;;;GAGG;AACI,SAAS,YAAY,CAC1B,KAAc,EACd,EAAE,IAAI,EAAE,OAAO,EAAyB;IAExC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAC/B,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,oDAAK,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,mGAAmG;YACnG,sDAAO,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,4CAAK,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,YAAY,GAA2C;IAC3D,CAAC,kDAAU,CAAC,GAAG,CAAC,EAAE,SAAS;IAC3B,CAAC,kDAAU,CAAC,MAAM,CAAC,EAAE,YAAY;IACjC,CAAC,kDAAU,CAAC,MAAM,CAAC,EAAE,YAAY;CAClC,CAAC;AA0BK,SAAS,YAAY,CAG1B,iBAAoC,EACpC,EAAE,UAAU,EAAE,KAAK,KAA0B,EAAE;IAE/C,OAAO,UACL,MAAuB,EACvB,GAAoB,EACpB,UAAsC;QAEtC,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;QAClC,UAAU,CAAC,KAAK,GAAG,UAAyB,GAAG,IAAW;YACxD,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAClD,OAAO,EAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,MAAM,EAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE;gBAChD,cAAc;gBACd,iBAAiB;gBACjB,UAAU;aACX,CAAC,CAAC;QACL,CAAQ,CAAC;QACT,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACI,MAAe,UAEpB,SAAQ,6DAAuC;IAC/C,YAAY,UAAyC,EAAE;QACrD,KAAK,iCACA,OAAO,KACV,YAAY,kCAAO,OAAO,CAAC,YAAY,GAAK,YAAY,KACxD,CAAC;IACL,CAAC;IA2BD,MAAM,CACJ,UAAgE,EAAE;QAElE,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAE,kDAAU,CAAC,MAAM;YACvB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAsDD,YAAY,CACV,SAAwB,EACxB,iBAAsB,EACtB,UAA0B;QAE1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;YACrC,iBAAiB,GAAG,CAAC,iBAAiB,CAAC,CAAC;SACzC;QACD,MAAM,iBAAiB,GAAG,CAAC,KAAc,EAAE,EAAE,CAC3C,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,OAAO,iBAAiB,OAAO,OAAO,CAAC,KAAK,CAAC;iBACvD,QAAQ,EAAE;iBACV,WAAW,EAAE,EAAE;YAClB,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,KAAK;SACR,CAAC,CAAC;QAEZ,OAAO,+CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACf,0DAAG,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAClC,kEAAW,CAAC,SAAS,CAAC,EACtB,+DAAQ,CAAC,GAAG,EAAE;;YACZ,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACzB,gBAAU,0CAAE,IAAI,GAAG;QACrB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAC,UAAuD,EAAE;QAC3D,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAE,kDAAU,CAAC,GAAG;YACpB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC,CAAC;IACL,CAAC;IA2CD,MAAM,CACJ,UAII,EAAE;QAEN,IAAI,CAAC,QAAQ,CAAC;YACZ,IAAI,EAAE,kDAAU,CAAC,MAAM;YACvB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC,CAAC;IACL,CAAC;CACF;;;;;;;;;;;;;AC9SD;AAAA;AAAA;AAA+C;AAKxC,MAAM,kBAAkB,GAAG,IAAI,4DAAc,CAElD,aAAa,CAAC,CAAC;;;;;;;;;;;;;ACPjB;AAAA;AAAA;AAAA;AAAA;AAA0F;AACzC;AACwB;;AAEzE;;;;GAIG;AACH,MAAM,GAAG,GAAG,MAAa,CAAC;AAE1B,MAAM,oBAAoB,GAAG;IAC3B,MAAM,EAAE,EAAE;IACV,QAAQ,EAAE;QACR,KAAK,EAAE,KAAK;QACZ,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,KAAK;KACZ;CACF,CAAC;AAGK,MAAM,WAAW;IACtB,YAC0C,SAAsB,EAAE,EACxC,YAAyB;QAEjD,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,gEAAgE,CACjE,CAAC;SACH;QACD,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,6DAAa,CAAC,oBAAoB,EAAE,CAAC;SACtC;aAAM,IAAI,GAAG,CAAC,4BAA4B,EAAE;YAC3C,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,4BAA4B,CAAC,OAAO,CACrD,oBAAoB,CACrB,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,SAAsB,EAAE;QACrC,OAAO;YACL,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,wEAAkB;oBAC3B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;0FA7BU,WAAW;gJAAX,WAAW,yDAEA,wEAAkB,6DACA,WAAW;6FAHxC,WAAW;cADvB,sDAAQ;;sBAGJ,sDAAQ;;sBAAI,oDAAM;uBAAC,wEAAkB;0BACA,WAAW;sBAAhD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;AC7BzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACiB;AACP;AACR;;AAG7C;;;GAGG;AAII,MAAM,YAAY;IAQvB;QAPQ,cAAS,GAAiC,IAAI,4CAAO,EAE1D,CAAC;QACI,cAAS,GAAmC,IAAI,oDAAe,CAErE,EAAE,CAAC,CAAC;QAGJ,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,2FAA2F;QAC3F,IAAI,CAAC,SAAS;aACX,IAAI,CACH,+DAAQ,CAAC,KAAK,CAAC,EAAE,CACf,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,0DAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAC1D,EACD,2DAAI,CACF,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,iCAAM,QAAQ,GAAK,QAAQ,EAAG,EACtD,IAAI,CAAC,SAAS,CAAC,KAAK,CACrB,CACF;aACA,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,yCAAyC;IACzC,QAAQ,CAAC,KAA0B;QACjC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,oEAAoE;IACpE,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IAED,oFAAoF;IACpF,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;;wEAxCU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,yDAAW;6FAEZ,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,yDAAW;aACxa;;;;;;;;;;;;;ACzC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,iBAAiB;AAC/B,kDAAkD;AAClD,MAAc;AACd,qEAAqE;AACrE,WAAmB;IAEnB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;IAE1D,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAEpD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,MAAM;QACN,WAAW;KACZ,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACpD,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAsC;;;;;;;;;;;;;ACAtC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AACZ;AAEzC;;GAEG;AACI,SAAS,UAAU;AACxB,yEAAyE;AACzE,WAAmB;AACnB,mEAAmE;AACnE,UAAkB;AAClB,kEAAkE;AAClE,UAAiB,EAAE;AACnB,qFAAqF;AACrF,WAAmB,OAAO;IAE1B,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,OAAO,CAAC;IAEzC,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEnD,MAAM,IAAI,GAAG;QACX,OAAO,EAAE,WAAW;QACpB,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE,OAAO;KACjB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,IAAI,CAAS,IAAI,EAAE,IAAI,EAAE,EAAE,YAAY,EAAE,MAAgB,EAAE,CAAC,CAAC;AAClE,CAAC;;;;;;;;;;;;;ACjCD;AAAA;AAAA;AAAA;AAA8B;;;;;;;;;;;;;ACA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AACO;AACrC;AAEwB;AACZ;AAEzC;;GAEG;AACI,SAAS,cAAc,CAC5B,SAAiB,EACjB,KAAkB;IAElB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,QAAQ,CAAC;IAE1C,uFAAyB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAEvD,IAAI,SAA8B,CAAC;IACnC,IAAI,KAAK,CAAC,IAAI,KAAK,gEAAU,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,gEAAU,CAAC,MAAM,EAAE;QACxE,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;KACxB;IAED,MAAM,IAAI,GAAG;QACX,SAAS;QACT,KAAK,EAAE;YACL,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,IAAI,EAAE,SAAS;YACf,SAAS,EAAE,kDAAG,EAAE;YAChB,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB;KACF,CAAC;IAEF,OAAO,IAAI,CAAC,IAAI,CAAO,IAAI,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAWzC;;GAEG;AACI,SAAS,eAAe;AAC7B,0EAA0E;AAC1E,WAAmB;AACnB,oEAAoE;AACpE,YAAoB;AACpB,6CAA6C;AAC7C,IAAY;AACZ,oDAAoD;AACpD,MAAc;AACd,mDAAmD;AACnD,EACE,UAAU,GAAG,YAAY,EACzB,MAAM,GAAG,EAAE,EACX,OAAO,GAAG,EAAE,KACS,EAAE;IAEzB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,sBAAsB,CAAC;IAExD,uFAAyB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAExD,MAAM,IAAI,GAAG;QACX,WAAW,EAAE,WAAW;QACxB,MAAM,EAAE,YAAY;QACpB,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,UAAU;QAChB,OAAO,EAAE,OAAO;QAChB,GAAG,EAAE,IAAI;KACV,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAc,IAAI,EAAE,IAAI,CAAC,CAAC;AACxD,CAAC;;;;;;;;;;;;;ACjDD;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AACc;AAC1B;AAiBzC;;GAEG;AACI,SAAS,WAAW;AACzB,0EAA0E;AAC1E,WAAmB;AACnB,oEAAoE;AACpE,YAAoB;AACpB,oCAAoC;AACpC,IAAU;AACV,oDAAoD;AACpD,MAAc;AACd,mDAAmD;AACnD,EACE,eAAe,GAAG,KAAK,EACvB,UAAU,GAAG,YAAY,EACzB,MAAM,GAAG,EAAE,EACX,OAAO,GAAG,OAAO,EACjB,OAAO,GAAG,EAAE,EACZ,WAAW,GAAG,iEAA0B,CAAC,SAAS,KAC5B,EAAE;IAE1B,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,kBAAkB,CAAC;IAEpD,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,UAAU,GAAG,IAAI,QAAQ,EAAE,CAAC;IAElC,UAAU,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IAC5C,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC9C,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAChD,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACpC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACtC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACpC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACtC,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC9C,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1E,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAc,IAAI,EAAE,UAAU,CAAC,CAAC;AAC9D,CAAC;;;;;;;;;;;;;AC9DD;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;ACA/B;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEd;AAEO;AASpD,SAAS,aAAa,CAC3B,OAAe,EACf,cAAsB,EACtB,eAAuB,EACvB,EACE,WAAW,EACX,WAAW,EACX,YAAY,KACyB,EAAE;IAEzC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,+DAAoB,CAAC;IAE9B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,OAAO;QACP,UAAU,EAAE,cAAc;QAC1B,WAAW;QACX,WAAW,EAAE,eAAe;QAC5B,YAAY;KACb,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAqB,IAAI,EAAE,cAAc,CAAC,CAAC;AACnD,CAAC;;;;;;;;;;;;;AC5CD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,oBAAoB,GAAG,SAAS,CAAC;AACvC,MAAM,iBAAiB,GAAG,eAAe,CAAC;AAC1C,MAAM,kBAAkB,GAAG,YAAY;AACvC,MAAM,qBAAqB,GAAG,GAAG,kBAAkB,MAAM,CAAC;AAC1D,MAAM,qBAAqB,GAAG,GAAG,kBAAkB,MAAM;AACzD,MAAM,kBAAkB,GAAG,OAAO,CAAC;;;;;;;;;;;;;ACL1C;AAAA;AAAA;AAAA;AAAA;AAAkE;AACb;AAEM;AAE3D;;GAEG;AACI,SAAS,qBAAqB;AACnC,oDAAoD;AACpD,SAA0B;IAE1B,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,SAAS,CAAC;IAE3C,uFAAyB,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;IAE9D,MAAM,MAAM,GAAG,+DAAgB,CAAC,SAAS,CAAC,CAAC;IAE3C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAkB,IAAI,EAAE,MAAM,CAAC,CAAC;AAC9D,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAA0C;;;;;;;;;;;;;ACA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkE;AACb;AACD;AACX;AAEzC,wGAAwG;AACjG,SAAS,iBAAiB;AAC/B,+CAA+C;AAC/C,OAAgB;AAChB,2DAA2D;AAC3D,QAAgB;AAChB,gEAAgE;AAChE,KAAa;IAEb,uCACK,OAAO,KACV,WAAW,EAAE;YACX,CAAC,QAAQ,CAAC,EAAE,sDAAe,CAAC,KAAK;SAClC,EACD,mBAAmB,EAAE,kBAAkB,EACvC,SAAS,EAAE;YACT,QAAQ;YACR,KAAK;SACN,IACD;AACJ,CAAC;AAED,gDAAgD;AACzC,SAAS,aAAa;AAC3B,+CAA+C;AAC/C,OAAgB;AAChB,2DAA2D;AAC3D,QAAgB;AAChB,gEAAgE;AAChE,KAAa;IAEb,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,UAAU,CAAC;IAE5C,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,kBAAkB,GAAY,iBAAiB,CACnD,OAAO,EACP,QAAQ,EACR,KAAK,CACN,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAU,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAClE,CAAC;;;;;;;;;;;;;AChDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AACM;AAE3D;;;GAGG;AACI,SAAS,YAAY;AAC1B,iEAAiE;AACjE,SAAiB;AACjB,mDAAmD;AACnD,QAAgB;IAEhB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAErD,MAAM,iBAAiB,GAAG,+DAAgB,CAAC;QACzC,UAAU,EAAE,SAAS;QACrB,SAAS,EAAE,QAAQ;KACpB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,iBAAiB;QACzB,YAAY,EAAE,MAAgB;KAC/B,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACvD,CAAC;;;;;;;;;;;;;AC/BD;AAAA;AAAA;AAAA;AAAgC;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAA;AAAkE;AACb;AACZ;AAEzC;;;;GAIG;AACI,SAAS,qBAAqB;AACnC,2DAA2D;AAC3D,SAAiB;AACjB,8BAA8B;AAC9B,WAAmB;IAEnB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,WAAW,SAAS,IAAI,WAAW,EAAE,CAAC;IAEvE,uFAAyB,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;IAE9D,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAA0C;;;;;;;;;;;;;ACA1C;AAAA;AAAA;AAAA;AAAA;AAAkE;AACb;AACZ;AAEzC;;GAEG;AACI,SAAS,aAAa;AAC3B,sCAAsC;AACtC,SAAiB;IAEjB,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,IAAI,GAAG,GAAG,gEAAqB,YAAY,SAAS,EAAE,CAAC;IAE7D,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AACM;AAE3D;;GAEG;AACI,SAAS,eAAe,CAC7B,SAAiB,EACjB,WAAmB;IAEnB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,gBAAgB,CAAC;IAElD,uFAAyB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAExD,MAAM,iBAAiB,GAAG,+DAAgB,CAAC;QACzC,UAAU,EAAE,SAAS;QACrB,QAAQ,EAAE,WAAW;KACtB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,iBAAiB;QACzB,YAAY,EAAE,MAAgB;KAC/B,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACvD,CAAC;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACCpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACC;AACG;AAC0B;AAa3D,MAAM,2BAA2B,GAAyB;IAC/D,WAAW,EAAE,iEAA0B,CAAC,SAAS;IACjD,MAAM,EAAE,EAAE;IACV,OAAO,EAAE,OAAO;IAChB,UAAU,EAAE,YAAY;CACzB,CAAC;AAEF,SAAS,YAAY,CAAC,QAA2B;IAC/C,MAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC7E,MAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC9D,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AACnC,CAAC;AAED;;GAEG;AACI,SAAS,aAAa;AAC3B,oEAAoE;AACpE,eAAuB;AACvB,8DAA8D;AAC9D,MAAc;AACd,qDAAqD;AACrD,MAAc;AACd,MAAM;AACN,OAAgB;AAChB,6DAA6D;AAC7D,UAA6C,2BAA2B;IAExE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,mCAC1D,2BAA2B,GAC3B,OAAO,CACX,CAAC;IAEF,OAAO,2DAAQ,CACb,UAAU,EACV,eAAe,EACf,MAAM,EACN,MAAM,EACN,OAAO,EACP,MAAM,EACN,WAAW,EACX,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,CACpE,CAAC,IAAI,CACJ,0DAAG,CAAC,CAAC,QAA8B,EAAE,EAAE;QACrC,yDAAM,CACJ,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,EAAE,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,UAAU;SAC/D,CAAC,EACF,YAAY,CAAC,QAAQ,CAAC,CACvB,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACrED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,gBAAgB;AAC9B,8DAA8D;AAC9D,UAAkB;AAClB,sEAAsE;AACtE,WAAmB;AACnB,oCAAoC;AACpC,cAAsB;AACtB,8DAA8D;AAC9D,MAAc;AACd,4DAA4D;AAC5D,WAAmB;AACnB,oCAAoC;AACpC,YAAoB;AACpB,qDAAqD;AACrD,SAAiB;AACjB,6DAA6D;AAC7D,MAAc;AACd,uCAAuC;AACvC,OAAe;AACf,sDAAsD;AACtD,WAAmB;AACnB,kDAAkD;AAClD,YAAoB;AACpB,gDAAgD;AAChD,QAAwC;AACxC,8FAA8F;AAC9F,cAAwB,EAAE;AAC1B,4FAA4F;AAC5F,eAAyB,EAAE;AAC3B,iGAAiG;AACjG,iBAA2B,EAAE;AAC7B,+FAA+F;AAC/F,kBAA4B,EAAE;IAE9B,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAEhC,uFAAyB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAEzD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;IAE3E,MAAM,UAAU,GAAG,+DAAgB,CAAC;QAClC,UAAU;QACV,WAAW;QACX,cAAc;QACd,MAAM;QACN,WAAW;QACX,YAAY;QACZ,SAAS;QACT,MAAM;QACN,OAAO;QACP,WAAW;QACX,QAAQ;QACR,WAAW;QACX,YAAY;QACZ,cAAc;QACd,eAAe;QACf,YAAY;KACb,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,OAAO;KACR,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAc,IAAI,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC;AAC9E,CAAC;;;;;;;;;;;;;AC7ED;AAAA;AAAA;AAAA;AAAqC;;;;;;;;;;;;;ACArC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,SAAS;AACvB,6DAA6D;AAC7D,SAAwB;AACxB,uCAAuC;AACvC,QAAsB;AACtB,wDAAwD;AACxD,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAElD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,UAAU,EAAE,SAAS;QACrB,SAAS,EAAE,QAAQ;KACpB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAS,IAAI,EAAE,cAAc,CAAC,CAAC;AACvC,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAA6B;;;;;;;;;;;;;ACA7B;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAmB3D;;GAEG;AACI,SAAS,kBAAkB;AAChC,4EAA4E;AAC5E,WAAmB;AACnB,kCAAkC;AAClC,EACE,SAAS,EACT,MAAM,EACN,WAAW,EACX,UAAU,EACV,UAAU,EACV,IAAI,EACJ,KAAK,EACL,WAAW,KAC+B,EAAE;IAE9C,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,SAAS,CAAC;IAE3C,uFAAyB,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAE3D,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,WAAW;QACX,UAAU,EAAE,SAAS;QACrB,UAAU,EAAE,MAAM;QAClB,KAAK,EAAE,WAAW;QAClB,UAAU;QACV,UAAU;QACV,SAAS,EAAE,IAAI;QACf,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAkB,IAAI,EAAE,cAAc,CAAC,CAAC;AAChD,CAAC;;;;;;;;;;;;;ACjED;AAAA;AAAA;AAAA;AAAuC;;;;;;;;;;;;;ACAvC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,WAAW;AACzB,+DAA+D;AAC/D,SAAwB;AACxB,0DAA0D;AAC1D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,UAAU,EAAE,SAAS;KACtB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAW,IAAI,EAAE,cAAc,CAAC,CAAC;AACzC,CAAC;;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;ACA/B;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAY3D;;;GAGG;AACI,SAAS,kBAAkB;AAChC,iEAAiE;AACjE,SAAiB;AACjB,8DAA8D;AAC9D,EACE,QAAQ,EACR,WAAW,EACX,UAAU,EACV,OAAO,KACmC,EAAE;IAE9C,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,SAAS,CAAC;IAE3C,uFAAyB,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAE3D,MAAM,MAAM,GAAG,+DAAgB,CAAC;QAC9B,UAAU,EAAE,SAAS;QACrB,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE,UAAU;QAClB,OAAO;KACR,CAAC,CAAC;IAEH,OAAO,IAAI;SACR,KAAK,CAAC,WAAW,CAAC;SAClB,SAAS,EAAE;SACX,GAAG,CAAoB,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;AAC9C,CAAC;;;;;;;;;;;;;AC/CD;AAAA;AAAA;AAAA;AAAuC;;;;;;;;;;;;;ACAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,gBAAgB;AAC9B,6DAA6D;AAC7D,MAAc;AACd,iEAAiE;AACjE,WAAmB;AACnB,qDAAqD;AACrD,KAAa;AACb,6BAA6B;AAC7B,KAAa;IAEb,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,oBAAoB,CAAC;IAEtD,uFAAyB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAEzD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAEpD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,MAAM;QACN,WAAW;QACX,KAAK;QACL,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,OAAO;QACP,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,EAAE;SACP,GAAG,CAAa,IAAI,EAAE,cAAc,CAAC,CAAC;AAC3C,CAAC;;;;;;;;;;;;;AC5CD;AAAA;AAAA;AAAA;AAAqC;;;;;;;;;;;;;ACArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEb;AAEM;AAS3D;;GAEG;AACI,SAAS,QAAQ;AACtB,8DAA8D;AAC9D,UAAkB;AAClB,oEAAoE;AACpE,WAAmB;AACnB,8DAA8D;AAC9D,UAAkB;AAClB,6CAA6C;AAC7C,MAAc;AACd,4CAA4C;AAC5C,OAAe;AACf,oDAAoD;AACpD,MAAc;AACd,gDAAgD;AAChD,WAAmB;AACnB,uDAAuD;AACvD,EACE,WAAW,EACX,OAAO,EACP,YAAY,EACZ,OAAO,KAC8B,EAAE;IAEzC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAEjD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;IAE3E,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,UAAU;QACV,WAAW;QACX,UAAU;QACV,MAAM;QACN,OAAO;QACP,MAAM;QACN,OAAO;QACP,WAAW;KACZ,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,OAAO;QACP,MAAM,EAAE,eAAe;QACvB,OAAO;QACP,YAAY,EAAE,YAAY,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;KACzE,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AAC/B,CAAC;;;;;;;;;;;;;ACtED;AAAA;AAAA;AAAA;AAA4B;;;;;;;;;;;;;ACA5B;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAEzC;;GAEG;AACI,SAAS,UAAU;AACxB,8DAA8D;AAC9D,SAAiB;AACjB,wDAAwD;AACxD,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEnD,MAAM,IAAI,GAAG,GAAG,gEAAqB,YAAY,SAAS,EAAE,CAAC;IAE7D,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAU,IAAI,CAAC,CAAC;AACxB,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAA8B;;;;;;;;;;;;;ACA9B;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAmB3D;;GAEG;AACI,SAAS,oBAAoB;AAClC,wEAAwE;AACxE,WAAmB,EACnB,EACE,SAAS,EACT,MAAM,EACN,WAAW,EACX,UAAU,EACV,UAAU,EACV,IAAI,EACJ,KAAK,EACL,WAAW,KACiC,EAAE;IAEhD,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,0BAA0B,CAAC;IAE5D,uFAAyB,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;IAE7D,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,WAAW;QACX,UAAU,EAAE,SAAS;QACrB,UAAU,EAAE,MAAM;QAClB,KAAK,EAAE,WAAW;QAClB,UAAU;QACV,UAAU;QACV,SAAS,EAAE,IAAI;QACf,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAA2B,IAAI,EAAE,cAAc,CAAC,CAAC;AACzD,CAAC;;;;;;;;;;;;;AChED;AAAA;AAAA;AAAA;AAAyC;;;;;;;;;;;;;ACAzC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAmB3D;;GAEG;AACI,SAAS,aAAa;AAC3B,wEAAwE;AACxE,WAAmB;AACnB,kCAAkC;AAClC,EACE,SAAS,EACT,MAAM,EACN,WAAW,EACX,UAAU,EACV,UAAU,EACV,IAAI,EACJ,KAAK,EACL,WAAW,KAC0B,EAAE;IAEzC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,qBAAqB,CAAC;IAEvD,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,WAAW;QACX,UAAU,EAAE,SAAS;QACrB,UAAU,EAAE,MAAM;QAClB,KAAK,EAAE,WAAW;QAClB,UAAU;QACV,UAAU;QACV,SAAS,EAAE,IAAI;QACf,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAoB,IAAI,EAAE,cAAc,CAAC,CAAC;AAClD,CAAC;;;;;;;;;;;;;ACjED;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,YAAY;AAC1B,iEAAiE;AACjE,SAAwB;AACxB,2CAA2C;AAC3C,WAA4B;AAC5B,2DAA2D;AAC3D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,gBAAgB,CAAC;IAElD,uFAAyB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAErD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,UAAU,EAAE,SAAS;QACrB,QAAQ,EAAE,WAAW;KACtB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAY,IAAI,EAAE,cAAc,CAAC,CAAC;AAC1C,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEM;AAE3D;;GAEG;AACI,SAAS,aAAa;AAC3B,kEAAkE;AAClE,SAAwB;AACxB,4DAA4D;AAC5D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,gBAAgB,CAAC;IAElD,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,eAAe,GAAG,+DAAgB,CAAC;QACvC,UAAU,EAAE,SAAS;KACtB,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAc,IAAI,EAAE,cAAc,CAAC,CAAC;AAC5C,CAAC;;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAA;AAAkC;;;;;;;;;;;;;ACElC;AAAA;AAAA;AAAA;AAAqD;AACZ;AAEzC;;;GAGG;AACI,SAAS,WAAW,CAAC,EAAE,WAAW,KAAiB,EAAE;IAG1D,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,OAAO,CAAC;IAEzC,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAW,IAAI,CAAC,CAAC;AACzB,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAgC;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAEzC;;GAEG;AACI,SAAS,eAAe;AAC7B,iEAAiE;AACjE,MAAc;AACd,8DAA8D;AAC9D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAExD,MAAM,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,MAAM,EAAE,CAAC;IAE/D,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAY,IAAI,CAAC,CAAC;AAC1B,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACApC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAEzC;;;GAGG;AACI,SAAS,WAAW;AACzB,iEAAiE;AACjE,WAAmB;AACnB,4DAA4D;AAC5D,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,IAAI,GAAG,GAAG,gEAAqB,cAAc,WAAW,EAAE,CAAC;IAEjE,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAW,IAAI,CAAC,CAAC;AACzB,CAAC;;;;;;;;;;;;;AC1BD;AAAA;AAAA;AAAA;AAAgC;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAwC;;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AACZ;AAazC;;GAEG;AACI,SAAS,mBAAmB;AACjC,qDAAqD;AACrD,KAAuB;IAEvB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,MAAM,CAAC;IAExC,uFAAyB,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC;IAE5D,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAO,IAAI,EAAE,KAAK,CAAC,CAAC;AAClD,CAAC;;;;;;;;;;;;;AC7BD;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;ACA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AACb;AAEM;AAS3D;;GAEG;AACI,SAAS,WAAW;AACzB,mCAAmC;AACnC,WAAmB;AACnB,oCAAoC;AACpC,UAAkB;AAClB,oCAAoC;AACpC,QAAgB;AAChB,gDAAgD;AAChD,MAAc;AACd,2DAA2D;AAC3D,EAAE,UAAU,GAAG,YAAY,EAAE,OAAO,GAAG,EAAE,KAAyB,EAAE;IAEpE,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,SAAS,CAAC;IAE3C,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;IAE3E,MAAM,UAAU,GAAG,+DAAgB,CAAC;QAClC,UAAU;QACV,WAAW;QACX,UAAU;QACV,QAAQ;QACR,MAAM;QACN,OAAO;KACR,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,OAAO;KACR,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,IAAI,CAAe,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;AACrE,CAAC;;;;;;;;;;;;;ACpDD;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0F;AAErD;AACY;AACU;AAEpD,SAAS,gBAAgB,CAC9B,GAAW,EACX,KAAa,EACb,MAAc;IAEd,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,4DAAiB,UAAU,CAAC;IAExC,uFAAyB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAEzD,MAAM,UAAU,GAAG,+DAAgB,CAAC;QAClC,GAAG;QACH,KAAK;QACL,MAAM;KACP,CAAC,CAAC;IAEH,OAAO,IAAI;SACR,SAAS,EAAE;SACX,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;SAChD,IAAI,CAAC,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,uEAAS,CAAC,yEAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC;;;;;;;;;;;;;AC1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACN;AACgB;AACmC;AAC9B;AAWpD,MAAM,2BAA2B,GAAyB;IAC/D,UAAU,EAAE,EAAE;IACd,gBAAgB,EAAE,KAAK;IACvB,gBAAgB,EAAE,IAAI;CACvB,CAAC;AAEK,SAAS,aAAa;AAC3B,6DAA6D;AAC7D,eAAuB;AACvB,uDAAuD;AACvD,MAAc;AACd,6DAA6D;AAC7D,UAAgC,2BAA2B;IAE3D,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,mCACnD,2BAA2B,GAC3B,OAAO,CACX,CAAC;IAEF,OAAO,+CAAE,CAAC,CAAC,CAAC,CAAC,IAAI;IACf,oDAAoD;IACpD,gEAAS,CAAC,GAAG,EAAE,CACb,8EAAiB,CAAC,MAAM,EAAE,eAAe,CAAC,CAC3C;IACD,4EAA4E;IAC5E,gEAAS,CAAC,CAAC,MAAkB,EAAE,EAAE,CAC/B,MAAM,CAAC,KAAK,KAAK,0DAAmB,CAAC,SAAS;QAC9C,MAAM,CAAC,KAAK,KAAK,0DAAmB,CAAC,OAAO;QAC1C,CAAC,CAAC,+CAAE,CAAC,MAAM,CAAC;QACZ,CAAC,CAAC,uDAAU,CAAC,2BAA2B,CAAC,CAC5C;IACD,+DAA+D;IAC/D,0FAA0F;IAC1F,iEAAY,CAAC;QACX,eAAe,EAAE,gBAAgB;QACjC,WAAW,EAAE,gBAAgB;QAC7B,UAAU,EAAE,UAAU;KACvB,CAAC;IACF,+DAA+D;IAC/D,gEAAS,CAAC,CAAC,MAAkB,EAAE,EAAE,CAC/B,MAAM,CAAC,KAAK,KAAK,0DAAmB,CAAC,OAAO;QAC5C,MAAM,CAAC,SAAS,CAAC,KAAK,KAAK,mEAA4B,CAAC,OAAO;QAC7D,CAAC,CAAC,uDAAU,CAAC,kDAAkD,CAAC;QAChE,CAAC,CAAC,+CAAE,CAAC,MAAM,CAAC,CACf,CACF,CAAC;AACJ,CAAC;;;;;;;;;;;;;AC7DD;AAAA;AAAA;AAAA;AAA+B;;;;;;;;;;;;;ACC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoF;AACtD;AAEuB;AAEZ;AAEzC,0CAA0C;AACnC,SAAS,WAAW;AACzB,2DAA2D;AAC3D,OAAe;AACf,8DAA8D;AAC9D,UAAkB;AAClB,0BAA0B;AAC1B,KAAY;AACZ,mDAAmD;AACnD,MAAc;AACd,kDAAkD;AAClD,KAAqB;IAErB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,QAAQ,CAAC;IAE1C,uFAAyB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEpD,MAAM,OAAO,GAAG;QACd,cAAc,EAAE,kBAAkB;KACnC,CAAC;IAEF,MAAM,IAAI,GAAiB;QACzB,GAAG,EAAE,OAAO;QACZ,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,UAAU;KACpB,CAAC;IAEF,MAAM,cAAc,GAAG,EAAE,OAAO,EAAE,CAAC;IAEnC,2FAA2F;IAC3F,IAAI,OAAe,CAAC;IACpB,IAAI;QACF,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,8EAAgB,EAAE,CAAC,CAAC;KACpD;IAAC,WAAM;QACN,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,mDAAI,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,8EAAgB,EAAE,CAAC,CAAC;KACnE;IAED,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAO,IAAI,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;AACpE,CAAC;;;;;;;;;;;;;ACjDD;AAAA;AAAA;AAAA;AAAqC;;;;;;;;;;;;;ACArC;AAAA;AAAA;AAAA;AAAqD;AAEZ;AAEzC;;;GAGG;AACI,SAAS,iBAAiB,CAAC,EAAE,WAAW,KAAiB,EAAE;IAChE,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,UAAU,CAAC;IAE5C,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAoB,IAAI,CAAC,CAAC;AAC9D,CAAC;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAmD;;AAG5C,MAAM,gBAAgB;IAG3B,YAAY,QAAkB;QAC5B,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACvC,CAAC;;+FALU,gBAAgB;0JAAhB,gBAAgB;6FAAhB,gBAAgB;cAD5B,sDAAQ;;;;;;;;;;;;;;AC8CT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;GAIG;AACH,IAAY,eAaX;AAbD,WAAY,eAAe;IACzB,6BAA6B;IAC7B,sEAAiB;IACjB,yDAAyD;IACzD,uDAAS;IACT,iEAAiE;IACjE,iEAAc;IACd,sCAAsC;IACtC,mEAAe;IACf,0CAA0C;IAC1C,iEAAc;IACd,yDAAyD;IACzD,uEAAiB;AACnB,CAAC,EAbW,eAAe,KAAf,eAAe,QAa1B;AAED,sEAAsE;AACtE,IAAY,gBAAmB;AAA/B,WAAY,gBAAgB;AAAE,CAAC,EAAnB,gBAAgB,KAAhB,gBAAgB,QAAG;AAE/B,uEAAuE;AACvE,IAAY,iBAAoB;AAAhC,WAAY,iBAAiB;AAAE,CAAC,EAApB,iBAAiB,KAAjB,iBAAiB,QAAG;AAwEhC,IAAY,8BAMX;AAND,WAAY,8BAA8B;IACxC,mDAAiB;IACjB,qEAAmC;IACnC,6DAA2B;IAC3B,uEAAqC;IACrC,+DAA6B;AAC/B,CAAC,EANW,8BAA8B,KAA9B,8BAA8B,QAMzC;AAkBD,oDAAoD;AACpD,IAAY,sBAKX;AALD,WAAY,sBAAsB;IAChC,iDAAuB;IACvB,yCAAe;IACf,6CAAmB;IACnB,+CAAqB;AACvB,CAAC,EALW,sBAAsB,KAAtB,sBAAsB,QAKjC;AAoCD,6CAA6C;AAC7C,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,mCAAe;IACf,2CAAuB;IACvB,mCAAe;AACjB,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAED,sDAAsD;AAC/C,MAAM,YAAY;CAaxB;AA4BD,IAAY,0BAOX;AAPD,WAAY,0BAA0B;IACpC,oBAAoB;IACpB,qDAAuB;IACvB,UAAU;IACV,yCAAW;IACX,WAAW;IACX,2CAAa;AACf,CAAC,EAPW,0BAA0B,KAA1B,0BAA0B,QAOrC;AA8CD;;GAEG;AACH,IAAY,4BASX;AATD,WAAY,4BAA4B;IACtC,iEAAiC;IACjC,qDAAqB;IACrB,iDAAiB;IACjB,+CAAe;IACf,+CAAe;IACf,6DAA6B;IAC7B,6DAA6B;IAC7B,iDAAiB;AACnB,CAAC,EATW,4BAA4B,KAA5B,4BAA4B,QASvC;AAwCD;;GAEG;AACH,IAAY,4BAMX;AAND,WAAY,4BAA4B;IACtC,uDAAuB;IACvB,mDAAmB;IACnB,qDAAqB;IACrB,iDAAiB;IACjB,uDAAuB;AACzB,CAAC,EANW,4BAA4B,KAA5B,4BAA4B,QAMvC;AAED;;GAEG;AACH,IAAY,mBAMX;AAND,WAAY,mBAAmB;IAC7B,0CAAmB;IACnB,0CAAmB;IACnB,0CAAmB;IACnB,8CAAuB;IACvB,0CAAmB;AACrB,CAAC,EANW,mBAAmB,KAAnB,mBAAmB,QAM9B;AAED,sCAAsC;AACtC,IAAY,cAEX;AAFD,WAAY,cAAc;IACxB,2CAAyB;AAC3B,CAAC,EAFW,cAAc,KAAd,cAAc,QAEzB;AAkED;;GAEG;AACI,MAAM,UAAU;CAStB;;;;;;;;;;;;;ACndD;AAAA;AAAA;AAAA;AAAgC;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAA;AAAkE;AACb;AAEZ;AAEzC;;;GAGG;AACI,SAAS,YAAY;AAC1B,2CAA2C;AAC3C,MAAc;IAEd,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,iBAAiB,CAAC;IAEnD,uFAAyB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAErD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAS,IAAI,EAAE,MAAM,CAAC,CAAC;AACrD,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAEzC;;GAEG;AACI,SAAS,aAAa;AAC3B,sCAAsC;AACtC,SAAiB;AACjB,sCAAsC;AACtC,OAAgB;IAEhB,MAAM,IAAI,GAAG,4DAAa,EAAE,CAAC;IAE7B,uFAAyB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,IAAI,GAAG,GAAG,gEAAqB,YAAY,SAAS,EAAE,CAAC;IAE7D,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9C,CAAC;;;;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAA;AAAkE;AAEb;AAEZ;AAEzC;;;GAGG;AACI,SAAS,eAAe;AAC7B,+CAA+C;AAC/C,SAAoB;IAEpB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,gBAAgB,CAAC;IAElD,uFAAyB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAExD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAY,IAAI,EAAE,SAAS,CAAC,CAAC;AAC3D,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAmC;;;;;;;;;;;;;ACAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEb;AAEZ;AAEzC;;;GAGG;AACI,SAAS,cAAc;AAC5B,wBAAwB;AACxB,QAAkB;IAElB,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,GAAG,gEAAqB,cAAc,CAAC;IAEhD,uFAAyB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAEvD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAE1D,MAAM,cAAc,GAAG;QACrB,OAAO;KACR,CAAC;IAEF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAW,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;AACzE,CAAC;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAA8B;;;;;;;;;;;;;ACA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACe;AAEhB;AAES;AAE3D;;GAEG;AACI,SAAS,UAAU;AACxB,wFAAwF;AACxF,MAAc,EACd,EAAE,WAAW,KAAiB,EAAE;IAEhC,MAAM,IAAI,GAAG,4DAAa,EAAE,EAC1B,IAAI,GAAG,6DAAkB,CAAC;IAE5B,uFAAyB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEnD,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;IAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAE1D,MAAM,eAAe,GAAG,+DAAgB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAErD,MAAM,cAAc,GAAG;QACrB,OAAO;QACP,MAAM,EAAE,eAAe;KACxB,CAAC;IAEF,OAAO,IAAI;SACR,SAAS,EAAE;SACX,KAAK,CAAC,WAAW,CAAC;SAClB,GAAG,CAAe,IAAI,EAAE,cAAc,CAAC,CAAC;AAC7C,CAAC;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACC;AACD;AACK;AAEvD;;GAEG;AACI,SAAS,gBAAgB;AAC9B,0DAA0D;AAC1D,MAAuB;IAEvB,IAAI,MAAM,GAAe,IAAI,+DAAU,EAAE,CAAC;IAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAC9C,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE;YAClC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACjC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACI,SAAS,aAAa;IAC3B,IAAI,CAAC,mEAAgB,CAAC,QAAQ,EAAE;QAC9B,MAAM,IAAI,KAAK,CACb,0HAA0H,CAC3H,CAAC;KACH;IACD,OAAO,mEAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,gEAAW,CAAC,CAAC;AACpD,CAAC;;;;;;;;;;;;;AC/BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDF;AACoC;AACc;AAC3B;AACP;AACa;AAEvB;AACoB;AACL;;;;AAgBzD,MAAM,2BAA2B,GAAyB;IAC/D,gBAAgB,EAAE,KAAK;IACvB,gBAAgB,EAAE,KAAK;IACvB,wBAAwB,EAAE,KAAK;IAC/B,iBAAiB,EAAE,KAAK;IACxB,gBAAgB,EAAE,KAAK;CACxB,CAAC;AAKK,MAAM,eAAgB,SAAQ,gEAAgC;IAMnE,YACmB,cAA8B,EAC/C,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,2BAA2B;YACzC,IAAI,EAAE,iBAAiB;YACvB,YAAY;SACb,CAAC,CAAC;QAPc,mBAAc,GAAd,cAAc,CAAgB;QANhC,kBAAa,GAAG,IAAI,4CAAO,EAAU,CAAC;QACtC,mBAAc,GAAG,IAAI,4CAAO,EAAQ,CAAC;QACrC,kBAAa,GAAG,IAAI,4CAAO,EAAU,CAAC;QACtC,mBAAc,GAAG,IAAI,4CAAO,EAAU,CAAC;QAWtD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,aAAa;aACf,IAAI,CACH,gEAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EACpD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAElC,IAAI,CAAC,aAAa;aACf,IAAI,CACH,gEAAS,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EACpD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAElC,6EAA6E;QAC7E,IAAI,CAAC,cAAc;aAChB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,EAC9D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,mEAAmE;QACnE,IAAI,CAAC,QAAQ;aACV,IAAI,CACH,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,EAC/D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,kEAAkE;QAClE,IAAI,CAAC,cAAc;aAChB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,KAAK,CAAC,CAAC,oBAAoB,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAC9D,EACD,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,iDAAI,CAAC,QAAQ,CAAC,CAAC,EACrC,+DAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EACnD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,MAAc;QACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,MAAc;QACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACG,aAAa,CAAC,QAAgB;;YAClC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC,GAAG,CAAC;gBACd,oBAAoB;gBACpB,SAAS;gBACT,cAAc;gBACd,QAAQ;aACT,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;OAGG;IACG,eAAe,CAAC,UAAkB;;YACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC,GAAG,CAAC;gBACd,oBAAoB;gBACpB,SAAS;gBACT,gBAAgB;gBAChB,UAAU;aACX,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;OAGG;IACH,gBAAgB,CAAC,QAAgB;QAC/B,OAAO,IAAI,CAAC,cAAc;aACvB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,MAAM,CAAC;YACV,oBAAoB;YACpB,SAAS;YACT,cAAc;YACd,QAAQ;SACT,CAAC,CACH,CACF,CAAC;IACN,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,UAAkB;QACnC,OAAO,IAAI,CAAC,cAAc;aACvB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,MAAM,CAAC;YACV,oBAAoB;YACpB,SAAS;YACT,gBAAgB;YAChB,UAAU;SACX,CAAC,CACH,CACF,CAAC;IACN,CAAC;IAED;;OAEG;IACG,YAAY,CAAC,MAAc;;;YAC/B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAC1D,QAAQ,SAAG,MAAM,0CAAE,EAAE,CAAC;YACxB,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,MAAM,CAAC;oBACV,WAAW,EAAE,UAAU,QAAQ,UAAU;oBACzC,IAAI,EAAE,CAAC,oBAAoB,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;oBACjE,OAAO,EAAE,MAAM;iBAChB,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACjC;;KACF;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CACjD,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,MAAM,CAAC,CAAC,oBAAoB,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAC/D,EACD,0DAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CACnB,CAAC;IACJ,CAAC;IAIa,kBAAkB,CAAC,MAAc;;YAC7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE7D,MAAM,oBAAoB,GAAG,MAAM,+EAAY,iCAC1C,MAAM,KACT,UAAU,EAAE,SAAS,IACrB,CAAC,SAAS,EAAE,CAAC;YAEf,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;YAExC,OAAO,oBAAoB,CAAC;QAC9B,CAAC;KAAA;IAIa,kBAAkB,CAAC,MAAc;;;YAC7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAC1D,QAAQ,SAAG,MAAM,0CAAE,EAAE,CAAC;YAExB,MAAM,oBAAoB,GAAG,MAAM,+EAAY,CAC7C,SAAS,EACT,QAAQ,CACT,CAAC,SAAS,EAAE,CAAC;YAEd,IAAI,oBAAoB,KAAK,IAAI,EAAE;gBACjC,IAAI,CAAC,MAAM,CAAC;oBACV,WAAW,EAAE,UAAU,QAAQ,UAAU;oBACzC,IAAI,EAAE,CAAC,oBAAoB,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;iBAClE,CAAC,CAAC;aACJ;;KACF;IAIa,yBAAyB,CAAC,QAAkB;;YACxD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAC1D,cAAc,GAAG,6EAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAErD,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,sCAAsC;gBACnD,IAAI,EAAE,CAAC,oBAAoB,EAAE,SAAS,EAAE,gBAAgB,CAAC;gBACzD,OAAO,EAAE,cAAc;aACxB,CAAC,CAAC;QACL,CAAC;KAAA;IAMa,sBAAsB,CAAC,SAAiB;;YACpD,MAAM,QAAQ,GAAG,MAAM,8EAAW,CAAC,SAAS,EAAE;gBAC5C,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC,SAAS,EAAE,CAAC;YAEf,MAAM,YAAY,GAAG,6EAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAErD,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,wBAAwB;gBACrC,IAAI,EAAE,CAAC,oBAAoB,EAAE,SAAS,EAAE,cAAc,CAAC;gBACvD,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;QACL,CAAC;KAAA;IAIa,kBAAkB,CAAC,MAAc;;YAC7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7D,OAAO,+EAAY,iCAAM,MAAM,KAAE,UAAU,EAAE,SAAS,IAAG,CAAC,SAAS,EAAE,CAAC;QACxE,CAAC;KAAA;;8EApPU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,4EAAoB;AAkLhC;IAFC,gFAAW,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACrD,0EAAY,CAAC,kBAAkB,CAAC;;;;yDAYhC;AAID;IAFC,gFAAW,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACrD,0EAAY,CAAC,kBAAkB,CAAC;;;;yDAgBhC;AAID;IAFC,gFAAW,CAAC,+BAA+B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC/D,0EAAY,CAAC,0BAA0B,CAAC;;;;gEAUxC;AAMD;IAJC,gFAAW,CAAC,iDAAiD,EAAE;QAC9D,OAAO,EAAE,IAAI;KACd,CAAC;IACD,0EAAY,CAAC,mBAAmB,CAAC;;;;6DAajC;AAID;IAFC,gFAAW,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACnD,0EAAY,CAAC,kBAAkB,CAAC;;;;yDAIhC;6FApPU,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,4EAAoB;aACjC;;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAA6D;;AAGtD,MAAM,oBAAoB;IAC/B,YAAoC,YAAkC;QACpE,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,yEAAyE,CAC1E,CAAC;SACH;IACH,CAAC;;mGAPU,oBAAoB;kKAApB,oBAAoB,yDACmB,oBAAoB;6FAD3D,oBAAoB;cADhC,sDAAQ;sCAE2C,oBAAoB;sBAAzD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACJnC;AAAA;AAAA;AAAA;AAAyC;;;;;;;;;;;;;ACAzC;AAAA;AAAA;AAA+C;AAMxC,MAAM,wBAAwB,GAAG,IAAI,4DAAc,CACxD,mBAAmB,CACpB,CAAC;;;;;;;;;;;;;ACRF;AAAA;AAAA;AAAA;AAAA;AAAkF;AACS;AAChC;;;AAGpD,MAAM,iBAAiB;IAC5B,YACE,kBAAsC,EACd,YAA+B;QAEvD,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QACD,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,MAAyB;QACtC,OAAO;YACL,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE;gBACT,uEAAkB;gBAClB;oBACE,OAAO,EAAE,oFAAwB;oBACjC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;;gGAxBU,iBAAiB;4JAAjB,iBAAiB,0LAGY,iBAAiB;6FAH9C,iBAAiB;cAD7B,sDAAQ;yHAIiC,iBAAiB;sBAAtD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR0B;AACkB;AACE;AACQ;AACI;AACxB;AACJ;AAC1B;AACsB;AACwC;;;;;AAE3F,SAAS,oBAAoB,CAAC,KAAkB;IAC9C,OAAO,KAAK,YAAY,6DAAa,CAAC;AACxC,CAAC;AAOM,MAAM,kBAAmB,SAAQ,gEAAmC;IACzE,YACmB,qBAA4C,EAE5C,MAAyB,EACzB,MAAc,EAC/B,YAA0B;QAE1B,KAAK,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAAE,YAAY,EAAE,CAAC,CAAC;QANnC,0BAAqB,GAArB,qBAAqB,CAAuB;QAE5C,WAAM,GAAN,MAAM,CAAmB;QACzB,WAAM,GAAN,MAAM,CAAQ;IAIjC,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CACH,6DAAM,CAAC,oBAAoB,CAAC,EAC5B,gEAAS,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EACnD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAIa,mBAAmB,CAAC,KAAoB;;YACpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC;gBAClD,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAqB;gBACzC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;gBACpB,SAAS,EAAE,kDAAG,EAAE;gBAChB,GAAG,EAAE,KAAK,CAAC,iBAAiB;gBAC5B,MAAM;aACP,CAAC;YAEF,OAAO,sFAAmB,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QAC3D,CAAC;KAAA;;oFArCU,kBAAkB,uMAGnB,qFAAwB;qGAHvB,kBAAkB,WAAlB,kBAAkB;AAuB7B;IAFC,gFAAW,CAAC,+BAA+B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC/D,0EAAY,CAAC,2BAA2B,CAAC;;mFACD,6DAAa;;6DAcrD;6FArCU,kBAAkB;cAD9B,wDAAU;;sBAIN,oDAAM;uBAAC,qFAAwB;;;;;;;;;;;;;;ACvBpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACH;AACQ;AACP;AACL;AACS;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACND;AAC4B;AACQ;AAW3C;AAC8B;AACA;AACX;AACxB;AACoB;AACI;AACO;;;;;;;AAmBvD,MAAM,8BAA8B,GAA4B;IACrE,iBAAiB,EAAE,KAAK;CACzB,CAAC;AAKK,MAAM,kBAAmB,SAAQ,gEAAmC;IAIzE,YACmB,qBAA4C,EAC5C,gBAAkC,EAClC,cAA8B,EAC9B,WAA+B,EACvC,YAA0B;QAEnC,KAAK,CAAC;YACJ,YAAY,EAAE,8BAA8B;YAC5C,IAAI,EAAE,oBAAoB;YAC1B,YAAY;SACb,CAAC,CAAC;QAVc,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAoB;QACvC,iBAAY,GAAZ,YAAY,CAAc;QARpB,iBAAY,GAAG,IAAI,4CAAO,EAAsB,CAAC;QACjD,sBAAiB,GAAG,IAAI,4CAAO,EAAQ,CAAC;QAcvD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,8FAA8F;QAC9F,IAAI,CAAC,YAAY;aACd,IAAI,CACH,iEAAU,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CACxD,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAC/D,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEK,WAAW,CACf,QAAgB,EAChB,OAAe,EACf,KAAW,EACX,UAAyB,EAAE;;YAE3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,OAAO;gBACP,KAAK;gBACL,OAAO;gBACP,GAAG,EAAE,MAAM;aACZ,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;QACzD,CAAC;KAAA;IAEK,eAAe,CACnB,QAAgB,EAChB,OAAe,EACf,KAAa,EACb,UAAyB,EAAE;;YAE3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACrB,QAAQ;gBACR,OAAO;gBACP,KAAK;gBACL,OAAO;gBACP,GAAG,EAAE,MAAM;aACZ,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;QACzD,CAAC;KAAA;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAC;IAGa,iBAAiB,CAC7B,UAAkB,EAClB,OAAe,EACf,KAAoB,EACpB,EAAE,0BAA0B,EAAE,eAAe,GAAG,KAAK,KAAoB,EAAE,EAC3E,MAAuB,MAAM;;YAE7B,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC5C,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gBACvC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aAC5D,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAE3C,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,GAAG,EAAE,CACT,8EAAW,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,KAAa,EAAE,QAAQ,EAAE;oBAChE,eAAe;oBACf,OAAO;iBACR,CAAC;gBACJ,IAAI,EAAE,GAAG,EAAE,CACT,kFAAe,CACb,OAAO,CAAC,OAAO,EACf,UAAU,EACV,KAAe,EACf,QAAQ,EACR;oBACE,OAAO;iBACR,CACF;aACJ,CAAC;YAEF,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,EACrC,WAAW,GAAG,YAAY,EAAE,CAAC,SAAS,EAAE,CAAC;YAE3C,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,WAAW;aACvB,CAAC,CAAC;YAEH,gFAAgF;YAChF,MAAM,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAC7C,gFAAa,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAC1D,CAAC;YAEF,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,YAAY;aACxB,CAAC,CAAC;YAEH,oGAAoG;YACpG,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CACnE,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE;gBAClB,IAAI,CAAC,0BAA0B,EAAE;oBAC/B,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAC5C,KAAK,EACL,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,CAAC,MAAM,EACb;wBACE,WAAW,EAAE,MAAM,CAAC,MAAM;wBAC1B,SAAS,EAAE,OAAO;wBAClB,UAAU,EAAE,YAAY;wBACxB,WAAW,EAAE,WAAW;wBACxB,OAAO,EAAE,MAAM,CAAC,OAAO;qBACxB,CACF,CAAC;iBACH;gBACD,OAAO,CAAC,KAAK,EAAE,MAAM,CAA8B,CAAC;YACtD,CAAC,CACF,CAAC;YAEF,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,eAAe;aAC3B,CAAC,CAAC;YAEH,kFAAkF;YAClF,IAAI,0BAA0B,EAAE;gBAC9B,MAAM,gBAAgB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;oBACvE,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,KAAK,uFAA4B,CAAC,QAAQ,EAAE;wBACnE,MAAM,WAAW,GAAG,MAAM,mFAAgB,CACxC,YAAY,EACZ,OAAO,CAAC,OAAO,EACf,UAAU,EACV,EAAE,EACF,MAAM,CAAC,MAAM,EACb,UAAU,EACV,OAAO,EACP,QAAQ,EACR,MAAM,CAAC,OAAO,EACd,qFAA0B,CAAC,IAAI,EAC/B,MAAM,CAAC,MAAM,EACb,0BAA0B,CAC3B,CAAC,SAAS,EAAE,CAAC;wBAEd,OAAO,gFAAa,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;qBACvE;yBAAM;wBACL,OAAO,KAAK,CAAC;qBACd;gBACH,CAAC,EAAC,CAAC;gBAEH,MAAM,IAAI,CAAC,YAAY,CAAC;oBACtB,WAAW,EAAE,yBAAyB;oBACtC,SAAS,EAAE,gBAAgB;iBAC5B,CAAC,CAAC;aACJ;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAE9C,OAAO,UAAU,CAAC,SAAS,EAAE,CAAC;QAChC,CAAC;KAAA;;oFAtLU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,2EAAmB;AAwE/B;IADC,0EAAY,CAAC,mBAAmB,CAAC;;;;2DAiHjC;6FAtLU,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAmB;aAChC;;;;;;;;;;;;;;;;;;;;;;;;;AC7C0C;AACsB;AACmD;AAC7D;AAEN;AACZ;AACyB;;;AAmCvD,MAAM,gBAAiB,SAAQ,gEAAiC;IACrE,YAAY,YAA0B;QACpC,KAAK,CAAC;YACJ,IAAI,EAAE,kBAAkB;YACxB,YAAY;SACb,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,sFAAsF;QACtF,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;aAChC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,oBAAoB,CAAC,EAAE,CAChC,IAAI,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,CACxD,CAAC;IACN,CAAC;IAED;;OAEG;IACH,cAAc;IACZ,4DAA4D;IAC5D,UAAkB;IAClB,6CAA6C;IAC7C,OAAgB;IAChB,4CAA4C;IAC5C,cAAsB;IACtB,4CAA4C;IAC5C,YAAoB;IACpB,8CAA8C;IAC9C,WAAmB;IACnB,8CAA8C;IAC9C,SAAiB;IACjB,gDAAgD;IAChD,OAAe;IACf,yCAAyC;IACzC,MAAc;IACd,wDAAwD;IACxD,WAAmB;IACnB,0DAA0D;IAC1D,WAAuB;QAEvB,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,4BAA4B;YACzC,IAAI,EAAE,CAAC,sBAAsB,EAAE,MAAM,CAAC;YACtC,OAAO,EAAE;gBACP,UAAU,EAAE,UAAU;gBACtB,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,MAAM;gBACd,cAAc,EAAE,cAAc;gBAC9B,YAAY,EAAE,YAAY;gBAC1B,WAAW,EAAE,WAAW;gBACxB,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,WAAW;gBACxB,OAAO,EAAE,OAAO;gBAChB,WAAW,EAAE,WAAW;gBACxB,WAAW,EAAE,IAAI,GAAG,EAAU;gBAC9B,YAAY,EAAE,IAAI,GAAG,EAAU;gBAC/B,cAAc,EAAE,IAAI,GAAG,EAAU;gBACjC,eAAe,EAAE,IAAI,GAAG,EAAU;aACnC;SACF,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACG,cAAc,CAAC,MAAc;;YACjC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC;QACpD,CAAC;KAAA;IAED;;;OAGG;IACG,yBAAyB,CAAC,SAAiB;;YAC/C,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACxD,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC;gBAChC,IAAI,CAAC,GAAG,CAAC,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;aAChD,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,CAAC;KAAA;IAED;;;OAGG;IACH,YAAY,CAAC,UAAsB;;QACjC,OAAO,CACL,iBAAU,0CAAE,KAAK,MAAK,8EAAmB,CAAC,SAAS;YACnD,uBAAU,0CAAE,SAAS,0CAAE,KAAK,MAAK,uFAA4B,CAAC,QAAQ,CACvE,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,wBAAwB,CACtB,UAAsB,EACtB,OAAgB,EAChB,cAAsB,EACtB,YAAoB,EACpB,MAAc,EACd,UAMI,EAAE;QAEN,MAAM,MAAM,mBACV,WAAW,EAAE,OAAO,EACpB,SAAS,EAAE,OAAO,EAClB,UAAU,EAAE,YAAY,EACxB,WAAW,EAAE,WAAW,EACxB,OAAO,EAAE,EAAE,IACR,OAAO,CACX,CAAC;QAEF,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;YACjC,IAAI,CAAC,cAAc,CACjB,MAAM,CAAC,UAAU,EACjB,OAAO,EACP,cAAc,EACd,YAAY,EACZ,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,OAAO,EACd,MAAM,EACN,MAAM,CAAC,WAAW,EAClB,UAAU,CACX,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,iBAAiB;IACf,oDAAoD;IACpD,MAAc;QAEd,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,wBAAwB;YACrC,IAAI,EAAE,CAAC,sBAAsB,EAAE,MAAM,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,4BAA4B,CAAC,SAAiB;QAC5C,OAAO,0DAAa,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;SACnD,CAAC,CAAC,IAAI,CACL,0DAAG,CAAC,CAAC,CAAC,oBAAoB,EAAE,OAAO,CAAC,EAAE,EAAE,CACtC,OAAO;aACJ,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;aAC3C,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CACxC,CACF,CAAC;IACJ,CAAC;IAEO,4BAA4B,CAClC,oBAAoD;QAEpD,MAAM,sBAAsB,GAAG,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,MAAM,CACxE,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,EAAE;;YAAC,wCAC9B,MAAM,KACT,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;oBACxB,GAAG,MAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,uCAAI,EAAE,EAAC;oBACzC,MAAM;iBACP,IACD;SAAA,EACF,EAA0B,CAC3B,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,yCAAyC;YACtD,OAAO,EAAE;gBACP,sBAAsB;aACvB;SACF,CAAC,CAAC;IACL,CAAC;;gFAtMU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,0EAAmB;6FAEpB,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,0EAAmB;aAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzC0C;AACoC;AACvB;AACU;AACP;AACJ;AAExB;AACoB;AACK;AACM;;;;;AAE9D,QAAQ,CAAC,CAAC,UAAU,CAAC,eAA4C;IAC/D,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;QACxD,MAAM;YACJ,EAAE;YACF,IAAI;SACL,CAAC;KACH;AACH,CAAC;AASM,MAAM,sBAAuB,SAAQ,gEAE3C;IAIC,YACmB,gBAAkC,EAClC,cAA8B,EAC/C,YAA0B;QAE1B,KAAK,CAAC,EAAE,IAAI,EAAE,wBAAwB,EAAE,YAAY,EAAE,CAAC,CAAC;QAJvC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,mBAAc,GAAd,cAAc,CAAgB;QALhC,gBAAW,GAAG,IAAI,4CAAO,EAAU,CAAC;QACpC,mBAAc,GAAG,IAAI,4CAAO,EAAU,CAAC;QAQtD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,WAAW;aACb,IAAI,CACH,iEAAU,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EACnD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAEK,UAAU,CAAC,MAAc;;YAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;QACxD,CAAC;KAAA;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC5C,CAAC;IAIa,gBAAgB,CAAC,MAAc;;YAC3C,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC5C,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gBACvC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC;aAC7C,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAEnD,OAAO,6EAAU,CAAC,OAAO,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;QAChE,CAAC;KAAA;;4FA5CU,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB,mBAFrB,2EAAmB;AAqC/B;IAFC,gFAAW,CAAC,2BAA2B,CAAC;IACxC,0EAAY,CAAC,kBAAkB,CAAC;;;;8DAUhC;6FA5CU,sBAAsB;cAHlC,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAmB;aAChC;;;;;;;;;;;;;;AC3BD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACsB;AAEH;;;AASvD,MAAM,gBAAiB,SAAQ,gEAAiC;IACrE,YAAY,YAA0B;QACpC,KAAK,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,YAAY,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,eAAe,CAAC,eAA4C;QAC9D,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,0BAA0B;YACvC,OAAO,EAAE,EAAE,eAAe,EAAE;SAC7B,CAAC,CAAC;IACL,CAAC;;gFAVU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,0EAAmB;6FAEpB,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,0EAAmB;aAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX0C;AAC4B;AACQ;AACzB;AACY;AACP;AACJ;AAClB;AAC4B;AACH;;;;;AAYvD,MAAM,YAAa,SAAQ,gEAA6B;IAC7D,YACmB,qBAA4C,EAC5C,cAA8B,EAC/C,YAA0B;QAE1B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,YAAY;SACb,CAAC,CAAC;QAPc,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QAO/C,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,cAAc;aAChB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAEjC,0DAAa,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;SAC/C,CAAC;aACC,IAAI,CACH,mEAAY,CAAC,EAAE,CAAC,EAChB,6DAAM,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAC9B,gEAAS,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,CAC9B,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAC1C,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,KAAK,CAAC,KAAU;QAClB,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,qBAAqB;YAClC,OAAO,EAAE,EAAE,KAAK,EAAE;SACnB,CAAC,CAAC;IACL,CAAC;IAIa,mBAAmB,CAAC,MAAc,EAAE,OAAe;;YAC/D,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gBACvC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aAC5D,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,MAAM,2EAAQ,CAC1B,YAAY,EACZ,OAAO,EACP,MAAM,EACN,EAAE,EACF,OAAO,EACP,QAAQ,EACR,MAAM,EACN,EAAE,OAAO,EAAE,CACZ,CAAC,SAAS,EAAE,CAAC;YAEd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;KAAA;;wEA7DU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,2EAAmB;AA6C/B;IAFC,gFAAW,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACnD,0EAAY,CAAC,gBAAgB,CAAC;;;;uDAmB9B;6FA7DU,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAmB;aAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpB0C;AAC4B;AACQ;AACQ;AACrB;AACP;AACJ;AACxB;AACa;AACkB;;;;;AAYvD,MAAM,gCAAgC,GAA8B;IACzE,iBAAiB,EAAE,KAAK;CACzB,CAAC;AAKK,MAAM,oBAAqB,SAAQ,gEAAqC;IAI7E,YACmB,qBAA4C,EAC5C,cAA8B,EAC/C,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,gCAAgC;YAC9C,IAAI,EAAE,sBAAsB;YAC5B,YAAY;SACb,CAAC,CAAC;QARc,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QALhC,sBAAiB,GAAG,IAAI,4CAAO,EAAQ,CAAC;QACxC,mBAAc,GAAG,IAAI,4CAAO,EAAwB,CAAC;QAYpE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,0GAA0G;QAC1G,IAAI,CAAC,cAAc;aAChB,IAAI,CACH,iEAAU,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE,CAChD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,CAAC,CACzD,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED,aAAa,CACX,QAAgB,EAChB,WAAuC,EACvC,OAAgB;QAEhB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,WAAW;YACX,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAC;IAIa,mBAAmB,CAC/B,QAAgB,EAChB,WAAuC,EACvC,OAAe;;YAEf,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gBACvC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aAC5D,CAAC,CAAC;YAEH,OAAO,gFAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE;gBACzD,WAAW;aACZ,CAAC,CAAC,SAAS,EAAE,CAAC;QACjB,CAAC;KAAA;;wFA5DU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,2EAAmB;AAiD/B;IAFC,gFAAW,CAAC,0CAA0C,CAAC;IACvD,0EAAY,CAAC,mBAAmB,CAAC;;;;+DAcjC;6FA5DU,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,2EAAmB;aAChC;;;;;;;;;;;;;;AC3BD;AAAA;AAAA;AAA6D;;AAGtD,MAAM,mBAAmB;IAC9B,YAAoC,YAAiC;QACnE,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,wEAAwE,CACzE,CAAC;SACH;IACH,CAAC;;kGAPU,mBAAmB;gKAAnB,mBAAmB,yDACoB,mBAAmB;6FAD1D,mBAAmB;cAD/B,sDAAQ;sCAE2C,mBAAmB;sBAAxD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACI;AACZ;AACC;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJH;AAC4B;AACQ;AAClB;AACF;AACJ;AAEZ;AACgB;AACR;AACE;AACa;;;;;;AAM3D,MAAM,iCAAiC,GAA+B;IAC3E,2BAA2B,EAAE,KAAK;CACnC,CAAC;AAKK,MAAM,qBAAsB,SAAQ,gEAAU;IAUnD,YACmB,qBAA4C,EAC5C,cAA8B,EAC9B,eAAgC,EACjD,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,iCAAiC;YAC/C,IAAI,EAAE,uBAAuB;YAC7B,YAAY;SACb,CAAC,CAAC;QATc,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAAiB;QAZlC,yBAAoB,GAAG,IAAI,4CAAO,EAAU,CAAC;QAC7C,0BAAqB,GAAG,IAAI,4CAAO,EAAU,CAAC;QAC9C,yBAAoB,GAAG,IAAI,4CAAO,EAEhD,CAAC;QACa,0BAAqB,GAAG,IAAI,4CAAO,EAEjD,CAAC;QAaF,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,oBAAoB;aACtB,IAAI,CACH,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,EAC/D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAEzC,IAAI,CAAC,oBAAoB;aACtB,IAAI,CACH,gEAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,EAAE,CACnC,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,UAAU,CAAC,CACzD,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CACd,QAAgB,EAChB,aAA8B,0EAAe,CAAC,aAAa;QAE3D,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,QAAgB;QAClC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACG,yBAAyB;;YAC7B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC;gBACpD,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;KAAA;IAED;;OAEG;IACG,oBAAoB,CAAC,QAAgB;;YACzC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE7D,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAC7B,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,EACpD,EAAE,YAAY,EAAE,IAAI,EAAE,CACvB,CAAC;QACJ,CAAC;KAAA;IAED;;OAEG;IACH,4BAA4B;QAC1B,OAAO,IAAI,CAAC,qBAAqB;aAC9B,MAAM,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aACnC,IAAI,CAAC,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACH,uBAAuB,CAAC,QAAgB;QACtC,OAAO,IAAI,CAAC,cAAc;aACvB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;YAC1B,cAAc;YACd,SAAS;YACT,aAAa;YACb,QAAQ;SACT,CAAC,CACH,CACF,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACH,2BAA2B,CAAC,QAAgB,EAAE,UAA2B;QACvE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,wCAAwC;IACxC,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,cAAc;aACvB,oBAAoB,EAAE;aACtB,IAAI,CAAC,0DAAG,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACH,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAIa,6BAA6B,CACzC,QAAgB,EAChB,UAA2B;;YAE3B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE7D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC1B,WAAW,EAAE,gCAAgC,QAAQ,eAAe,SAAS,EAAE;gBAC/E,IAAI,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC;gBAC1D,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC;YAEH,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;QAClC,CAAC;KAAA;IAIa,yBAAyB,CAAC,QAAgB;;YACtD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE7D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC1B,WAAW,EAAE,gCAAgC,QAAQ,eAAe,SAAS,EAAE;gBAC/E,IAAI,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC;aAC3D,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;;0FA/KU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB,mBAFpB,+EAAqB;AAuJjC;IAFC,gFAAW,CAAC,2CAA2C,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3E,0EAAY,CAAC,6BAA6B,CAAC;;;;0EAc3C;AAID;IAFC,gFAAW,CAAC,6BAA6B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC7D,0EAAY,CAAC,yBAAyB,CAAC;;;;sEAUvC;6FA/KU,qBAAqB;cAHjC,wDAAU;eAAC;gBACV,UAAU,EAAE,+EAAqB;aAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvB0C;AACoC;AACyB;AAC7C;AACa;AAEvB;AACgC;AAC9B;AACe;;;;AAc3D,MAAM,oCAAoC,GAAkC;IACjF,mBAAmB,EAAE,KAAK;IAC1B,mBAAmB,EAAE,KAAK;IAC1B,sBAAsB,EAAE,KAAK;IAC7B,mBAAmB,EAAE,KAAK;CAC3B,CAAC;AAKK,MAAM,wBAAyB,SAAQ,gEAE7C;IAMC,YACmB,cAA8B,EAC/C,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,oCAAoC;YAClD,IAAI,EAAE,0BAA0B;YAChC,YAAY;SACb,CAAC,CAAC;QAPc,mBAAc,GAAd,cAAc,CAAgB;QANhC,qBAAgB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAC5C,qBAAgB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAC5C,sBAAiB,GAAG,IAAI,4CAAO,EAAQ,CAAC;QACxC,sBAAiB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAW5D,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,uEAAuE;QACvE,IAAI,CAAC,cAAc;aAChB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,EAChE,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,qFAAqF;QACrF,uDAAuD;QACvD,IAAI,CAAC,gBAAgB;aAClB,IAAI,CACH,iEAAU,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,EAC9D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAErC,gFAAgF;QAChF,sDAAsD;QACtD,IAAI,CAAC,gBAAgB;aAClB,IAAI,CACH,iEAAU,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,EAC9D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAErC,uEAAuE;QACvE,IAAI,CAAC,cAAc;aAChB,MAAM,CAAC,WAAW,CAAC;aACnB,IAAI,CACH,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAClE,EACD,gEAAS,CAAC,UAAU,CAAC,EAAE,CAAC,iDAAI,CAAC,UAAU,CAAC,CAAC,EACzC,+DAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,CAC7D;aACA,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,SAAoB;QAClC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,SAAoB;QAClC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACG,eAAe,CAAC,SAAoB;;;YACxC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAC1D,WAAW,SAAG,SAAS,0CAAE,EAAE,CAAC;YAC9B,IAAI,WAAW,EAAE;gBACf,IAAI,CAAC,MAAM,CAAC;oBACV,WAAW,EAAE,cAAc,WAAW,UAAU;oBAChD,IAAI,EAAE;wBACJ,sBAAsB;wBACtB,SAAS;wBACT,gBAAgB;wBAChB,WAAW;qBACZ;oBACD,OAAO,EAAE,SAAS;iBACnB,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACvC;;KACF;IAED;;OAEG;IACH,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CACjD,gEAAS,CAAC,SAAS,CAAC,EAAE,CACpB,IAAI,CAAC,MAAM,CAAC,CAAC,sBAAsB,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC,CACnE,EACD,0DAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CACnB,CAAC;IACJ,CAAC;IAIa,qBAAqB,CAAC,SAAoB;;YACtD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE7D,MAAM,uBAAuB,GAAG,MAAM,kFAAe,iCAChD,SAAS,KACZ,UAAU,EAAE,SAAS,IACrB,CAAC,SAAS,EAAE,CAAC;YAEf,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC;YAE9C,OAAO,uBAAuB,CAAC;QACjC,CAAC;KAAA;IAIa,qBAAqB,CAAC,SAAoB;;;YACtD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAC1D,WAAW,SAAG,SAAS,0CAAE,EAAE,CAAC;YAE9B,MAAM,uBAAuB,GAAG,MAAM,kFAAe,CACnD,SAAS,EACT,WAAW,CACZ,CAAC,SAAS,EAAE,CAAC;YAEd,IAAI,uBAAuB,KAAK,IAAI,EAAE;gBACpC,IAAI,CAAC,MAAM,CAAC;oBACV,WAAW,EAAE,cAAc,WAAW,UAAU;oBAChD,IAAI,EAAE,CAAC,sBAAsB,EAAE,SAAS,EAAE,gBAAgB,EAAE,SAAS,CAAC;iBACvE,CAAC,CAAC;aACJ;;KACF;IAMa,wBAAwB,CAAC,SAAiB;;YACtD,MAAM,UAAU,GAAG,MAAM,gFAAa,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC;YAE9D,MAAM,cAAc,GAAG,6EAAe,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAEzD,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,2BAA2B;gBACxC,IAAI,EAAE,CAAC,sBAAsB,EAAE,SAAS,EAAE,gBAAgB,CAAC;gBAC3D,OAAO,EAAE,cAAc;aACxB,CAAC,CAAC;QACL,CAAC;KAAA;IAIa,qBAAqB,CAAC,SAAoB;;YACtD,OAAO,kFAAe,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC;QAChD,CAAC;KAAA;;gGAlLU,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB,mBAFvB,8EAAqB;AAgIjC;IAFC,gFAAW,CAAC,yBAAyB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACzD,0EAAY,CAAC,qBAAqB,CAAC;;;;qEAYnC;AAID;IAFC,gFAAW,CAAC,yBAAyB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACzD,0EAAY,CAAC,qBAAqB,CAAC;;;;qEAgBnC;AAMD;IAJC,gFAAW,CAAC,mDAAmD,EAAE;QAChE,OAAO,EAAE,IAAI;KACd,CAAC;IACD,0EAAY,CAAC,wBAAwB,CAAC;;;;wEAWtC;AAID;IAFC,gFAAW,CAAC,uBAAuB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACvD,0EAAY,CAAC,qBAAqB,CAAC;;;;qEAGnC;6FAlLU,wBAAwB;cAHpC,wDAAU;eAAC;gBACV,UAAU,EAAE,8EAAqB;aAClC;;;;;;;;;;;;;;;;;;;;;;;AChC0C;AACsB;AACtB;AACU;AACa;;;;AAU3D,MAAM,cAAe,SAAQ,gEAA+B;IACjE,YACmB,eAAgC,EACjD,YAA0B;QAE1B,KAAK,CAAC;YACJ,IAAI,EAAE,gBAAgB;YACtB,YAAY;SACb,CAAC,CAAC;QANc,oBAAe,GAAf,eAAe,CAAiB;IAOnD,CAAC;IAED;;OAEG;IACG,iBAAiB;;YACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACxD,CAAC;KAAA;IAED;;OAEG;IACG,oBAAoB;;YACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;KAAA;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAClC,gEAAS,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAC1E,CAAC;IACJ,CAAC;IAED,yDAAyD;IACzD,iBAAiB,CAAC,SAAiB;QACjC,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,WAAW,SAAS,WAAW;YAC5C,OAAO,EAAE;gBACP,SAAS;aACV;SACF,CAAC,CAAC;IACL,CAAC;;4EA5CU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,8EAAqB;6FAEtB,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,8EAAqB;aAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACb0C;AAC4B;AACQ;AACoC;AACxD;AACa;AAC3B;AACI;AACoB;AACH;;;;AAU3D,MAAM,2BAA2B,GAAyB;IAC/D,iBAAiB,EAAE,KAAK;IACxB,iBAAiB,EAAE,KAAK;IACxB,oBAAoB,EAAE,KAAK;IAC3B,iBAAiB,EAAE,KAAK;CACzB,CAAC;AAKK,MAAM,eAAgB,SAAQ,gEAAgC;IAOnE,YACW,qBAA4C,EACrD,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,2BAA2B;YACzC,IAAI,EAAE,iBAAiB;YACvB,YAAY;SACb,CAAC,CAAC;QAPM,0BAAqB,GAArB,qBAAqB,CAAuB;QAPtC,mBAAc,GAAG,IAAI,4CAAO,EAAW,CAAC;QACxC,oBAAe,GAAG,IAAI,4CAAO,EAAW,CAAC;QACzC,mBAAc,GAAG,IAAI,4CAAO,EAAW,CAAC;QACxC,oBAAe,GAAG,IAAI,4CAAO,EAAQ,CAAC;QACtC,oBAAe,GAAG,IAAI,4CAAO,EAAW,CAAC;QAYxD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,uFAAuF;QACvF,IAAI,CAAC,qBAAqB;aACvB,MAAM,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aACnC,IAAI,CACH,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,EAC5D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,cAAc;aAChB,IAAI,CACH,gEAAS,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,EACvD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEnC,IAAI,CAAC,cAAc;aAChB,IAAI,CACH,gEAAS,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,EACvD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEnC,oEAAoE;QACpE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;aACvB,IAAI,CACH,gEAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,iDAAI,CAAC,QAAQ,CAAC,CAAC,EACrC,+DAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,EACtD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC;IAIa,mBAAmB,CAAC,OAAgB;;YAChD,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAC9D,aAAa,CACd,CAAC;YAEF,MAAM,qBAAqB,GAAG,MAAM,gFAAa,CAC/C,OAAO,EACP,QAAQ,EACR,KAAK,CACN,CAAC,SAAS,EAAE,CAAC;YAEd,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAE1C,OAAO,qBAAqB,CAAC;QAC/B,CAAC;KAAA;IAED;;;OAGG;IACH,aAAa,CAAC,OAAgB;QAC5B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,OAAgB;QAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,OAAgB;;QAC5B,UAAI,OAAO,0CAAE,EAAE,EAAE;YACf,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,WAAW,OAAO,CAAC,EAAE,UAAU;gBAC5C,IAAI,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC;gBAClC,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACnC;IACH,CAAC;IAED;;;OAGG;IACG,cAAc,CAAC,SAAiB;;YACpC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;OAGG;IACH,iBAAiB,CAAC,SAAiB;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CACrC,0DAAG,CAAC,YAAY,CAAC,EAAE;YACjB,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC7C,OAAO,sDAAO,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAIa,mBAAmB,CAAC,OAAgB;;;YAChD,MAAM,gFAAa,OAAC,OAAO,0CAAE,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;YAE7C,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,WAAW,aAAO,0CAAE,EAAE,UAAU;gBAC7C,IAAI,EAAE,CAAC,cAAc,QAAE,OAAO,0CAAE,EAAE,CAAC;aACpC,CAAC,CAAC;;KACJ;IAIa,sBAAsB,CAAC,QAAgB;;YACnD,MAAM,QAAQ,GAAG,MAAM,kFAAe,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;YAE7D,MAAM,YAAY,GAAG,6EAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAErD,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,wBAAwB;gBACrC,OAAO,EAAE,EAAE,YAAY,EAAE;aAC1B,CAAC,CAAC;QACL,CAAC;KAAA;IAIa,mBAAmB,CAAC,OAAgB;;YAChD,OAAO,gFAAa,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;QACxD,CAAC;KAAA;;8EAnLU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,+EAAqB;AA0DjC;IAFC,gFAAW,CAAC,sBAAsB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACtD,0EAAY,CAAC,mBAAmB,CAAC;;;;0DAejC;AAmFD;IAFC,gFAAW,CAAC,sBAAsB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACtD,0EAAY,CAAC,mBAAmB,CAAC;;;;0DAQjC;AAID;IAFC,gFAAW,CAAC,0BAA0B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC1D,0EAAY,CAAC,sBAAsB,CAAC;;;;6DAUpC;AAID;IAFC,gFAAW,CAAC,oBAAoB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACpD,0EAAY,CAAC,mBAAmB,CAAC;;;;0DAGjC;6FAnLU,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,+EAAqB;aAClC;;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAA6D;;AAGtD,MAAM,qBAAqB;IAChC,YAAoC,YAAmC;QACrE,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,0EAA0E,CAC3E,CAAC;SACH;IACH,CAAC;;oGAPU,qBAAqB;oKAArB,qBAAqB,yDACkB,qBAAqB;6FAD5D,qBAAqB;cADjC,sDAAQ;sCAE2C,qBAAqB;sBAA1D,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;ACJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACF;AACE;AACR;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;ACJN;AACoC;AAKrC;AACiB;AACJ;AACT;AACE;AACqB;AACf;;;;;AAS/C,MAAM,uBAAwB,SAAQ,gEAE5C;IAIC,YACmB,eAAgC,EAChC,cAA8B,EAC9B,eAAgC,EACxC,YAA0B;QAEnC,KAAK,CAAC;YACJ,IAAI,EAAE,yBAAyB;YAC/B,YAAY;SACb,CAAC,CAAC;QARc,oBAAe,GAAf,eAAe,CAAiB;QAChC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAAiB;QACxC,iBAAY,GAAZ,YAAY,CAAc;QAPpB,wBAAmB,GAAG,IAAI,4CAAO,EAAW,CAAC;QAC7C,2BAAsB,GAAG,IAAI,4CAAO,EAAW,CAAC;QAY/D,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,mBAAmB;aACrB,IAAI,CACH,gEAAS,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,EAC5D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,sBAAsB;aACxB,IAAI,CACH,gEAAS,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,EAC/D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,OAAgB;QACjC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACG,mBAAmB;;YACvB,MAAM,CAAC,kBAAkB,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC3D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;gBAC3D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC;aACzC,CAAC,CAAC;YAEH,OAAO,kBAAkB;iBACtB,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,IAAI,YAAY,CAAC;iBAC9C,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;;OAGG;IACH,qBAAqB,CAAC,OAAgB;QACpC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,sBAAsB;QACpB,OAAO,0DAAa,CAAC;YACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;YAC9D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC;SAC5C,CAAC,CAAC,IAAI,CACL,0DAAG,CAAC,CAAC,CAAC,kBAAkB,EAAE,YAAY,CAAC,EAAE,EAAE,CACzC,kBAAkB;aACf,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,IAAI,YAAY,CAAC;aAC9C,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAC7C,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,wBAAwB;QAC1B,OAAO,0DAAa,CAAC;YACnB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAAE;gBAC7D,YAAY,EAAE,IAAI;aACnB,CAAC;SACH,CAAC,CAAC,IAAI,CACL,0DAAG,CAAC,CAAC,CAAC,SAAS,EAAE,gBAAgB,CAAC,EAAE,EAAE,WACpC,QAAC,QAAC,gBAAgB,0CAAE,QAAQ,CAAC,SAAS,EAAC,IACxC,CACF,CAAC;IACJ,CAAC;IAIa,wBAAwB,CAAC,OAAgB;;;YACrD,qEAAqE;YACrE,MAAM,gBAAgB,SACpB,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAAE;gBACjE,YAAY,EAAE,IAAI;aACnB,CAAC,CAAC,uCAAI,EAAE,GAAC;YAEZ,MAAM,uBAAuB,GAAG;sBAC9B,OAAO,0CAAE,EAAE;gBACX,GAAG,gBAAgB,CAAC,MAAM,CACxB,eAAe,CAAC,EAAE,WAAC,sBAAe,YAAK,OAAO,0CAAE,EAAE,KACnD;aACF,CAAC;YAEF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC1B,WAAW,EAAE,2BAA2B;gBACxC,IAAI,EAAE,CAAC,UAAU,EAAE,mBAAmB,CAAC;gBACvC,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;;KAChB;IAIa,2BAA2B,CAAC,OAAgB;;YACxD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;gBACtD,UAAU;gBACV,mBAAmB;aACpB,CAAC,CAAC;YAEH,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,MAAM,CACrD,eAAe,CAAC,EAAE,WAAC,sBAAe,YAAK,OAAO,0CAAE,EAAE,KACnD,CAAC;YAEF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC1B,WAAW,EAAE,0BAA0B;gBACvC,IAAI,EAAE,CAAC,UAAU,EAAE,mBAAmB,CAAC;gBACvC,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;;8FA7IU,uBAAuB;0GAAvB,uBAAuB,WAAvB,uBAAuB,mBAFtB,iFAAsB;AAqGlC;IAFC,gFAAW,CAAC,2BAA2B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3D,0EAAY,CAAC,yBAAyB,CAAC;;;;uEAsBvC;AAID;IAFC,gFAAW,CAAC,6BAA6B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC7D,0EAAY,CAAC,2BAA2B,CAAC;;;;0EAkBzC;6FA7IU,uBAAuB;cAHnC,wDAAU;eAAC;gBACV,UAAU,EAAE,iFAAsB;aACnC;;;;;;;;;;;;;;;;;;;;;;;ACpB0C;AACuB;AAE7B;AACgC;AACf;;;AAa/C,MAAM,uBAAuB;IAClC,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAEjE;;OAEG;IACG,mBAAmB;;YACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;gBACpD,UAAU;gBACV,cAAc;aACf,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC;KAAA;IAED;;OAEG;IACH,sBAAsB;QACpB,OAAO,IAAI,CAAC,eAAe;aACxB,MAAM,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;aACpC,IAAI,CACH,0DAAG,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC,CACzE,CAAC;IACN,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAAC,GAAW;QAChC,MAAM,CAAC,iBAAiB,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3C,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;YAC1B,WAAW,EAAE,gCAAgC;YAC7C,IAAI,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;YAClC,OAAO,EAAE,iBAAiB;SAC3B,CAAC,CAAC;IACL,CAAC;IAEO,4BAA4B,CAClC,cAAsB;QAEtB,MAAM,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EACtC,WAAW,GAAG,uFAAyB,CAAC,cAAc,CAAC,CAAC;QAC1D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IAC/B,CAAC;;8FA7CU,uBAAuB;0GAAvB,uBAAuB,WAAvB,uBAAuB,mBAFtB,iFAAsB;6FAEvB,uBAAuB;cAHnC,wDAAU;eAAC;gBACV,UAAU,EAAE,iFAAsB;aACnC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB0C;AACoC;AAEZ;AACR;AACJ;AACT;AACE;AACqB;AACf;;;;;AAS/C,MAAM,qBAAsB,SAAQ,gEAAU;IAEnD,YACmB,eAAgC,EAChC,eAAgC,EACxC,YAA0B;QAEnC,KAAK,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,YAAY,EAAE,CAAC,CAAC;QAJtC,oBAAe,GAAf,eAAe,CAAiB;QAChC,oBAAe,GAAf,eAAe,CAAiB;QACxC,iBAAY,GAAZ,YAAY,CAAc;QAJpB,sBAAiB,GAAG,IAAI,4CAAO,EAAW,CAAC;QAO1D,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,iBAAiB;aACnB,IAAI,CACH,gEAAS,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,EAC1D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,OAAgB;QAC/B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACG,iBAAiB;;YACrB,MAAM,CAAC,gBAAgB,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACzD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;gBACzD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC;aACzC,CAAC,CAAC;YAEH,OAAO,gBAAgB;iBACpB,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,IAAI,YAAY,CAAC;iBAC9C,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,0DAAa,CAAC;YACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC;SAC5C,CAAC,CAAC,IAAI,CACL,0DAAG,CAAC,CAAC,CAAC,gBAAgB,EAAE,YAAY,CAAC,EAAE,EAAE,CACvC,gBAAgB;aACb,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,IAAI,YAAY,CAAC;aAC9C,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAC7C,CACF,CAAC;IACJ,CAAC;IAIa,sBAAsB,CAAC,OAAgB;;;YACnD,mEAAmE;YACnE,MAAM,cAAc,SAClB,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,iBAAiB,CAAC,EAAE;gBAC/D,YAAY,EAAE,IAAI;aACnB,CAAC,CAAC,uCAAI,EAAE,GAAC;YAEZ,MAAM,qBAAqB,GAAG;sBAC5B,OAAO,0CAAE,EAAE;gBACX,GAAG,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,WAAC,oBAAa,YAAK,OAAO,0CAAE,EAAE,KAAC;aACzE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEd,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC1B,WAAW,EAAE,yBAAyB;gBACtC,IAAI,EAAE,CAAC,UAAU,EAAE,iBAAiB,CAAC;gBACrC,OAAO,EAAE,qBAAqB;aAC/B,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;;KAChB;;0FA/EU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB,mBAFpB,iFAAsB;AA8DlC;IAFC,gFAAW,CAAC,+BAA+B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC/D,0EAAY,CAAC,uBAAuB,CAAC;;;;mEAoBrC;6FA/EU,qBAAqB;cAHjC,wDAAU;eAAC;gBACV,UAAU,EAAE,iFAAsB;aACnC;;;;;;;;;;;;;;ACjBD;AAAA;AAAA;AAA6D;;AAGtD,MAAM,sBAAsB;IACjC,YAAoC,YAAoC;QACtE,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,2EAA2E,CAC5E,CAAC;SACH;IACH,CAAC;;qGAPU,sBAAsB;sKAAtB,sBAAsB,yDACiB,sBAAsB;6FAD7D,sBAAsB;cADlC,sDAAQ;sCAE2C,sBAAsB;sBAA3D,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJQ;AAC4B;AACQ;AACI;AACxB;AACJ;AACrB;AACD;AAC0C;AACN;;;;AAUrE,MAAM,2BAA2B,GAAyB;IACxD,uBAAuB,EAAE,KAAK;IAC9B,yBAAyB,EAAE,KAAK;IAChC,oBAAoB,EAAE,KAAK;IAC3B,kBAAkB,EAAE,KAAK;CAC1B,CAAC;AAKK,MAAM,eAAgB,SAAQ,gEAAgC;IACnE,YACmB,qBAA4C,EACpD,YAA0B;QAEnC,KAAK,CAAC;YACJ,YAAY,EAAE,2BAA2B;YACzC,IAAI,EAAE,iBAAiB;YACvB,YAAY;SACb,CAAC,CAAC;QAPc,0BAAqB,GAArB,qBAAqB,CAAuB;QACpD,iBAAY,GAAZ,YAAY,CAAc;QAOnC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IAEO,IAAI;QACV,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,sDAAS,CACjD,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,EAC5C,+CAAQ,CACT,CAAC;QAEF,yDAAyD;QACzD,aAAa;aACV,IAAI,CACH,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,EAC9C,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,0EAA0E;QAC1E,gBAAgB,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAE1E,gEAAgE;QAChE,kEAAkE;QAClE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;aACpB,IAAI,CACH,+DAAQ,EAAE,EACV,6DAAM,CACJ,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,uBACjB,iBAAG,0CAAE,MAAM,YAAI,OAAO,0CAAE,MAAM,KAAI,UAAG,0CAAE,MAAM,aAAK,OAAO,0CAAE,MAAM,KACpE,EACD,mEAAY,CAAC,EAAE,CAAC,EAChB,gEAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,EAChE,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAIa,sBAAsB;;YAClC,MAAM,QAAQ,GAAG,MAAM,8EAAW,EAAE,CAAC,SAAS,EAAE,CAAC;YAEjD,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,yBAAyB;gBACtC,OAAO,EAAE,EAAE,QAAQ,EAAE;aACtB,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAIa,oBAAoB,CAAC,QAAkB;;YACnD,OAAO,iFAAc,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9C,CAAC;KAAA;;8EAtEU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,kFAAsB;AAyDlC;IAFC,gFAAW,CAAC,6BAA6B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC7D,0EAAY,CAAC,sBAAsB,CAAC;;;;6DAUpC;AAID;IAFC,gFAAW,CAAC,yBAAyB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACzD,0EAAY,CAAC,oBAAoB,CAAC;;;;2DAGlC;6FAtEU,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,kFAAsB;aACnC;;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AAClB;AAEO;AACmC;;;;;;;;;;;;;ACJtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACM;AACT;AACiB;;;;;AAOnE,MAAM,eAAe;IAO1B,YACE,cAA8B,EAG9B,SAAsB,EAAE;QANjB,gBAAW,GAAG,+EAAW,CAAC;QAQjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,UAAU,CAAC;IAC3C,CAAC;;8EAhBU,eAAe,2MAUhB,wEAAkB;+FAVjB,eAAe;QCV5B,4EACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,0EAAgB;QAAA,iFAAsB;QAAA,4DAAO;QAC7C,0EACE;QAAA,wEAAwC;QAC1C,4DAAO;QACP,uDACF;QAAA,4DAAM;QACR,4DAAM;QACN,0EACE;QAAA,wDACF;QAAA,4DAAM;QACN,0EACE;QAAA,0EACE;QAAA,wDACF;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAS;;QAfY,0DAAoB;QAApB,iFAAoB;QAE/B,0DACF;QADE,yFACF;QAGA,0DACF;QADE,uFACF;QAGI,0DACF;QADE,uFACF;;6FDRK,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;sBAUI,sDAAQ;;sBACR,oDAAM;uBAAC,wEAAkB;;;;;;;;;;;;;;AEpB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AAE+B;AACf;AACjC;AACG;AAEoB;AAC1B;;;;;;;;;;;ICsBpC,wEACE;IAAA,wEAKE;IAAA,2EACE;IAAA,yEAEW;IACb,4DAAO;IACP,2EACE;IAAA,uDAQF;;;IAAA,4DAAO;IACT,4DAAI;IACJ,wEAKE;IAAA,2EACE;IAAA,0EAEW;IACb,4DAAO;IACP,4EACE;IAAA,wDAQF;;;IAAA,4DAAO;IACT,4DAAI;IACN,qEAAe;;;IAxCX,0DAA+B;IAA/B,2FAA+B;IAK3B,0DAA+C;IAA/C,8GAA+C;IAIjD,0DAQF;IARE,8RAQF;IAIA,0DAA+B;IAA/B,2FAA+B;IAK3B,0DAA+C;IAA/C,8GAA+C;IAIjD,0DAQF;IARE,kSAQF;;;;IASJ,wEACE;IAAA,wEACE;IADwC,iUAAuB;IAC/D,2EACE;IAAA,yEAAmC;IACrC,4DAAO;IACP,2EAAgB;IAAA,8EAAmB;IAAA,4DAAO;IAC5C,4DAAI;IACJ,wEAIE;IAFA,mUAAuB;IAEvB,2EACE;IAAA,yEAAmC;IACrC,4DAAO;IACP,2EAAgB;IAAA,+EAAmB;IAAA,4DAAO;IAC5C,4DAAI;IACN,qEAAe;;;IAbA,0DAAe;IAAf,+EAAe;IASf,0DAAe;IAAf,+EAAe;;;;IAK9B,wEACE;IAAA,wEAIE;IAFA,4UAAgC;IAEhC,2EACE;IAAA,yEAA8C;IAChD,4DAAO;IACP,2EAAgB;IAAA,+EAAoB;IAAA,4DAAO;IAC7C,4DAAI;IACJ,wEAIE;IAFA,4UAAgC;IAEhC,2EACE;IAAA,yEAA8C;IAChD,4DAAO;IACP,2EAAgB;IAAA,gFAAoB;IAAA,4DAAO;IAC7C,4DAAI;IACN,qEAAe;;;IAbA,0DAA0B;IAA1B,0FAA0B;IAS1B,0DAA0B;IAA1B,0FAA0B;;;;IAsCvC,wEAKE;IAFA,wYAA+B;IAE/B,uDACF;IAAA,4DAAI;;;IADF,0DACF;IADE,wFACF;;;IAhBN,wEACE;IAAA,0EACE;IAAA,wEACE;IAAA,uEACE;IAAA,2EAAgB;IAAA,gFAAqB;IAAA,4DAAO;IAC5C,uEAAM;IAAA,iEAAM;IAAA,4DAAO;IACnB,yEAAQ;IAAA,uDAA8B;;IAAA,4DAAS;IACjD,4DAAO;IACT,4DAAI;IACJ,2EACE;IAAA,yIAKE;;IAEJ,4DAAM;IACR,4DAAM;IACR,qEAAe;;;IAbC,0DAA8B;IAA9B,2JAA8B;IAMtC,0DAAoD;IAApD,kKAAoD;;;IAb9D,wEACE;IAAA,+IACE;IAmBJ,qEAAe;;;IApBC,0DAAqC;IAArC,mGAAqC;;;;IAsBrD,0EAIE;IAAA,wEACE;IAAA,uEACE;IAAA,2EAAgB;IAAA,+EAAoB;IAAA,4DAAO;IAC3C,uEAAM;IAAA,iEAAM;IAAA,4DAAO;IACnB,yEAAQ;IAAA,uDAA+C;IAAA,4DAAS;IAClE,4DAAO;IACT,4DAAI;IACJ,0EACE;IAAA,yEAKG;IAFD,iUAA6B;IAE5B,iFAAqB;IAAA,4DACvB;IACD,qEACA;IAAA,yEACG;IADkC,sTAAkB;IACpD,+EAAmB;IAAA,4DACrB;IACH,4DAAM;IACR,4DAAM;;;IAhBQ,0DAA+C;IAA/C,kHAA+C;;;IA4BzD,wEAOE;IAAA,2EACE;IAAA,qEACF;IAAA,4DAAO;IACP,uEACE;IAAA,qEACF;IAAA,4DAAO;IACT,4DAAI;;;IACJ,wEAOE;IAAA,2EACE;IAAA,qEACF;IAAA,4DAAO;IACP,uEACE;IAAA,uEACF;IAAA,4DAAO;IACT,4DAAI;;;IACJ,wEAOE;IAAA,2EACE;IAAA,qEACF;IAAA,4DAAO;IACP,uEACE;IAAA,sEACF;IAAA,4DAAO;IACT,4DAAI;;;ADhOP,MAAM,eAAe;IAqB1B,YACS,WAAwB,EACvB,qBAA4C,EAC5C,YAA0B,EACM,SAAsB,EAAE;QAHzD,gBAAW,GAAX,WAAW,CAAa;QACvB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,iBAAY,GAAZ,YAAY,CAAc;QAtB3B,YAAO,GAAG,mEAAO,CAAC;QAKlB,sBAAiB,GAAG,mFAAiB,CAAC;QACtC,WAAM,GAAG,wEAAM,CAAC;QAChB,gBAAW,GAAG,6EAAW,CAAC;QAC1B,WAAM,GAAG,wEAAM,CAAC;QASzB,eAAU,GAAG,IAAI,CAAC;QAQhB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,4BAA4B,CAAC;QACtE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAChC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QAC7D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACtE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACxE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IAC3E,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IACrC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;IACtC,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;;8EA9DU,eAAe,0dAyBJ,wEAAkB;+FAzB7B,eAAe;QCf5B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,uEACG;QAAA,oEACD;QAAA,4DAAI;QACN,uEAUE;QAFA,wIAAS,gBAAY,IAAC;QAEtB,qEAAgC;QAChC,qEAAgC;QAChC,qEAAgC;QAClC,4DAAI;QACN,4DAAM;QACN,yEAKE;QAAA,0EACE;QAAA,0EACE;QAAA,2EACE;QACA,kIACE;;QA2CJ,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EACE;QAAA,0EACE;QAAA,2EACE;QAAA,iIACE;;QAgBF,iIACE;;QAmBF,yEAME;QAAA,4EAAoB;QAAA,0EAAmC;QAAC,4DAAO;QAC/D,4EAAgB;QAAA,sFAA0B;QAAA,4DAAO;QACnD,4DAAI;QACJ,yEAME;QAAA,4EAAoB;QAAA,0EAAmC;QAAC,4DAAO;QAC/D,4EAAgB;QAAA,sFAA0B;QAAA,4DAAO;QACnD,4DAAI;QACN,4DAAM;QACR,4DAAM;QACR,4DAAM;QAEN,gIACE;;QAsBF,+GAIE;;QAsBF,2EACE;QAAA,yEACE;QAAA,4EACE;QAAA,0EAAwC;QACxC,0EAAwC;QACxC,0EAAwC;QAC1C,4DAAO;QACP,4EAA0C;QAAA,iFAAqB;QAAA,4DAAO;QACxE,4DAAI;QACJ,2EACE;QAAA,0GAOE;QAOF,0GAOE;QAOF,0GAOE;QAOJ,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAhPqB,0DAAmB;QAAnB,6IAAmB;QAStC,0DAA+B;QAA/B,uFAA+B;QAD/B,2FAAkC;QAYpC,0DAAwC;QAAxC,4JAAwC;QAMpB,0DAAqC;QAArC,mJAAqC;QAkDrC,0DAAkC;QAAlC,2JAAkC;QAiBlC,0DAAiC;QAAjC,0JAAiC;QA0BhB,0DAAe;QAAf,4EAAe;QASf,0DAAe;QAAf,4EAAe;QAOtC,0DAAyD;QAAzD,4JAAyD;QAwBrE,0DAA2C;QAA3C,qJAA2C;QA4B9B,0DAAoB;QAApB,iFAAoB;QACpB,0DAAoB;QAApB,iFAAoB;QACpB,0DAAoB;QAApB,iFAAoB;QAM7B,0DAAiD;QAAjD,+GAAiD;QAcjD,0DAAmD;QAAnD,iHAAmD;QAcnD,0DAAkD;QAAlD,gHAAkD;;6FDpNjD,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;sBA0BI,sDAAQ;;sBAAI,oDAAM;uBAAC,wEAAkB;;;;;;;;;;;;;;AExC1C;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEF;;;;;ICFhD,yEAAoF;;ADS7E,MAAM,gBAAgB;IAG3B,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC5D,CAAC;;gFAPU,gBAAgB;gGAAhB,gBAAgB;QCT7B,sHAAyE;;;QAA/D,gJAA2B;;6FDSxB,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AERqF;AAC7C;AAC+B;AACD;AAClB;AACI;AACiC;AACnC;AACE;AAC1B;AACa;AACiC;;;;;;;;;;;ICUrE,wEAME;IAAA,yEAAqB;IAAA,uDAAuC;IAAA,4DAAM;IACpE,qEAAe;;;IADQ,0DAAuC;IAAvC,0GAAuC;;;IAOxD,wEACE;IAAA,0EAAgB;IAAA,+EAAoB;IAAA,4DAAO;IAC3C,uDACF;;IAAA,qEAAe;;;IADb,0DACF;IADE,sLACF;;;IACA,wEACE;IAAA,uDAEF;IAAA,qEAAe;;;IAFb,0DAEF;IAFE,mKAEF;;;IAZN,wEACE;IAAA,yEACE;IAAA,uEACE;IAAA,4EAAkB;IAAA,8EAAmB;IAAA,4DAAS;IAC9C,uEAAM;IAAA,iEAAM;IAAA,4DAAO;IACnB,4JACE;IAGF,4JACE;IAGJ,4DAAO;IACT,4DAAM;IACR,qEAAe;;;IAVK,0DAAkD;IAAlD,oHAAkD;IAIlD,0DAAiD;IAAjD,mHAAiD;;;IA0B7D,wEACE;IAAA,2EACE;IAAA,yEAAkC;IACpC,4DAAO;IACP,0EAAgB;IAAA,gFAAqB;IAAA,4DAAO;IAC9C,qEAAe;;;IAHF,0DAAc;IAAd,+EAAc;;;IAI3B,wEACE;IAAA,0EAAgB;IAAA,gFAAqB;IAAA,4DAAO;IAC9C,qEAAe;;;;;IAjBnB,wEACE;IAAA,wEAQE;IANA,6VAAkB;IAMlB,2KACE;IAKF,2KACE;IAEJ,4DAAI;IACN,qEAAe;;;IAfX,0DAGE;IAHF,wLAGE;IAEY,0DAAwB;IAAxB,0FAAwB;IAMxB,0DAAuB;IAAvB,yFAAuB;;;;IAMvC,wEAGE;IAAA,wEACE;IAD2B,8WAAoB;IAC/C,2EACE;IAAA,yEAAyC;IAC3C,4DAAO;IACT,4DAAI;IACN,qEAAe;;;IAHA,0DAAqB;IAArB,sFAAqB;;;IANtC,wEACE;IAAA,2KAGE;IAMJ,qEAAe;;;IARX,0DAA0D;IAA1D,uGAA0D;;;;IA/BpE,wEAOE;IAAA,yEACE;IAAA,yEACE;IAAA,4JACE;IAmBF,4JACE;IAUF,wEAAwC;IAAtB,6UAAiB;IAAC,4DAAI;IAC1C,4DAAM;IACR,4DAAM;IACR,qEAAe;;;IAlCK,0DAA6C;IAA7C,uHAA6C;IAoB7C,0DAAmD;IAAnD,6HAAmD;;;IAiBvE,wEACE;IAAA,0EAKW;IACb,qEAAe;;;IAJX,0DAAsE;IAAtE,6IAAsE;;;IAK1E,wEACE;IAAA,0EAA2D;IAC7D,qEAAe;;;IAXjB,wEACE;IAAA,4JACE;IAOF,4JACE;IAEJ,qEAAe;;;IAXC,0DAAkC;IAAlC,oGAAkC;IAQlC,0DAAoC;IAApC,sGAAoC;;;;IApGxD,6EAkBE;IAAA,yEACE;IAAA,yEACE;IAAA,yEACE;IAAA,6IAME;IAEF,6IACE;IAeJ,4DAAM;IACN,6IAOE;IAqCJ,4DAAM;IACN,6IACE;IAYJ,4DAAM;IACR,4DAAU;;;IAhGR,+WAME;IAOM,0DAGC;IAHD,wLAGC;IAIW,0DAA6C;IAA7C,uHAA6C;IAkB3D,0DAIC;IAJD,8OAIC;IAwCS,0DAA+C;IAA/C,yHAA+C;;ADzE1D,MAAM,qBAAqB;IAWhC,YACU,qBAA4C,EAC5C,MAAc,EACd,WAA+B,EAC/B,YAA0B,EAC1B,cAA8B,EACU,SAAsB,EAAE;QALhE,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAoB;QAC/B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QACU,WAAM,GAAN,MAAM,CAAkB;QAhBjE,cAAS,GAAG,sEAAS,CAAC;QAEtB,iBAAY,GAAG,8EAAY,CAAC;QAC5B,UAAK,GAAG,uEAAK,CAAC;QAEN,YAAO,GAAkB,IAAI,6CAAO,EAAQ,CAAC;QAE9D,gBAAW,GAAG,KAAK,CAAC;QACpB,oBAAe,GAAG,KAAK,CAAC;IASrB,CAAC;IAIJ,QAAQ;QACN,IAAI,CAAC,OAAO;aACT,IAAI,CACH,kEAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAC1C,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,WAAW,KAAI,CAAC;IAEhB,KAAK;QACH,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,QAAQ;QACN,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC;QACjE,IAAI,CAAC,MAAM;aACR,QAAQ,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;aAC3C,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAEa,iBAAiB;;YAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC;gBACpD,aAAa;gBACb,UAAU;aACX,CAAC,CAAC;YAEH,IAAI;gBACF,MAAM,8EAAW,CACf,IAAI,CAAC,MAAM,CAAC,OAAO,EACnB,IAAI,CAAC,cAAc,CAAC,UAAU,EAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,EACf,QAAQ,EACR,IAAI,CAAC,YAAY,CAAC,QAAQ,CAC3B,CAAC,SAAS,EAAE,CAAC;aACf;oBAAS;gBACR,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;aAC1B;QACH,CAAC;KAAA;;0FApEU,qBAAqB,kvBAiBV,yEAAkB;qGAjB7B,qBAAqB;QClBlC,yHAkBE;;QAjBA,sZAMC;;6FDWU,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,8BAA8B;gBACxC,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;sBAkBI,sDAAQ;;sBAAI,oDAAM;uBAAC,yEAAkB;;kBAGvC,mDAAK;;;;;;;;;;;;;;AEtCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAKZ;AAED;;;;;;ICPrC,6FAGgC;;;IAD9B,0EAAa;;ADYR,MAAM,iBAAiB;IAG5B,YAAoB,WAA+B;QAA/B,gBAAW,GAAX,WAAW,CAAoB;IAAG,CAAC;IAEvD,QAAQ;QACN,8DAA8D;QAC9D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW;aAC3B,MAAM,CAAC,OAAO,CAAC;aACf,IAAI,CACH,0DAAG,CAAC,KAAK,CAAC,EAAE,CACV,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CACzB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,KAAK,sEAAS,CAAC,OAAO,CAChD,CACF,CACF,CAAC;IACN,CAAC;;kFAhBU,iBAAiB;iGAAjB,iBAAiB;QCd9B,+JAGC;;;QAFC,gJAAqC;;6FDa1B,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAkG;AAElG;;;;GAIG;AACI,MAAM,qBAAsB,SAAQ,kEAAkB;IACpD,YAAY,CAAC,KAA6B;QAC/C,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,KAA6B,EAAE,YAAwC,IAAS,CAAC;IAEvF,YAAY,CAAC,KAA6B;QAC/C,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,KAA6B;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,gBAAgB,CAAC,MAA8B,EAAE,IAA4B;QAClF,OAAO,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtE,CAAC;CACF;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAA+C;AAQxC,MAAM,kBAAkB,GAAG,IAAI,4DAAc,CAClD,aAAa,CACd,CAAC;;;;;;;;;;;;;ACVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACR;AACD;;;;;;;;AAE/C,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,gBAAgB,CAAC,CAAC;AAOlC,MAAM,cAAc;IACzB,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElD,uEAAuE;IACvE,UAAU;QACR,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;YAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC;YAC/B,IAAI,GAAG,GAAG,CAAC,EAAE;gBACX,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,iCAAiC;aAChE;iBAAM;gBACL,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;aACnC;QACH,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED;;OAEG;IAEH,OAAO;QACL,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;;4EArBU,cAAc;8FAAd,cAAc;;;QCX3B,mFAA+C;QAC/C,yEACE;QAAA,oFAAiD;QACjD,qFAAmD;QACrD,4DAAM;QACN,yEACE;QAAA,mFAAyD;QAA1C,yJAAY,gBAAY,IAAC;QAAC,4DAAgB;QAC3D,4DAAM;QACN,mFAA+C;;QAP3B,0DAAsB;QAAtB,0EAAsB;;6FDU7B,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;kBAmBE,0DAAY;mBAAC,cAAc;;;;;;;;;;;;;;AE7B9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACe;AACK;AACE;AAClB;AACS;AACN;AACR;AACc;AACA;AACG;AAC0B;AACvB;AACA;AACO;AACtB;;;;AAmB5C,MAAM,WAAW;IACtB,YACU,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAEhC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,EAAE,qDAAI,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,SAAsB,EAAE;QAExB,OAAO;YACL,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,yEAAkB;oBAC3B,QAAQ,EAAE,MAAM;iBACjB;gBACD;oBACE,OAAO,EAAE,kEAAkB;oBAC3B,QAAQ,EAAE,+EAAqB;iBAChC;aACF;SACF,CAAC;IACJ,CAAC;;0FAvBU,WAAW;gJAAX,WAAW,0IAhBb;YACP,4DAAY;YACZ,yEAAa;YACb,kFAAiB;YACjB,4DAAY;YACZ,mEAAe,CAAC,QAAQ,EAAE;SAC3B;mIAUU,WAAW,mBARpB,wEAAe;QACf,wEAAe;QACf,gEAAc;QACd,4EAAgB;QAChB,+EAAiB;QACjB,sGAAqB,aAZrB,4DAAY;QACZ,yEAAa;QACb,kFAAiB;QACjB,4DAAY;6FAYH,WAAW;cAjBvB,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY;oBACZ,yEAAa;oBACb,kFAAiB;oBACjB,4DAAY;oBACZ,mEAAe,CAAC,QAAQ,EAAE;iBAC3B;gBACD,YAAY,EAAE;oBACZ,wEAAe;oBACf,wEAAe;oBACf,gEAAc;oBACd,4EAAgB;oBAChB,+EAAiB;oBACjB,sGAAqB;iBACtB;aACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCqD;AAC6F;AAChG;AACoB;AACvB;AACiB;AACV;AACyB;AACkB;;;;;;AAElG,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,cAAc,CAAC,CAAC;AAwChC,MAAM,wBAAwB,GAAsB;IACzD,gBAAgB,EAAE,KAAK;IACvB,YAAY,EAAE,KAAK;IACnB,iBAAiB,EAAE,KAAK;CACzB,CAAC;AAKK,MAAM,YAAa,SAAQ,gEAA6B;IAM7D,YACmB,qBAA4C,EAC5C,MAAc,EACd,QAAkB,EACnC,YAA0B;QAE1B,KAAK,CAAC;YACJ,YAAY,EAAE,wBAAwB;YACtC,IAAI,EAAE,cAAc;YACpB,YAAY;SACb,CAAC,CAAC;QATc,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAU;QAPpB,iBAAY,GAAkB,IAAI,4CAAO,EAAQ,CAAC;QAClD,gBAAW,GAAkB,IAAI,4CAAO,EAAQ,CAAC;QACjD,iBAAY,GAAkB,IAAI,4CAAO,EAAQ,CAAC;QAajE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,WAAW,KAAI,CAAC;IAER,IAAI;QACV,gHAAgH;QAChH,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CACtC,KAAK,CAAC,EAAE,CACN,KAAK,CAAC,UAAU,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CACvE,CAAC;QAEF,yCAAyC;QACzC,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,gCAAgC;YAC7C,OAAO,EAAE,EAAE,MAAM,EAAE;SACpB,CAAC,CAAC;QAEH,+DAA+D;QAC/D,IAAI,CAAC,YAAY;aACd,IAAI,CACH,iEAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC,EAC1D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC,CAAC;QAE3E,qCAAqC;QACrC,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;aAC1B,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzD,0DAA0D;QAC1D,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CACH,6DAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,YAAY,6DAAa,CAAC,EAC/C,+DAAQ,EAAE,EACV,gEAAS,CAAC,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,EAAE,CAC1C,IAAI,CAAC,wBAAwB,CAC3B,aAA8B,EAC9B,YAA6B,CAC9B,CACF,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;QAEf,kEAAkE;QAClE,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC3B,uCAAuC;YACvC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CACnE,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,iCAAiC;gBAC9C,OAAO,EAAE;oBACP,iBAAiB,EAAE,CAAC,CAAC,KAAK;iBAC3B;aACF,CAAC,CACH,CAAC;YAEF,2EAA2E;YAC3E,IAAI,CAAC,YAAY;iBACd,IAAI,CACH,iEAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,EAChD,4EAAc,CAAC,IAAI,CAAC,CACrB;iBACA,SAAS,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAE/C,+BAA+B;YAC/B,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;YAE/B,MAAM,oBAAoB,GAAG,sDAAS,CACpC,MAAM,EACN,qBAAqB,CACtB,CAAC,IAAI,CAAC,8DAAO,EAAE,CAAoD,CAAC;YAErE,oBAAoB;iBACjB,IAAI,CACH,0DAAG,CAAC,GAAG,EAAE,CACP,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,oBAAoB;gBACjC,OAAO,EAAE;oBACP,gBAAgB,EAAE,IAAI;iBACvB;aACF,CAAC,CACH,EACD,gEAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,EACpC,0DAAG,CAAC,GAAG,EAAE,CACP,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,gDAAgD;gBAC7D,OAAO,EAAE;oBACP,gBAAgB,EAAE,KAAK;iBACxB;aACF,CAAC,CACH,EACD,4EAAc,CAAC,IAAI,CAAC,CACrB;iBACA,SAAS,CAAC,QAAQ,CAAC,EAAE,CACpB,GAAG,CAAC,KAAK,CAAC,wBAAwB,QAAQ,CAAC,OAAO,EAAE,CAAC,CACtD,CAAC;YAEJ,qCAAqC;YACrC,0DAAa,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBACpD,IAAI,CACH,iEAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EACvC,4EAAc,CAAC,IAAI,CAAC,CACrB;iBACA,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAC;YAEjE,oBAAoB,CAAC,OAAO,EAAE,CAAC;SAChC;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAEa,wBAAwB,CACpC,aAA4B,EAC5B,YAA2B;;YAE3B,MAAM,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC/D,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE5D,IAAI,YAAY,KAAK,WAAW;gBAAE,OAAO;YAEzC,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,8BAA8B;gBAC3C,OAAO,EAAE,EAAE,aAAa,EAAE,aAAa,CAAC,iBAAiB,EAAE;aAC5D,CAAC,CAAC;QACL,CAAC;KAAA;IAEO,qBAAqB,CAAC,KAA4B;QACxD,IAAI,KAAK,YAAY,+DAAe,EAAE;YACpC,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,kBAAkB;gBAC/B,OAAO,EAAE;oBACP,YAAY,EAAE,IAAI;iBACnB;aACF,CAAC,CAAC;SACJ;aAAM,IACL,KAAK,YAAY,6DAAa;YAC9B,KAAK,YAAY,gEAAgB;YACjC,KAAK,YAAY,+DAAe,EAChC;YACA,IAAI,CAAC,MAAM,CAAC;gBACV,WAAW,EAAE,qBAAqB;gBAClC,OAAO,EAAE;oBACP,YAAY,EAAE,KAAK;iBACpB;aACF,CAAC,CAAC;SACJ;IACH,CAAC;;wEA/KU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACzDD;AAAA;AAAA;AAAA;AAAqE;AAClB;AAEnD;;GAEG;AACI,MAAM,KAAK;IAChB;;;;OAIG;IACH,MAAM,CAAC,WAAW,CAAC,MAAc;QAC/B,OAAO;YACL,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,+DAAc;YACzB,QAAQ,EAAE,MAAM;YAChB,WAAW,EAAE,CAAC,kFAAmB,CAAC;YAClC,oEAAoE;YACpE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;SACtB,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;;;;;;;;;;;;ACvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACS;AACC;;;;;;;;;;;;;;;;;;;;ACFT;AACwB;AACe;AAEzE,SAAS,eAAe,CAAC,QAAa,EAAE,IAAS,EAAE,OAAY;IAC7D,IAAI;QACF,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACtC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,uDAAU,CAAC,CAAC,CAAC,CAAC;KACtB;AACH,CAAC;AAED,SAAS,qBAAqB;IAC5B,IAAI,CAAC,sEAAiB,CAAC,QAAQ,EAAE;QAC/B,MAAM,IAAI,KAAK,CACb,iIAAiI,CAClI,CAAC;KACH;IACD,OAAO,sEAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,wEAAkB,CAAC,CAAC;AAC5D,CAAC;AAED;;;;;;GAMG;AACI,SAAS,WAAW,CAAC,WAAoB,EAAE,OAAqB;IACrE,OAAO,UACL,MAAc,EACd,GAAoB,EACpB,UAA8B;QAE9B,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;QAClC,UAAU,CAAC,KAAK,GAAG,UAAe,GAAG,IAAW;;gBAC9C,MAAM,kBAAkB,GAAG,qBAAqB,EAAE,CAAC;gBAEnD,MAAM,SAAS,GAAG;oBAChB,SAAS,EAAE,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;oBAChD,WAAW,EAAE,WAAW;iBACzB,CAAC;gBAEF,MAAM,IAAI,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;gBAEjE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAE9C,OAAO,UAAU,CAAC,SAAS,EAAE,CAAC;YAChC,CAAC;SAAA,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACpDD;AAAA;AAAA;AAAuE;;AAGhE,MAAM,iBAAiB;IAG5B,YACE,QAAkB,EACM,YAA+B;QAEvD,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QACD,iBAAiB,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACxC,CAAC;;gGAbU,iBAAiB;4JAAjB,iBAAiB,yKAKY,iBAAiB;6FAL9C,iBAAiB;cAD7B,sDAAQ;wGAMiC,iBAAiB;sBAAtD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRkB;AACc;AACT;AACiB;AACV;AAEuB;AAUtD;AACU;AACwB;;;;AAE1D,MAAM,GAAG,GAAG,IAAI,6DAAM,CAAC,aAAa,CAAC,CAAC;AA0DtC,IAAY,SAMX;AAND,WAAY,SAAS;IACnB,gCAAmB;IACnB,gCAAmB;IACnB,0BAAa;IACb,4BAAe;IACf,wCAA2B;AAC7B,CAAC,EANW,SAAS,KAAT,SAAS,QAMpB;AAEM,MAAM,kBAAkB,GAAgB;IAC7C,YAAY,EAAE,KAAK;IACnB,cAAc,EAAE,IAAI;IACpB,OAAO,EAAE,KAAK;IACd,4BAA4B,EAAE,KAAK;CACpC,CAAC;AAEK,MAAM,IAAI;IAGf,YACS,EAAU,EACT,SAA6B,EAC7B,MAAc;QAFf,OAAE,GAAF,EAAE,CAAQ;QACT,cAAS,GAAT,SAAS,CAAoB;QAC7B,WAAM,GAAN,MAAM,CAAQ;QALP,eAAU,GAAG,IAAI,4CAAO,EAAQ,CAAC;IAM/C,CAAC;IAEE,YAAY,CAAC,SAA2B;;YAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CACzC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,EAChC,EAAE,YAAY,EAAE,IAAI,EAAE,CACvB,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBACpB,WAAW,EAAE,+BAA+B,IAAI,CAAC,EAAE,EAAE;gBACrD,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC;gBACtC,OAAO,EAAE,CAAC,GAAG,UAAU,EAAE,SAAS,CAAC;aACpC,CAAC,CAAC;QACL,CAAC;KAAA;IAED,qDAAqD;IACrD,SAAS;QACP,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,kBAAkB;YAC9C,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC;YACxC,OAAO,EAAE,SAAS,CAAC,WAAW;SAC/B,CAAC,CAAC;IACL,CAAC;IAED,yCAAyC;IACnC,aAAa;;YACjB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAE1D,MAAM,OAAO,GAAG,GAAG,EAAE,CACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,UAAU;gBACtC,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC;gBACxC,OAAO,EAAE,SAAS,CAAC,OAAO;aAC3B,CAAC,CAAC;YAEL,MAAM,QAAQ,GAAG,gDAAG,CAClB,kDAAK,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAChC,iDAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CACtB,CAAC,IAAI;YACJ,sHAAsH;YACtH,gEAAS,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE,EAAE,CAC/B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,CAChD,EACD,+DAAQ,CAAC,CAAC,CAAC,CACZ,CAAC;YAEF,MAAM,UAAU,GAAG,GAAG,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,YAAY;oBACxC,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC;oBACxC,OAAO,EAAE,SAAS,CAAC,IAAI;iBACxB,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC;YAEF,MAAM,WAAW,GAAG,GAAG,EAAE;gBACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,cAAc;oBAC1C,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC;oBACxC,OAAO,EAAE,SAAS,CAAC,WAAW;iBAC/B,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,MAAM,OAAO,GAAG,CAAC,KAAY,EAAE,EAAE;gBAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,uBAAuB;oBACnD,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC;oBACjC,OAAO,EAAE,KAAK;iBACf,CAAC,CAAC;gBACH,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,0BAA0B;oBACtD,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC;oBACxC,OAAO,EAAE,SAAS,CAAC,KAAK;iBACzB,CAAC,CAAC;gBACH,OAAO,0CAAK,CAAC;YACf,CAAC,CAAC;YAEF,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,0DAAG,CAAC,WAAW,CAAC,CAAC,CAAC;YAEzD,MAAM,KAAK,GAAG,+CAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CACzB,0DAAG,CAAC,OAAO,CAAC,EACZ,kEAAW,CAAC,QAAQ,CAAC,EACrB,0DAAG,CAAC,UAAU,CAAC,EACf,iEAAU,CAAC,OAAO,CAAC,CACpB,CAAC;YAEF,MAAM,UAAU,GAAG,iDAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAE1C,OAAO,UAAU,CAAC;QACpB,CAAC;KAAA;IAED;;OAEG;IACH,IAAI,kBAAkB,CAAC,WAAmB;QACxC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,sBAAsB;YAClD,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,kBAAkB,EAAE,aAAa,CAAC;YAC3D,OAAO,EAAE,WAAW;SACrB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,wBAAwB,CAAC,OAA8B;QACzD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YACpB,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,6BAA6B;YACzD,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,0BAA0B,CAAC;YACpD,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAEO,QAAQ,CAAC,IAAiB;QAChC,0CAA0C;QAC1C,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,IAAI,EAAE;YACxC,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;gBAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;aAC/C;SACF;QACD,2CAA2C;QAC3C,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,KAAK,EAAE;YACzC,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;aAC7C;SACF;IACH,CAAC;IAEO,eAAe,CACrB,MAAc,EACd,SAA2B,EAC3B,KAAa;QAEb,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YACpB,WAAW,EAAE,2BAA2B;YACxC,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,kBAAkB,CAAC;YAC3C,OAAO,EAAE;gBACP,WAAW,EAAE,SAAS,CAAC,WAAW,IAAI,QAAQ,KAAK,EAAE;gBACrD,KAAK,EAAE,KAAK;aACb;SACF,CAAC,CAAC;QACH,OAAO,+CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACf,0DAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,EAClD,gEAAS,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,EACpC,0DAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,CACtD,CAAC;IACJ,CAAC;IAEO,QAAQ,CAAC,OAA8B;QAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;IAC1E,CAAC;CACF;AAKM,MAAM,kBAAmB,SAAQ,gEAAmC;IACzE,YAAoB,MAAc,EAAE,YAA0B;QAC5D,KAAK,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAAE,YAAY,EAAE,CAAC,CAAC;QADlC,WAAM,GAAN,MAAM,CAAQ;QAEhC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,8DAA8D;QAC9D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;aAChB,IAAI,CACH,gEAAS,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,EAC1D,4EAAc,CAAC,IAAI,CAAC,CACrB;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,UAAU,CACR,aAAiC,EAAE,EACnC,UAAuB,EAAE;QAEzB,MAAM,MAAM,GAAG,+CAAI,EAAE,CAAC;QAEtB,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,QAAQ,MAAM,UAAU;YACrC,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;YACvB,OAAO,EAAE;gBACP,YAAY,EAAE,SAAS,CAAC,OAAO;gBAC/B,EAAE,EAAE,MAAM;gBACV,UAAU,EAAE,UAAU;gBACtB,OAAO,kCAAO,kBAAkB,GAAK,OAAO,CAAE;aAC/C;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,gBAAgB,MAAM,EAAE;YACrC,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;SACxB,CAAC,CAAC;IACL,CAAC;IAEa,0BAA0B,CAAC,KAAoB;;YAC3D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,eAAe,GACjB,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EACpE,iBAAiB,GACf,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;gBAExE,IAAI,eAAe,IAAI,iBAAiB,EAAE;oBACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACzB;aACF;QACH,CAAC;KAAA;;oFAtDU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,sEAAiB;6FAElB,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,sEAAiB;aAC9B;;;;;;;;;;;;;;AC7PD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACE;AACK;;;;;;;;;;;;;ACFrC;AAAA;AAAA;AAAA;AAA2C;AAE3C;;GAEG;AACI,MAAM,qBAAqB;IAIhC,YAAY,YAA+C,KAAK;QAC9D,IAAI,CAAC,OAAO,GAAG,IAAI,0DAAQ,CAAC,SAAS,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,0DAAQ,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,GAAM;;QACX,KAAK,MAAM,KAAK,UAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,uCAAI,EAAE,IAAE;YAC/C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,GAAM,EAAE,KAAQ;QACrB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,GAAG,CAAC,GAAM,EAAE,KAAQ;QAClB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;CACF;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAA2C;AAEpC,MAAM,UAAU;IAGrB;;;;;;OAMG;IACH;IACE;;;OAGG;IACK,aAAiD,8CAAO;QAAxD,eAAU,GAAV,UAAU,CAA8C;QAd1D,UAAK,GAAQ,EAAE,CAAC;IAerB,CAAC;IAEJ;;;OAGG;IACH,GAAG,CAAC,KAAc;QAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;SACjB;QACD,IAAI,CAAC,KAAK,GAAG,uDAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;;;;;;;;;;;;;ACrCD;AAAA;AAAA,8DAA8D;AACvD,MAAe,WAAY,SAAQ,KAAK;IAC7C,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,+BAA+B;QAC/B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;CACF;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACZ;AACC;AACN;;;;;;;;;;;;;ACHzB;AAAA;AAAA;AAAA;AAAiC;AAEjC;;;;;;;;;;;;;;;;GAgBG;AACI,MAAM,MAAM;IAGjB,YAAY,MAAyB;QACnC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAI,CAAI,MAAmB;QAChC,QAAQ,CAAC,CAAC,IAAI;YACZ,KAAK,CAAC,CAAC,MAAM,CAAC;QAChB,CAAC;QACD,OAAO,IAAI,MAAM,CAAI,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,OAAO,CAAI,SAA8B;QACvC,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAI,GAAG,SAAwB;QACnC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAiB;YAChC,KAAK,CAAC,CAAC,IAAI,CAAC;YACZ,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,KAAK,CAAC,CAAC,QAAQ,CAAC;aACjB;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,aAA6C,8CAAO;QAC3D,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAqB;YACtC,MAAM,SAAS,GAAG,EAAE,CAAC;YACrB,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBACnE,IAAI,CAAC,WAAW,EAAE;oBAChB,MAAM,IAAI,CAAC;oBACX,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACtB;aACF;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,SAAgC;QACpC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACpB,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,SAAgC;QACrC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAqB;YACpC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;oBACnB,MAAM,IAAI,CAAC;iBACZ;aACF;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,SAA+B;QAClC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC;aACb;SACF;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED;;;OAGG;IACH,OAAO,CAAI,UAAqC;QAC9C,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAqB;YACjC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aACzB;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,MAA0B;QAChC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,MAAM,CAAC,IAAI,CAAC,CAAC;SACd;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAI,UAA2B;QAChC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAqB;YACjC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,MAAM,UAAU,CAAC,IAAI,CAAC,CAAC;aACxB;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,SAA+B;QAClC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAI,WAAmC,EAAE,SAAY;QACzD,IAAI,YAAY,GAAG,SAAS,CAAC;QAC7B,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,YAAY,GAAG,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAChD;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,MAAc;QACjB,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAqB;YAClC,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,IAAI,CAAC,IAAI,MAAM,EAAE;oBACf,MAAM,IAAI,CAAC;iBACZ;gBACD,CAAC,EAAE,CAAC;aACL;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,SAAgC;QACnC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACvB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,MAAc;QACjB,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAqB;YAClC,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,MAAM,IAAI,CAAC;gBACX,CAAC,EAAE,CAAC;gBACJ,IAAI,CAAC,IAAI,MAAM,EAAE;oBACf,MAAM;iBACP;aACF;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,SAAgC;QACxC,QAAQ,CAAC,CAAC,SAAS,CAAC,QAAqB;YACvC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;oBACnB,MAAM;iBACP;gBACD,MAAM,IAAI,CAAC;aACZ;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,MAA0B;QAC5B,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAqB;YACjC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;gBAC3B,MAAM,CAAC,IAAI,CAAC,CAAC;gBACb,MAAM,IAAI,CAAC;aACZ;QACH,CAAC;QACD,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,OAAO;QACL,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CACF;;;;;;;;;;;;;AChRD;AAAA;AAAO,SAAS,WAAW,CAAC,MAAc;IACxC,OAAO,MAAM;SACV,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACvB,CAAC;;;;;;;;;;;;;ACLD;AAAA;AAAO,SAAS,SAAS,CAAC,MAAc,EAAE,WAAW,GAAG,EAAE,EAAE,SAAS,GAAG,GAAG;IACzE,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,MAAM,UAAU,GAAG,EAAE,CAAC;IAEtB,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,cAAc,CAAC,MAAM,EAAE,MAAM,IAAI,SAAS,EAAE;QACxE,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;QAE/D,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SACtC;QAED,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC5B;IAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACzD,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAO,SAAS,WAAW,CAAC,SAAiB;IAC3C,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACzD,CAAC;;;;;;;;;;;;;ACAD;AAAA;AAAA;;;;;;GAMG;AACI,SAAS,kBAAkB,CAAC,cAAwB;IACzD,MAAM,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC;IAEzC,0CAA0C;IAC1C,yFAAyF;IACzF,oDAAoD;IACpD,MAAM,gBAAgB,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IAE9E,gCAAgC;IAChC,MAAM,uBAAuB,GAAG,gBAAgB,CAAC,OAAO,CACtD,YAAY,GAAG,IAAI,EACnB,YAAY,CACb,CAAC;IAEF,iBAAiB;IACjB,MAAM,YAAY,GAAG,GAAG,GAAG,uBAAuB,GAAG,MAAM,CAAC;IAE5D,wBAAwB;IACxB,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAEzE,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IAC7D,OAAO,aAAa,CAAC;AACvB,CAAC;;;;;;;;;;;;;AC/BD;AAAA;AAAA;;;;GAIG;AACI,SAAS,mBAAmB,CAAC,KAAiB,EAAE,SAAS,GAAG,GAAG;IACpE,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC;IAC7B,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,SAAS,EAAE;QACvC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KACjE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;ACZD;AAAA;AAAA;;GAEG;AACI,SAAS,gBAAgB;IAC9B,MAAM,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;IAC3B,OAAO,CAAC,GAAW,EAAE,KAAU,EAAE,EAAE;QACjC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;YAC/C,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACnB,OAAO;aACR;YACD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACjB;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACAD;AAAA;AAAO,QAAQ,CAAC,CAAC,YAAY,CAC3B,QAAqB,EACrB,MAAM,GAAG,CAAC;IAEV,4CAA4C;IAC5C,IAAI,MAAM,KAAK,CAAC;QAAE,OAAO;IAEzB,0GAA0G;IAC1G,MAAM,SAAS,GAAG,IAAI,GAAG,EAAK,CAAC;IAE/B,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE;QAClC,IAAI,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YAAE,SAAS;QACzC,IAAI,MAAM,KAAK,CAAC;YAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAEtC,qFAAqF;QACrF,uEAAuE;QACvE,wDAAwD;QACxD,KAAK,MAAM,WAAW,IAAI,YAAY,CAAC,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE;YAC7D,MAAM,CAAC,GAAG,WAAW,EAAE,WAAW,CAAC,CAAC;SACrC;QAED,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KAC5B;AACH,CAAC;;;;;;;;;;;;;;;;;AClCD,SAAe,4BAA4B,CAAC,KAAa;;QACvD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACpD,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,2BAA2B;QAC9D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACpC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI;gBACF,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;oBAC1B,CAAC,CAAC,OAAO,EAAE;oBACX,CAAC,CAAC,MAAM,CAAC,SAAS,KAAK,wCAAwC,CAAC,CAAC;aACpE;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;oBAAS;gBACR,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED;;;GAGG;AACI,SAAe,eAAe,CAAC,KAAa;;QACjD,4DAA4D;QAC5D,4CAA4C;QAC5C,OAAO,SAAS,CAAC,SAAS;YACxB,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC;YACtC,CAAC,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;CAAA;;;;;;;;;;;;;ACjCD;AAAA;AAAA,MAAM,oBAAoB,GAAG;IAC3B,OAAO,EAAE,GAAG;IACZ,QAAQ,EAAE,GAAG;IACb,MAAM,EAAE,GAAG;IACX,MAAM,EAAE,GAAG;IACX,OAAO,EAAE,IAAI;CACd,CAAC;AAEF,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAE7E,SAAS,QAAQ,CAAC,gBAAmD;IACnE,OAAO,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;AAChD,CAAC;AAED;;;GAGG;AACI,SAAS,SAAS,CAAC,GAAW;IACnC,IAAI,CAAC,GAAG;QAAE,OAAO,GAAG,CAAC;IACrB,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;;;;;;;;;;;;;ACrBD;AAAA;AAAA;;;GAGG;AACI,QAAQ,CAAC,CAAC,SAAS,CAAI,KAAkB;IAC9C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACpB,KAAK,EAAE,CAAC;KACT;AACH,CAAC;;;;;;;;;;;;;ACVD;AAAA;AAAA;;;;;GAKG;AACI,SAAS,QAAQ,CACtB,CAAC,GAAG,KAAK,CAAc,EACvB,SAA+B;IAE/B,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;KACF;AACH,CAAC;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAAA;AAA0C;AACV;AAEhC;;GAEG;AACI,SAAS,aAAa;AAC3B,4BAA4B;AAC5B,MAAuB;IAEvB,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;IACvC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAChC,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,MAAM,GAAG,mDAAI,CAAC,oDAAK,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SAC5D;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;AChBD;AAAA;AAAA;;;;GAIG;AACI,SAAS,WAAW,CACzB,OAAyB;IAEzB,MAAM,MAAM,GAAkB,EAAE,CAAC;IACjC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,OAAO,EAAE;QAClC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACrB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAA6C;AAE7C,QAAQ,CAAC,CAAC,gBAAgB,CAAC,WAAqB;IAC9C,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAqB,CAAC;QAE/D,IAAI,OAAO,KAAK,KAAK,QAAQ;YAC3B,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAEnE,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;KAC5D;AACH,CAAC;AAED;;;;GAIG;AACI,SAAS,yBAAyB,CAAC,GAAW;;IACnD,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAC;IAEpB,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAElC,IAAI,QAAC,MAAM,0CAAE,MAAM;QAAE,OAAO,EAAE,CAAC;IAE/B,MAAM,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9C,IAAI,QAAC,gBAAgB,0CAAE,MAAM;QAAE,OAAO,EAAE,CAAC;IAEzC,MAAM,WAAW,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEhD,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAExD,OAAO,iEAAW,CAAC,iBAAiB,CAAC,CAAC;AACxC,CAAC;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAyD;AAEzD;;;GAGG;AACI,SAAS,OAAO;AACrB,2BAA2B;AAC3B,IAAS;AACT,2BAA2B;AAC3B,IAAgC;IAEhC,sDAAsD;IACtD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;KACf;IAED,kHAAkH;IAClH,OAAO,sDAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAC1B,IAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CACtD,CAAC;AACJ,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;;;;;;;;;GASG;AACI,SAAS,eAAe,CAC7B,IAAiB,EACjB,YAA+C;IAE/C,4GAA4G;IAC5G,MAAM,MAAM,GAAkB,EAAE,CAAC;IACjC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,MAAM,CAAC,GAAG,CAAC,YAA+B,CAAC,CAAC,GAAG,GAAG,CAAC;KACpD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;ACvgC;AACF;AACE;AACQ;AACC;AACL;AACL;AACK;AACP;AACD;AACA;AACK;AACF;AACiB;AACrB;AACS;AACV;AACC;AACD;AACF;AACG;AACI;AACF;AACS;AACT;AACE;AACE;AACJ;AACL;AACa;AACa;AACJ;;;;;;;;;;;;;AC/B9C;AAAA;AAAA;;GAEG;AACI,QAAQ,CAAC,CAAC,OAAO,CAAI,QAAqB;IAC/C,IAAI,IAAI,GAAsB,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC9C,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;QACjB,MAAM,IAAI,CAAC,KAAK,CAAC;QACjB,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;KACxB;AACH,CAAC;;;;;;;;;;;;;ACTD;AAAA;AAAA;;;GAGG;AACI,QAAQ,CAAC,CAAC,QAAQ,CAAI,QAAqB;IAChD,KAAK,CAAC,CAAC,QAAQ,CAAC;AAClB,CAAC;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AAEvC;;GAEG;AACI,MAAM,iBAAiB,GAAG,IAAI,CAAC;AAEtC;;;;;;GAMG;AACI,MAAM,eAAe,GAGhB,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AA8CjC;;;;;;;;;;;;;;GAcG;AACI,SAAS,OAAO,CACrB,IAAO,EACP,EACE,UAAU,GAAG,iBAAiB,EAC9B,QAAQ,GAAG,eAAe,KACL,EAAE;IAEzB,MAAM,KAAK,GAAG,IAAI,wDAAM,CAAwB,UAAU,CAAC,CAAC;IAE5D,SAAS,QAAQ,CAAC,GAAG,IAAmB;QACtC,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEvC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YAAE,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE1C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAErC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAEtB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,EAAE;QACtD,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK;KACjB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;ACxGD;AAAA;AAAA;AAAsC;AAEtC;;;GAGG;AACI,QAAQ,CAAC,CAAC,KAAK;AACpB,kBAAkB;AAClB,CAAc;AACd,wBAAwB;AACxB,CAAc;IAEd,MAAM,SAAS,GAAG,0DAAQ,CAAC,CAAC,CAAC,EAC3B,SAAS,GAAG,0DAAQ,CAAC,CAAC,CAAC,CAAC;IAC1B,KACE,IAAI,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,EACtD,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,EAC3B,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,EAClD;QACA,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAW,CAAC;KAC5C;AACH,CAAC;;;;;;;;;;;;;ACrBD;AAAA;AAAA;;;GAGG;AACI,QAAQ,CAAC,CAAC,QAAQ,CAAI,KAAkB;IAC7C,IAAI,QAAW,CAAC;IAChB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI,QAAQ,EAAE;YACZ,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACxB;QACD,QAAQ,GAAG,IAAI,CAAC;KACjB;AACH,CAAC;;;;;;;;;;;;;ACZD;AAAA;AAAA;;;;GAIG;AACI,QAAQ,CAAC,CAAC,YAAY,CAC3B,QAAqB,EACrB,MAAc;IAEd,IAAI,MAAM,KAAK,CAAC;QAAE,OAAO;IAEzB,MAAM,SAAS,GAAG,IAAI,GAAG,EAAK,CAAC;IAE/B,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE;QAClC,IAAI,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YAAE,SAAS;QACzC,IAAI,MAAM,KAAK,CAAC;YAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAEtC,KAAK,MAAM,CAAC,GAAG,WAAW,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE;YAClE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5C,MAAM,CAAC,GAAG,KAAK,CAAC,GAAG,WAAW,CAAC;gBAC/B,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;gBAChC,MAAM,KAAK,CAAC;aACb;SACF;QAED,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KAC5B;AACH,CAAC;;;;;;;;;;;;;;;;;AC3BD;;;;;;GAMG;AACI,SAAe,SAAS;AAC7B,8BAA8B;AAC9B,QAAsB;AACtB,4DAA4D;AAC5D,SAAgC;AAChC,8GAA8G;AAC9G,eAAkB,IAAI;;QAEtB,MAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CACtC,CAAM,OAAO,EAAC,EAAE;YACd,WAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACjC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAClE;UAAA,CACJ,CAAC;QAEF,OAAO,OAAO,CAAC,IAAI,CAAI;YACrB,GAAG,mBAAmB;YACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;SAC/C,CAAC,CAAC;IACL,CAAC;CAAA;;;;;;;;;;;;;;;;;AC1BD;;GAEG;AACI,SAAe,gBAAgB,CAAC,IAAU;;QAC/C,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAEhC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAgB,CAAC,CAAC;YACvD,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;YAEtD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;;;;;;;;;;;;;ACbD;AAAA;AAAA,SAAS,cAAc,CAAC,CAAS;IAC/B,MAAM,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;AAC5C,CAAC;AAED;;;;;GAKG;AACI,SAAS,QAAQ,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;IACtD,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ;QAC5E,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE;QACjE,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC;;;;;;;;;;;;;ACfD;AAAA;AAAA;AAAA;AAAoC;AAIpC;;GAEG;AACI,SAAS,UAAU,CAAC,OAAsB,EAAE,IAAY;IAC7D,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;KAC/B;IACD,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE;QAC/C,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAClD;SAAM,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE;QAChD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC5C;SAAM;QACL,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACtD,yDAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACzB;AACH,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;;GAEG;AACI,SAAS,YAAY,CAAC,MAAc;IACzC,OAAO,MAAM;SACV,KAAK,CAAC,EAAE,CAAC;SACT,MAAM,CACL,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,CACpB,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAC1D,CAAC,CACF,CAAC;AACN,CAAC;;;;;;;;;;;;;ACJD;AAAA;AAAA;;;GAGG;AACI,QAAQ,CAAC,CAAC,UAAU,CACzB,MAAc,EACd,EAAE,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,CAAC,MAAM,KAAuB,EAAE;IAEnE,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;IAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;QACnD,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;YACxE,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBACxB,MAAM,SAAS,CAAC;gBAChB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACrB;SACF;KACF;AACH,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;;GAEG;AACI,SAAS,KAAK;AACnB,sBAAsB;AACtB,CAAI;AACJ,uBAAuB;AACvB,CAAI;AACJ,2HAA2H;AAC3H,SAAS,GAAG,IAAI;IAEhB,yCAAyC;IACzC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAM,CAAC;IAEzC,uFAAuF;IACvF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;QACrC,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAExB,yDAAyD;QACzD,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC9B,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAEjC,8EAA8E;YAC9E,IACE,MAAM,CAAC,QAAQ,CAAC,KAAK,QAAQ;gBAC7B,QAAQ,CAAC,WAAW,KAAK,YAAY,CAAC,WAAW,EACjD;gBACA,IAAI,SAAS,EAAE;oBACb,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;iBACxB;aACF;YAED,iCAAiC;iBAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAChC,MAAM,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC7C;YAED,8BAA8B;iBACzB,IAAI,QAAQ,YAAY,GAAG,EAAE;gBAChC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACzE;YAED,wCAAwC;iBACnC;gBACH,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;aAC7C;SACF;QAED,oCAAoC;aAC/B;YACH,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;SACxB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAe,CAAC;AACzB,CAAC;;;;;;;;;;;;;ACrDD;AAAA;AAAA;;GAEG;AACI,SAAS,eAAe;IAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CACnB,SAAS,CAAC,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CACtE,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACPD;AAAA;AAAA;;GAEG;AACI,SAAS,2BAA2B;IACzC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,IAAI,CAC/B,SAAS,CAAC,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CACtE,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAA2C;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACI,SAAS,yBAAyB;AACvC,iCAAiC;AACjC,IAAqB;AACrB;;;GAGG;AACH,UAAkB;AAClB;;;;GAIG;AACH,cAAqC,4CAAK;IAE1C,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAC9D,WAAW,CAAC,KAAK,CAAC,CACnB,CAAC;IAEF,IAAI,eAAe,EAAE;QACnB,MAAM,IAAI,KAAK,CACb,sBAAsB,eAAe,CAAC,CAAC,CAAC,QACtC,eAAe,CAAC,CAAC,CACnB,iBAAiB,UAAU,GAAG,CAC/B,CAAC;KACH;AACH,CAAC;;;;;;;;;;;;;ACtDD;AAAA;AAAA;AAAqC;AAErC;;;GAGG;AACI,SAAS,cAAc,CAC5B,YAAe;IAEf,OAAO,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,0DAAG,CAAC,KAAK,CAAC,EAAE,EAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,EAAC,CAAC,CAAC;AACpE,CAAC;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACN;AACK;;;;;;;;;;;;;ACFlC;AAAA;AAAA;AAAA;AAAwE;AACb;AAWpD,SAAS,SAAS,CACvB,GAA8C;IAE9C,MAAM,IAAI,GACR,OAAO,GAAG,KAAK,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAM,EAAiB,EAAE,CAAC,GAAG,CAAC;IACnE,OAAO,gEAAS,CAAC,KAAK,CAAC,EAAE,CACvB,mDAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,qEAAc,EAAE,CAAC,EAAE,+CAAE,CAAC,KAAK,CAAC,CAAC,CACtD,CAAC;AACJ,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAA2C;AACA;AAG3C,MAAM,oBAAoB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AA+B/C,SAAS,cAAc;AAC5B,uDAAuD;AACvD,QAAgB;AAChB,wDAAwD;AACxD,oBAA4B,aAAa;IAEzC,OAAO,CAAC,MAAqB,EAAE,EAAE;QAC/B,MAAM,eAAe,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACpD,MAAM,kBAAkB,GAAG,OAAO,eAAe,KAAK,UAAU,CAAC;QAEjE,IAAI,CAAC,kBAAkB,EAAE;YACvB,MAAM,IAAI,KAAK,CACb,GACE,QAAQ,CAAC,WAAW,CAAC,IACvB,kDAAkD,iBAAiB,EAAE,CACtE,CAAC;SACH;QAED,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YACnC,QAAQ,CAAC,oBAAoB,CAAC,GAAG,IAAI,4CAAO,EAAE,CAAC;YAE/C,QAAQ,CAAC,iBAAiB,CAAC,GAAG;gBAC5B,IAAI,kBAAkB,EAAE;oBACtB,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;iBACxC;gBACD,QAAQ,CAAC,oBAAoB,CAAC,CAAC,IAAI,EAAE,CAAC;gBACtC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5C,CAAC,CAAC;SACH;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,gEAAS,CAAI,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;AClED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACC;;;;;;;;;;;;;ACFtC;AAAA;AAAA;AAA+C;AAaxC,MAAM,oBAAoB,GAAG,IAAI,4DAAc,CACpD,eAAe,CAChB,CAAC;;;;;;;;;;;;;ACfF;AAAA;AAAA;AAAA;AAAA;AAAkF;AACH;AAC5B;;;AAK5C,MAAM,aAAa;IACxB,YACmB,cAA8B,EACvB,YAA2B;QADlC,mBAAc,GAAd,cAAc,CAAgB;QAG/C,IAAI,YAAY,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;SACH;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,SAAwB,EAAE;QAE1B,OAAO;YACL,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE;gBACT,+DAAc;gBACd;oBACE,OAAO,EAAE,4EAAoB;oBAC7B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;IAEO,IAAI;QACV;;WAEG;QACH,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YAChC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,cAAuB,KAAK,EAAE,EAAE;gBACnD,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACxE,OAAO,8EAA8E,CAAC;YACxF,CAAC,CAAC;SACH;IACH,CAAC;;4FAtCU,aAAa;oJAAb,aAAa,kLAGgB,aAAa;6FAH1C,aAAa;cADzB,sDAAQ;iHAIiC,aAAa;sBAAlD,sDAAQ;;sBAAI,sDAAQ;;;;;;;;;;;;;;;;;;;;;;;;;ACVoC;AACE;AACZ;AACM;AACsB;;AAGxE,MAAM,cAAc;IAWzB,YAGmB,SAAwB,EAAE;QAA1B,WAAM,GAAN,MAAM,CAAoB;QAE3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,GAAG,oDAAc,IAAI,qDAAO,GAC5C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAChC,EAAE,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACG,oBAAoB,CAAC,cAAuB,KAAK;;YACrD,IAAI;gBACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,oFAAiB,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;gBACzE,OAAO,OAAO,CAAC;aAChB;YAAC,WAAM;gBACN,OAAO,SAAS,CAAC;aAClB;QACH,CAAC;KAAA;IAED;;;OAGG;IACG,oBAAoB,CAAC,cAAuB,KAAK;;YACrD,qEAAqE;YACrE,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACrC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC;aACvC,CAAC,CAAC;YAEH,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,UAAU;gBACpB,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;gBAClC,UAAU;aACX,CAAC;QACJ,CAAC;KAAA;;4EApDU,cAAc,yDAaf,4EAAoB;iGAbnB,cAAc,WAAd,cAAc;6FAAd,cAAc;cAD1B,wDAAU;;sBAaN,sDAAQ;;sBACR,oDAAM;uBAAC,4EAAoB;;;;;;;;;;;;;;;;;;;;;;;;ACpBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACmB;;;AAE1E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,EAAE;IAC7D;QACE,IAAI,EAAE,QAAQ;QACd,YAAY,EAAE,GAAG,EAAE,CACjB,4LAAgC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;QAC5D,IAAI,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,0EAAQ,EAAE;KAC1C;IACD;QACE,IAAI,EAAE,WAAW;QACjB,YAAY,EAAE,GAAG,EAAE,CACjB,wNAAuC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;QACtE,IAAI,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,6EAAW,EAAE;KAChD;IACD,0CAA0C;IAC1C,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;CAClD,CAAC;AASK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,mBAFhB,EAAE,YAJJ;YACP,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,yBAAyB,EAAE,SAAS,EAAE,CAAC;SACvE;QACS,4DAAY;mIAGX,gBAAgB,uFAHjB,4DAAY;6FAGX,gBAAgB;cAP5B,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,yBAAyB,EAAE,SAAS,EAAE,CAAC;iBACvE;gBACD,OAAO,EAAE,CAAC,4DAAY,CAAC;gBACvB,SAAS,EAAE,EAAE;aACd;;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAAyC;;;AAOlC,MAAM,YAAY;;wEAAZ,YAAY;4FAAZ,YAAY;QCPzB,2EAEgB;;6FDKH,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACf;AACkB;AACf;AACO;AACO;AACZ;AACU;AACT;;;;;;;;;;;;;;;;;;;;AAWxC,MAAM,SAAS;IACpB,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QACnD,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,EAAE,qDAAI,CAAC,CAAC;IACjD,CAAC;;wFAHU,SAAS,cAFR,2DAAY;4IAEb,SAAS,0IARX;YACP,GAAG,yDAAI,CAAC,OAAO,CAAC,qEAAW,CAAC;YAC5B,wEAAc;YACd,qEAAgB;YAChB,oEAAgB,CAAC,wEAAwE;SAC1F;mIAGU,SAAS,mBATL,2DAAY,k/CAGzB,wEAAc;QACd,qEAAgB;QAChB,oEAAgB,CAAC,wEAAwE;;6FAIhF,SAAS;cAVrB,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,2DAAY,CAAC;gBAC5B,OAAO,EAAE;oBACP,GAAG,yDAAI,CAAC,OAAO,CAAC,qEAAW,CAAC;oBAC5B,wEAAc;oBACd,qEAAgB;oBAChB,oEAAgB,CAAC,wEAAwE;iBAC1F;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,IAAI,EAAE,WAAW;IACjB,4BAA4B,EAAE,gBAAgB;IAC9C,IAAI,EAAE;QACJ,eAAe,EAAE,OAAO;QACxB,SAAS,EAAE,EAAE;KACd;IACD,QAAQ,EAAE;QACR,GAAG,EAAE,OAAO;QACZ,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE,WAAW;KACtB;IACD,aAAa,EAAE;QACb,SAAS,EAAE,qBAAqB;QAChC,QAAQ,EAAE,qBAAqB;KAChC;IACD,UAAU,EAAE,KAAK;IACjB,KAAK,EAAE;QACL,YAAY,EAAE,IAAI;QAClB,WAAW,EAAE,8BAA8B;QAC3C,OAAO,EAAE,gCAAgC;KAC1C;CACF,CAAC;AAEF;;;;;;GAMG;AAC8B,CAAC,6BAA6B;;;;;;;;;;;;;ACnC/D;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBACN,CAAC,0DAAU;KAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["export * from './lib/atlas-api.module';\r\nexport * from './lib/delete-entity-soft';\r\nexport * from './lib/get-all-domains';\r\nexport * from './lib/get-all-systems';\r\nexport * from './lib/get-app-seach-entity';\r\nexport * from './lib/get-classification-def-by-name';\r\nexport * from './lib/get-classification-definitions';\r\nexport * from './lib/get-classification-for-entity';\r\nexport * from './lib/get-dashboard';\r\nexport * from './lib/get-data-quality';\r\nexport * from './lib/get-entity-by-id';\r\nexport * from './lib/get-filters-and-results';\r\nexport * from './lib/get-governance-quality';\r\nexport * from './lib/get-lineage-model';\r\nexport * from './lib/get-query-results';\r\nexport * from './lib/get-term-by-id';\r\nexport * from './lib/get-terms-definitions';\r\nexport * from './lib/get-type-by-name';\r\nexport * from './lib/get-type-defs';\r\nexport * from './lib/remove-entity-classification';\r\nexport * from './lib/save-entity';\r\nexport * from './lib/save-entity-classification';\r\nexport * from './lib/types';\r\n","import { Injector, NgModule } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class AtlasApiModule {\r\n  static injector: Injector;\r\n\r\n  constructor(injector: Injector) {\r\n    AtlasApiModule.injector = injector;\r\n  }\r\n}\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { EntityMutationResponse } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/**\r\n * Sets the internal status of the entity with the given guid to DELETED. This counts as a soft delete in Atlas.\r\n * @param guid the guid of the entity\r\n */\r\nexport function deleteEntitySoft(guid: string) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'deleteEntitySoft');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http.authorize().delete<EntityMutationResponse>(path);\r\n}\r\n","export * from './delete-entity-soft';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasSearchResult, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\nexport function getDomains(\r\n  /** Optional parameters for the get domains operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getDomains');\r\n\r\n  const path = `atlas/v2/search/basic/?typeName=m4i_data_domain`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasSearchResult>(path);\r\n}\r\n","export * from './get-all-domains'\r\n","import { validateRequiredArguments } from '@models4insight/utils'\r\nimport { Observable } from 'rxjs'\r\nimport { AtlasSearchResult, GetOptions } from '../types'\r\nimport { getHttpClient } from '../utils'\r\n\r\nexport function getSystems(\r\n    /** Optional parameters for the get domains operation */\r\n    { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n    const http = getHttpClient()\r\n\r\n    validateRequiredArguments(arguments, 'getSystems')\r\n\r\n    const path = `atlas/v2/search/basic/?typeName=m4i_system`\r\n\r\n    return http\r\n        .authorize()\r\n        .cache(forceUpdate)\r\n        .get<AtlasSearchResult>(path)\r\n}\r\n","export * from './get-all-systems'\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface ElasticSearchEntity {\r\n  id: string;\r\n  qualityguid_completeness: string;\r\n  qualityguid_timeliness: string;\r\n  dqscore_completeness: string;\r\n  deriveddataset: string[];\r\n  typename: string;\r\n  dqscorecnt_uniqueness: string;\r\n  referenceablequalifiedname: string;\r\n  qualityguid_uniqueness: string;\r\n  dqscorecnt_timeliness: string;\r\n  deriveddataentity: string;\r\n  dqscorecnt_accuracy: string;\r\n  deriveddatasetguid: string[];\r\n  supertypenames: string[];\r\n  qualityguid_validity: string;\r\n  guid: string;\r\n  dqscore_validity: string;\r\n  deriveddatadomainguid: string;\r\n  derivedperson: string[];\r\n  dqscore_timeliness: string;\r\n  dqscorecnt_validity: string;\r\n  dqscore_accuracy: string;\r\n  m4isourcetype: string;\r\n  deriveddatadomain: string;\r\n  dqscorecnt_completeness: string;\r\n  definition: string;\r\n  name: string;\r\n  sourcetype: string;\r\n  qualityguid_accuracy: string;\r\n  derivedpersonguid: string[];\r\n  dqscore_uniqueness: string;\r\n}\r\n\r\nexport function getAppSearchEntity(\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<ElasticSearchEntity> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getAppSearchEntity');\r\n\r\n  const path = `elastic/documents?ids%5B%5D=${guid}`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .get<ElasticSearchEntity[]>(path)\r\n    .pipe(map(result => result?.[0]));\r\n}\r\n","export * from './get-app-search-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ClassificationDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/types/classificationdef/name';\r\n\r\n/**\r\n * Retrieves the classification type definition with the given `name` from the Atlas API\r\n */\r\nexport function getClassificationTypeByName(\r\n  /** The name of the type */\r\n  name: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<ClassificationDef> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getClassificationTypeByName');\r\n\r\n  const path = `${BASE_PATH}/${name}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ClassificationDef>(path);\r\n}\r\n","export * from \"./get-classification-def-by-name\";","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ClassificationResponse, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetClassificationsDefinitionsOptions {\r\n  /** Whether or not to ignore relationships from the results, defaults to false */\r\n  ignoreRelationships?: boolean;\r\n  /** Wether or not to consider outside information, defaults to false */\r\n  minExtInfo?: boolean;\r\n}\r\n\r\nexport function getClassificationsDefinitions({\r\n  ignoreRelationships = false,\r\n  minExtInfo = false,\r\n  forceUpdate = false\r\n}: GetOptions & GetClassificationsDefinitionsOptions = {}): Observable<\r\n  ClassificationResponse\r\n> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getClassificationsDefinitions');\r\n\r\n  const path = 'atlas/v2/types/typedefs?type=classification';\r\n\r\n  const queryParameters = createHttpParams({\r\n    ignoreRelationships,\r\n    minExtInfo\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<any>(path, requestOptions);\r\n}\r\n","export * from './get-classification-definitions';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Classification, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/**\r\n * Returns the details for a classification given the `classificationName` as well as the `entityGuid` of the associated entity.\r\n * @param entityGuid the unique id of the associated entity\r\n * @param classificationName the type name of the classification\r\n */\r\nexport function getClassificationForEntity(\r\n  entityGuid: string,\r\n  classificationName: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getClassificationForEntity');\r\n\r\n  const path = `${BASE_PATH}/${entityGuid}/classification/${classificationName}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Classification>(path);\r\n}\r\n","export * from './get-classification-for-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getDashboard(\r\n    forceUpdate = false\r\n): Observable<any> {\r\n    const http = getHttpClient();\r\n    validateRequiredArguments(arguments, 'getDashboard');\r\n    const path = 'api/data_governance_dashboard';\r\n    return http\r\n        .authorize()\r\n        .cache(forceUpdate)\r\n        .get<any>(path);\r\n}\r\n","export * from './get-dashboards'","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getDataQuality(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields: any,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getDataQuality');\r\n\r\n  const path = `data_quality`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-data-quality';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityWithEXTInformation, GetOptions } from '../types';\r\nimport { getHttpCache, getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/entity/guid';\r\n\r\n/** Clears the HTTP cache for the entity with the given `guid` */\r\nexport function clearEntityByIdCache(\r\n  //** The guid of the entity */\r\n  guid: string\r\n) {\r\n  const cache = getHttpCache();\r\n  cache.clearCache(`${BASE_PATH}/${guid}`);\r\n}\r\n\r\n/**\r\n * Retrieves the entity with the given `guid` from the Atlas API\r\n */\r\nexport function getEntityById(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<AtlasEntityWithEXTInformation> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getEntityById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasEntityWithEXTInformation>(path);\r\n}\r\n","export * from './get-entity-by-id';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getFiltersAndResults(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getFiltersAndResults');\r\n\r\n  const path = 'elastic';\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-filters-and-results';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ElasticSearchResults, Facets, FilterValuesByFieldName, GetOptions, SortingDirectionByFieldName } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getGovernanceQuality(\r\n  query: string,\r\n  facets: Facets,\r\n  result_fields: any,\r\n  page: {\r\n    size: number;\r\n    current: number;\r\n  },\r\n  filters: FilterValuesByFieldName,\r\n  sort?: SortingDirectionByFieldName,\r\n\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<ElasticSearchResults> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getGovernanceQuality');\r\n\r\n  const path = `gov_quality`;\r\n\r\n  return http\r\n    .authorizeFilter()\r\n    .cache(forceUpdate)\r\n    .post<ElasticSearchResults>(path, {\r\n      query,\r\n      facets,\r\n      filters,\r\n      page,\r\n      result_fields,\r\n      sort\r\n    });\r\n}\r\n","export * from './get-governance-quality';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport type LineageDirection = 'INPUT' | 'OUTPUT' | 'BOTH';\r\n\r\nexport interface GetLineageModelOptions {\r\n  /** Specifies the maximum number of hops to traverse the lineage graph */\r\n  readonly depth?: number;\r\n  /** Specifies whether to retrieve input lineage, output lineage or both */\r\n  readonly direction?: LineageDirection;\r\n}\r\n\r\nconst PATH = 'lineage_model';\r\n\r\n/**\r\n * Fetch the lineage of an entity given its `guid`.\r\n *\r\n *  Options:\r\n *  * You can use `depth` to specify the maximum number of hops to traverse the lineage graph. Default is 3.\r\n *  * You can use `direction` to specify whether to retrieve input lineage, output lineage or both. Default is both.\r\n *\r\n * @param guid The unique atlas id of the enitity for which to retrieve the lineage\r\n */\r\nexport function getLineageModel(\r\n  guid: string,\r\n  {\r\n    depth = 3,\r\n    direction = 'BOTH',\r\n    forceUpdate\r\n  }: GetOptions & GetLineageModelOptions = {}\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getEntityById');\r\n\r\n  const queryParameters = createHttpParams({\r\n    guid,\r\n    depth,\r\n    direction\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<any>(PATH, requestOptions);\r\n}\r\n","export * from './get-lineage-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasSearchResult, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetQueryResultsOptions {\r\n  /** Whether or not to exclude deleted entities from the search results */\r\n  excludeDeletedEntities?: boolean;\r\n  /** Limit the result set to only include the specified number of entries */\r\n  limit?: number;\r\n  /** Start offset of the result set (useful for pagination) */\r\n  offset?: number;\r\n}\r\n\r\nconst PATH = 'atlas/v2/search/basic';\r\n\r\n/**\r\n * Retrieve data for the specified fulltext query\r\n */\r\nexport function getQueryResults(\r\n  /** The fulltext query */\r\n  query: string,\r\n  /** Optional parameters for the get type defs operation */\r\n  {\r\n    excludeDeletedEntities = false,\r\n    forceUpdate = false,\r\n    limit = 0,\r\n    offset = 0\r\n  }: GetOptions & GetQueryResultsOptions = {}\r\n): Observable<AtlasSearchResult> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getQueryResults');\r\n\r\n  const queryParameters = createHttpParams({\r\n    excludeDeletedEntities,\r\n    limit,\r\n    offset,\r\n    query\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasSearchResult>(PATH, requestOptions);\r\n}\r\n","export * from './get-query-results'\r\nexport * from './types'\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { GetOptions, TermDetails } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/glossary/term';\r\n\r\n/**\r\n * Retrieves the term with the given `guid` from the Atlas API\r\n */\r\nexport function getTermById(\r\n  /** The guid of the term */\r\n  guid: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<TermDetails> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getTermById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<TermDetails>(path);\r\n}\r\n","export * from './get-term-by-id';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { GetOptions, TermDetails } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetTermsDefinitionByIdOptions {\r\n  /** Whether or not to ignore relationships from the results, defaults to false */\r\n  ignoreRelationships?: boolean;\r\n  /** Wether or not to consider outside information, defaults to false */\r\n  minExtInfo?: boolean;\r\n}\r\nconst BASE_PATH = 'atlas/v2/glossary/term';\r\n\r\nexport function getTermsDefinitionById(\r\n  /** The guid of the term entity */\r\n  guid: string,\r\n  {\r\n    ignoreRelationships = false,\r\n    minExtInfo = false,\r\n    forceUpdate = false\r\n  }: GetOptions & GetTermsDefinitionByIdOptions = {}\r\n): Observable<TermDetails> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getTermsDefinitionById');\r\n\r\n  const path = `${BASE_PATH}/${guid}`;\r\n\r\n  const queryParameters = createHttpParams({\r\n    ignoreRelationships,\r\n    minExtInfo\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<TermDetails>(path, requestOptions);\r\n}\r\n","export * from './get-terms-definitions';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst BASE_PATH = 'atlas/v2/types/entitydef/name';\r\n\r\n/**\r\n * Retrieves the entity type definition with the given `name` from the Atlas API\r\n */\r\nexport function getTypeByName(\r\n  /** The name of the type */\r\n  name: string,\r\n  { forceUpdate = false }: GetOptions = {}\r\n): Observable<AtlasEntityDef> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getTypeByName');\r\n\r\n  const path = `${BASE_PATH}/${name}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasEntityDef>(path);\r\n}\r\n","export * from './get-type-by-name';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasTypesDef, GetOptions } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport function getTypeDefs(\r\n  /** Optional parameters for the get type defs operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<AtlasTypesDef> {\r\n  const http = getHttpClient();\r\n  validateRequiredArguments(arguments, 'getTypeDefs');\r\n\r\n  const path = `atlas/v2/types/typedefs`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<AtlasTypesDef>(path);\r\n}\r\n","export * from './get-type-defs'\r\n","export * from './remove-entity-classification';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Removes the classification with the given `classificationName` from the entity with the given `guid`.\r\n */\r\nexport function removeEntityClassification(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  /** The name of the classification to remove */\r\n  classificationName: string\r\n): Observable<void> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'removeEntityClassification');\r\n\r\n  const path = `atlas/v2/entity/guid/${guid}/classification/${classificationName}`;\r\n\r\n  return http.authorize().delete<void>(path);\r\n}\r\n","export * from './save-entity-classification';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { Classification } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Adds the given `classifications` to the entity with the given `guid`.\r\n */\r\nexport function saveEntityClassification(\r\n  /** The guid of the entity */\r\n  guid: string,\r\n  /** The classifications to add */\r\n  classifications: Classification[]\r\n): Observable<void> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'saveEntityClassification');\r\n\r\n  const path = `atlas/v2/entity/guid/${guid}/classifications`;\r\n\r\n  return http.authorize().post<void>(path, classifications);\r\n}\r\n","export * from './save-entity';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { AtlasEntityWithEXTInformation, EntityMutationResponse } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nconst PATH = 'atlas/v2/entity';\r\n\r\n/**\r\n * Saves the given `entity` to Atlas.\r\n */\r\nexport function saveEntity(\r\n  /** The guid of the term */\r\n  entity: AtlasEntityWithEXTInformation\r\n): Observable<EntityMutationResponse> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'saveEntity');\r\n\r\n  return http\r\n    .authorize()\r\n    .post<EntityMutationResponse>(PATH, entity);\r\n}\r\n","import { Dictionary } from 'lodash';\r\n\r\nexport interface GetOptions {\r\n  /** Whether or not to refresh the cache */\r\n  readonly forceUpdate?: boolean;\r\n}\r\n\r\nexport interface ListOfDomainsForDashboard {\r\n  totalNumberOfDomains: number;\r\n  totalNumberOfActiveDomains: number;\r\n  domains: ListOfDomains;\r\n}\r\nexport interface ListOfDomains {\r\n  CM: DomainForDashboard;\r\n  Communication: DomainForDashboard;\r\n  'Executive Commitee': DomainForDashboard;\r\n  'Engineering & Estimating': DomainForDashboard;\r\n  'Finance and Control': DomainForDashboard;\r\n  'Facility Services': DomainForDashboard;\r\n  IT: DomainForDashboard;\r\n  'Legal Department': DomainForDashboard;\r\n  MNGT: DomainForDashboard;\r\n  'Personel and Organization': DomainForDashboard;\r\n  'Project Office': DomainForDashboard;\r\n  QHSE: DomainForDashboard;\r\n  QPS: DomainForDashboard;\r\n  'Ship Management Department': DomainForDashboard;\r\n  STM: DomainForDashboard;\r\n  Survey: DomainForDashboard;\r\n  Treasury: DomainForDashboard;\r\n  Subsidiaries: DomainForDashboard;\r\n  'Procurement & Supply Chain': DomainForDashboard;\r\n}\r\n\r\nexport interface DomainForDashboard {\r\n  name: string;\r\n  guid: string;\r\n  isActive: boolean;\r\n  totalNumberOfEntities: number;\r\n}\r\nexport interface Facet {\r\n  readonly type: string;\r\n}\r\n\r\nexport interface FilterEntity {\r\n  readonly guid: FilterResult;\r\n  readonly name: string;\r\n}\r\n\r\nexport interface FilterChoice {\r\n  readonly valueGuid?: string;\r\n  readonly valueName?: string;\r\n  readonly valueCount?: number;\r\n  readonly option?: string;\r\n}\r\nexport interface FacetData {\r\n  readonly value: string;\r\n  readonly count: number;\r\n}\r\nexport interface Facet {\r\n  readonly type: string;\r\n  readonly size: number;\r\n  readonly data?: Array<FacetData>;\r\n}\r\n\r\nexport interface FilterValuesByFieldName {\r\n  [fieldName: string]: string[];\r\n}\r\n\r\nexport type SortingDirection = 'asc' | 'desc';\r\n\r\nexport interface SortingDirectionByFieldName {\r\n  [fieldName: string]: SortingDirection;\r\n}\r\n\r\nexport interface FiltersInOrder {\r\n  attributes: Array<Facet>;\r\n  name: string;\r\n  whiteList: PropertiesForOrderList;\r\n}\r\n\r\nexport type Facets = Dictionary<Facet>;\r\n\r\nexport interface ElasticSearchResults {\r\n  readonly meta?: Meta;\r\n  readonly results?: Array<ElasticSearchResult>;\r\n  readonly facets?: Facets;\r\n}\r\n\r\nexport interface ConfigurationForOrderList {\r\n  supertypenames: PropertiesForOrderList;\r\n  deriveddatadomain: PropertiesForOrderList;\r\n  deriveddataentity: PropertiesForOrderList;\r\n  derivedsystem: PropertiesForOrderList;\r\n  derivedcollection: PropertiesForOrderList;\r\n  deriveddataset: PropertiesForOrderList;\r\n  classificationtext: PropertiesForOrderList;\r\n  derivedperson: PropertiesForOrderList;\r\n  sourcetype: PropertiesForOrderList;\r\n  datadomainname: PropertiesForOrderList;\r\n  dataqualityruledimension: PropertiesForOrderList;\r\n}\r\n\r\nexport interface PropertiesForWhiteList {\r\n  cardinalitySET: boolean;\r\n  description: string;\r\n  isReference: boolean;\r\n  showIfEmpty: boolean;\r\n}\r\nexport interface PropertiesForOrderList {\r\n  typeList: string;\r\n  condicional: boolean;\r\n  position: number;\r\n  hasAnyOption: boolean;\r\n  excludeSubTypeBox: boolean;\r\n}\r\n\r\nexport interface AtlasSearchResult {\r\n  approximateCount: number;\r\n  attributes: AtlasSearchResultAttributes;\r\n  classification: string;\r\n  entities: EntityElement[];\r\n  fullTextResult: FullTextResult[];\r\n  nextMarker: string;\r\n  queryText: string;\r\n  queryType: string;\r\n  referredEntities: ReferredEntities;\r\n  searchParameters: SearchParameters;\r\n  type: string;\r\n}\r\n\r\nexport interface AtlasSearchResultAttributes {\r\n  name: string[];\r\n  values: Array<Value[]>;\r\n}\r\n\r\nexport interface FullTextResult {\r\n  entity: FullTextResultEntity;\r\n  score: number;\r\n}\r\n\r\nexport interface FullTextResultEntity {\r\n  classificationNames: string[];\r\n  classifications: Value[];\r\n  displayText: string;\r\n  guid: string;\r\n  isIncomplete: boolean;\r\n  labels: string[];\r\n  meaningNames: string[];\r\n  meanings: Value[];\r\n  status: string;\r\n  attributes: EntityAttributes;\r\n  typeName: string;\r\n}\r\n\r\nexport interface ReferredEntities {\r\n  [guid: string]: EntityElement;\r\n}\r\n\r\nexport interface SearchParameters {\r\n  attributes: string[];\r\n  classification: string;\r\n  entityFilters: Filters;\r\n  excludeDeletedEntities: boolean;\r\n  includeClassificationAttributes: boolean;\r\n  includeSubClassifications: boolean;\r\n  includeSubTypes: boolean;\r\n  limit: number;\r\n  marker: string;\r\n  offset: number;\r\n  query: string;\r\n  sortBy: string;\r\n  sortOrder: string;\r\n  tagFilters: Filters;\r\n  termName: string;\r\n  typeName: string;\r\n}\r\nexport interface Filters {\r\n  attributeName: string;\r\n  attributeValue: string;\r\n  condition: string;\r\n  criterion: Value[];\r\n  operator: string;\r\n}\r\n\r\nexport interface FiltersFromBackend {\r\n  meta: Meta;\r\n  results: Array<ElasticSearchResult>;\r\n}\r\n\r\nexport interface ElasticSearchResult {\r\n  guid: FilterResult;\r\n  id: FilterResult;\r\n  [field: string]: FilterResult;\r\n}\r\n\r\nexport interface FilterResult {\r\n  raw: any;\r\n  snippet?: string;\r\n}\r\n\r\nexport interface Meta {\r\n  alerts: Array<any>;\r\n  engine: Engine;\r\n  page: Page;\r\n  warnings: Array<any>;\r\n  precision: number;\r\n  request_id: string;\r\n}\r\nexport interface Page {\r\n  current: number;\r\n  size: number;\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\nexport interface Engine {\r\n  name: string;\r\n  type: string;\r\n}\r\nexport interface Classification {\r\n  entityGuid: string;\r\n  entityStatus: string;\r\n  propagate: boolean;\r\n  removePropagationsOnEntityDelete: boolean;\r\n  validityPeriods?: Value[];\r\n  attributes?: EntityAttributes;\r\n  typeName: string;\r\n}\r\n\r\nexport type Value = any;\r\n\r\nexport interface EntityAttributes {\r\n  [key: string]: Value;\r\n}\r\n\r\nexport interface EntityElement {\r\n  attributes: EntityAttributes;\r\n  guid: string;\r\n  typeName: string;\r\n  classifications: Classification[];\r\n  classificationNames?: string[];\r\n  displayText?: string;\r\n  isIncomplete?: boolean;\r\n  labels?: string[];\r\n  meaningNames?: string[];\r\n  meanings?: Meaning[];\r\n  status?: string;\r\n}\r\n\r\nexport interface Meaning {\r\n  confidence: number;\r\n  createdBy: string;\r\n  description: string;\r\n  displayText: string;\r\n  expression: string;\r\n  relationGuid: string;\r\n  source: string;\r\n  status: string;\r\n  steward: string;\r\n  termGuid: string;\r\n}\r\n\r\nexport interface ClassificationResponse {\r\n  businessMetadataDefs: Array<AtlasEntityDef>;\r\n  classificationDefs: Array<AtlasEntityDef>;\r\n  entityDefs: Array<AtlasEntityDef>;\r\n  enumDefs: Array<AtlasEntityDef>;\r\n  relationshipDefs: Array<AtlasEntityDef>;\r\n  structDefs: Array<AtlasEntityDef>;\r\n}\r\n\r\nexport interface Term {\r\n  description?: string;\r\n  name?: string;\r\n}\r\nexport interface ClassificationTag {\r\n  [key: number]: ClassificationItem;\r\n}\r\n\r\nexport interface ClassificationItem {\r\n  [key: number]: string;\r\n}\r\nexport interface TermDetails {\r\n  anchor: TermAnchor;\r\n  assignedEntities: Array<AssignedEntity>;\r\n  categories: Array<Category>;\r\n  glossaryTermHeader: GlossaryTermHeader;\r\n  guid: string;\r\n  name: string;\r\n  qualifiedName: string;\r\n  longDescription: string;\r\n  shortDescription: string;\r\n}\r\nexport interface Category {\r\n  categoryGuid: string;\r\n  displayText: string;\r\n  relationGuid: string;\r\n}\r\nexport interface GlossaryTermHeader {\r\n  qualifiedName: string;\r\n  termGuid: string;\r\n}\r\n\r\nexport interface AssignedEntity {\r\n  displayText: string;\r\n  entityStatus: string;\r\n  guid: string;\r\n  relationshipAttributes: RelationshipAttribute;\r\n  relationshipGuid: string;\r\n  relationshipStatus: string;\r\n  relationshipType: string;\r\n  typeName: string;\r\n}\r\nexport interface RelationshipAttribute {\r\n  attributes?: Attributes;\r\n  typeName: string;\r\n}\r\nexport interface Attributes {\r\n  confidence: string;\r\n  createdBy: string;\r\n  description: string;\r\n  expression: string;\r\n  source: string;\r\n  status: string;\r\n  steward: string;\r\n}\r\n\r\nexport interface TermAnchor {\r\n  glossaryGuid: string;\r\n  relationGuid: string;\r\n}\r\n\r\nexport interface EntityMutationResponse {\r\n  guidAssignments: GUIDAssignments;\r\n  mutatedEntities: MutatedEntities;\r\n  partialUpdatedEntities: AtlasEntityHeader[];\r\n}\r\n\r\nexport interface GUIDAssignments {\r\n  [property: string]: string;\r\n}\r\n\r\nexport interface MutatedEntities {\r\n  [property: string]: AtlasEntityHeader[];\r\n}\r\n\r\nexport interface AtlasEntityHeader {\r\n  classificationNames: string[];\r\n  classifications: Classification[];\r\n  displayText: string;\r\n  guid: string;\r\n  isIncomplete: boolean;\r\n  labels: string[];\r\n  meaningNames: string[];\r\n  meanings: Meaning[];\r\n  status: 'ACTIVE' | 'DELETED' | 'PURGED';\r\n  attributes: Attributes;\r\n  typeName: string;\r\n}\r\n\r\nexport interface AtlasEntityWithEXTInformation {\r\n  entity: EntityElementWithEXTInfo;\r\n  referredEntities: ReferredEntities;\r\n}\r\n\r\nexport interface EntityElementWithEXTInfo extends EntityElement {\r\n  relationshipAttributes: EntityAttributes;\r\n  businessAttributes?: EntityAttributes;\r\n  customAttributes?: EntityAttributes;\r\n  createTime?: number;\r\n  createdBy?: string;\r\n  homeId?: string;\r\n  pendingTasks?: string[];\r\n  provenanceType?: number;\r\n  proxy?: boolean;\r\n  updateTime?: number;\r\n  updatedBy?: string;\r\n  version?: number;\r\n}\r\n\r\nexport interface AtlasTypesDef {\r\n  readonly businessMetadataDefs: StructDef[];\r\n  readonly classificationDefs: ClassificationDef[];\r\n  readonly entityDefs: AtlasEntityDef[];\r\n  readonly enumDefs: EnumDef[];\r\n  readonly relationshipDefs: RelationshipDef[];\r\n  readonly structDefs: StructDef[];\r\n}\r\n\r\nexport interface BaseTypeDef {\r\n  readonly category: string;\r\n  readonly createTime: number;\r\n  readonly createdBy: string;\r\n  readonly dateFormatter: DateFormat;\r\n  readonly description: string;\r\n  readonly guid: string;\r\n  readonly name: string;\r\n  readonly options: Options;\r\n  readonly serviceType: string;\r\n  readonly typeVersion: string;\r\n  readonly updateTime: number;\r\n  readonly updatedBy: string;\r\n  readonly version: number;\r\n}\r\n\r\nexport interface StructDef extends BaseTypeDef {\r\n  readonly attributeDefs: AttributeDef[];\r\n}\r\n\r\nexport interface ClassificationDef extends StructDef {\r\n  readonly entityTypes: string[];\r\n  readonly subTypes: string[];\r\n  readonly superTypes: string[];\r\n}\r\n\r\nexport interface AtlasEntityDef extends StructDef {\r\n  readonly businessAttributeDefs: BusinessAttributeDefs;\r\n  readonly relationshipAttributeDefs: AttributeDef[];\r\n  readonly subTypes: string[];\r\n  readonly superTypes: string[];\r\n}\r\n\r\nexport interface EnumDef extends BaseTypeDef {\r\n  readonly defaultValue: string;\r\n  readonly elementDefs: EnumElementDef;\r\n}\r\n\r\nexport interface EnumElementDef {\r\n  readonly description: string;\r\n  readonly ordinal: number;\r\n  readonly value: string;\r\n}\r\n\r\nexport interface RelationshipDef extends StructDef {\r\n  readonly endDef1: RelationshipEndDef;\r\n  readonly endDef2: RelationshipEndDef;\r\n  readonly propagateTags: string;\r\n  readonly relationshipCategory: string;\r\n  readonly relationshipLabel: string;\r\n}\r\n\r\nexport interface AttributeDef {\r\n  readonly cardinality: Cardinality;\r\n  readonly constraints: ConstraintDef[];\r\n  readonly defaultValue: string;\r\n  readonly description: string;\r\n  readonly displayName: string;\r\n  readonly includeInNotification: boolean;\r\n  readonly indexType: IndexType;\r\n  readonly isIndexable: boolean;\r\n  readonly isOptional: boolean;\r\n  readonly isUnique: boolean;\r\n  readonly name: string;\r\n  readonly options: Options;\r\n  readonly searchWeight: number;\r\n  readonly typeName: string;\r\n  readonly valuesMaxCount: number;\r\n  readonly valuesMinCount: number;\r\n  readonly isLegacyAttribute?: boolean;\r\n  readonly relationshipTypeName?: string;\r\n}\r\n\r\nexport interface ConstraintDef {\r\n  readonly params: { [key: string]: object };\r\n  readonly type: string;\r\n}\r\n\r\nexport enum Cardinality {\r\n  List = 'LIST',\r\n  Set = 'SET',\r\n  Single = 'SINGLE'\r\n}\r\n\r\nexport enum IndexType {\r\n  Default = 'DEFAULT',\r\n  String = 'STRING'\r\n}\r\n\r\nexport interface Options {\r\n  readonly [property: string]: string;\r\n}\r\n\r\nexport interface BusinessAttributeDefs {\r\n  readonly [property: string]: AttributeDef[];\r\n}\r\n\r\nexport interface DateFormat {\r\n  readonly availableLocales: string[];\r\n  readonly calendar: number;\r\n  readonly lenient: boolean;\r\n  readonly dateInstance?: DateFormat;\r\n  readonly dateTimeInstance?: DateFormat;\r\n  readonly instance?: DateFormat;\r\n  readonly numberFormat?: DateFormat;\r\n  readonly timeInstance?: DateFormat;\r\n  readonly timeZone?: DateFormat;\r\n}\r\n\r\nexport interface RelationshipEndDef {\r\n  readonly cardinality: Cardinality;\r\n  readonly description: string;\r\n  readonly isContainer: boolean;\r\n  readonly isLegacyAttribute: boolean;\r\n  readonly name: string;\r\n  readonly type: string;\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { HttpService } from '@models4insight/http';\r\nimport { HttpCacheService } from 'libs/http/src/lib/http-cache.service';\r\nimport { Dictionary, isNaN, isNil } from 'lodash';\r\nimport { AtlasApiModule } from './atlas-api.module';\r\n\r\n/**\r\n * Creates a new `HttpParams` object based on the given parameters, filtering out any parameter of which the value is null or undefined\r\n */\r\nexport function createHttpParams(\r\n  /** The set of key value pairs to include as parameters */\r\n  params: Dictionary<any>\r\n): HttpParams {\r\n  let result: HttpParams = new HttpParams();\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (!isNil(value) && !isNaN(value)) {\r\n      result = result.set(key, value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the `HttpService` as imported by the `RepositoryModule`. If the `RepositoryModule` has not been loaded, throws an error.\r\n */\r\nexport function getHttpClient(): HttpService {\r\n  if (!AtlasApiModule.injector) {\r\n    throw new Error(\r\n      'Tried running an API query while the AtlasApiModule was not loaded. Please make sure the AtlasApiModule is imported.'\r\n    );\r\n  }\r\n  return AtlasApiModule.injector.get(HttpService);\r\n}\r\n\r\nexport function getHttpCache(): HttpCacheService {\r\n  if (!AtlasApiModule.injector) {\r\n    throw new Error(\r\n      'Tried accessing the cache while the AtlasApiModule was not loaded. Please make sure the AtlasApiModule is imported.'\r\n    );\r\n  }\r\n  return AtlasApiModule.injector.get(HttpCacheService);\r\n}\r\n","export { AuthenticationConfig } from './lib/authentication-config.service';\nexport * from './lib/authentication.guard';\nexport * from './lib/authentication.module';\nexport * from './lib/authentication.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthenticationConfigCredentials {\r\n  readonly secret: string;\r\n}\r\n\r\nexport interface AuthenticationConfig {\r\n  readonly clientId: string;\r\n  readonly realm: string;\r\n  readonly url: string;\r\n  readonly credentials?: AuthenticationConfigCredentials;\r\n}\r\n\r\nexport const AuthenticationConfigService = new InjectionToken<\r\n  AuthenticationConfig\r\n>('AuthenticationConfig');\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\nconst log = new Logger('AuthenticationGuard');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationGuard implements CanActivate {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    return this.authenticationService.isAuthenticated().pipe(\r\n      tap((isAuthenticated: boolean) => {\r\n        if (!isAuthenticated) {\r\n          log.debug('Not authenticated, redirecting to login...');\r\n          this.authenticationService.login();\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthenticationConfig, AuthenticationConfigService } from './authentication-config.service';\r\n\r\n@NgModule({\r\n  imports: [RouterModule]\r\n})\r\nexport class AuthenticationModule {\r\n  static forRoot(\r\n    config: AuthenticationConfig\r\n  ): ModuleWithProviders<AuthenticationModule> {\r\n    return {\r\n      ngModule: AuthenticationModule,\r\n      providers: [\r\n        {\r\n          provide: AuthenticationConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { AuthenticationModule } from './authentication.module';\r\nimport { KeycloakService } from './keycloak.service';\r\n\r\nconst log = new Logger('AuthenticationService');\r\n\r\n/** Represents the Credentials data object as supplied by Keycloak */\r\nexport interface Credentials {\r\n  /** The username of the user */\r\n  username?: string;\r\n  /** The email address of the user */\r\n  email?: string;\r\n  /** The first name of the user */\r\n  firstName?: string;\r\n  /** The last name of the user */\r\n  lastName?: string;\r\n  /** Whether or not the email address of the user has been verified */\r\n  emailVerified?: boolean;\r\n  /** Additional attributes to the user */\r\n  attributes?: {};\r\n}\r\n\r\n/** Data object that represents the state of the authentication service */\r\nexport interface AuthenticationStoreContext {\r\n  /** The credentials of the current user */\r\n  readonly credentials?: Credentials;\r\n  /** Whether or not the user is currently authenticated */\r\n  readonly isAuthenticated?: boolean;\r\n}\r\n\r\n/**\r\n * Provides a base for authentication workflow.\r\n */\r\n@Injectable({\r\n  providedIn: AuthenticationModule\r\n})\r\nexport class AuthenticationService extends BasicStore<\r\n  AuthenticationStoreContext\r\n> {\r\n  constructor(\r\n    private keycloakService: KeycloakService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'AuthenticationService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // On init, check whether the user is already authenticated. This causes the user to be redirected to the login screen if they are not logged in.\r\n    // If the user is authenticated, update the auth state.\r\n    this.keycloakService.isAuthenticated.then(isAuthenticated =>\r\n      this.update({\r\n        description: 'Initial auth state updated',\r\n        payload: {\r\n          isAuthenticated: isAuthenticated\r\n        }\r\n      })\r\n    );\r\n\r\n    // Whenever the Keycloak onAuthStateChanged event triggers, update the auth state.\r\n    this.keycloakService.onAuthStateChanged.subscribe(isAuthenticated =>\r\n      this.update({\r\n        description: 'Auth state updated',\r\n        payload: {\r\n          isAuthenticated: isAuthenticated\r\n        }\r\n      })\r\n    );\r\n\r\n    // Whenver the user logs out of Keycloak while they are logged into this app, log them out here as well.\r\n    this.keycloakService.onAuthStateChanged\r\n      .pipe(\r\n        filter(isAuthenticated => !isAuthenticated),\r\n        switchMap(() => this.login())\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the auth state changes, update the user credentials.\r\n    // If the user is not authenticated, the credentials object should be empty.\r\n    this.isAuthenticated()\r\n      .pipe(\r\n        switchMap(isAuthenticated =>\r\n          isAuthenticated\r\n            ? this.keycloakService.userProfile\r\n            : of({} as Credentials)\r\n        )\r\n      )\r\n      .subscribe(credentials =>\r\n        this.update({\r\n          description: 'User credentials updated',\r\n          payload: {\r\n            credentials: credentials\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Authenticates the user.\r\n   */\r\n  login() {\r\n    return this.keycloakService.login();\r\n  }\r\n\r\n  /**\r\n   * Logs out the user and clear credentials.\r\n   */\r\n  logout() {\r\n    return this.keycloakService.logout();\r\n  }\r\n\r\n  /**\r\n   * Whether the user is authenticated.\r\n   * @return True if the user is authenticated.\r\n   */\r\n  isAuthenticated(): Observable<boolean> {\r\n    return this.select('isAuthenticated');\r\n  }\r\n\r\n  /**\r\n   * Redirects the user to their account management panel\r\n   */\r\n  accountManagement() {\r\n    return this.keycloakService.accountManagement();\r\n  }\r\n\r\n  /**\r\n   * Gets the current user's credentials.\r\n   * @return The current user's credentials, or null if not authenticated.\r\n   */\r\n  credentials(): Observable<Credentials> {\r\n    return this.select('credentials');\r\n  }\r\n\r\n  /**\r\n   * Emits whenever the authentication state changes\r\n   * @return An observable stream of the current authentication state\r\n   */\r\n  onAuthStateChanged(): Observable<boolean> {\r\n    return this.select('isAuthenticated');\r\n  }\r\n\r\n  /**\r\n   * Attempts to update the token. If not successful, redirects to login. Returns the token, or nothing if no token is available.\r\n   */\r\n  async updateToken() {\r\n    let token: string;\r\n    try {\r\n      token = await this.keycloakService.updateToken();\r\n    } catch {\r\n      this.login();\r\n    }\r\n    return token;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport Keycloak from 'keycloak-js';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { AuthenticationConfig, AuthenticationConfigService } from './authentication-config.service';\r\nimport { AuthenticationModule } from './authentication.module';\r\n\r\nconst log = new Logger('KeycloakService');\r\n\r\nexport interface LoginOptions {\r\n  action?: 'register';\r\n  locale?: string;\r\n  loginHint?: string;\r\n  prompt?: 'login' | 'none';\r\n  redirectUri?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: AuthenticationModule\r\n})\r\nexport class KeycloakService {\r\n  private readonly keycloakAuth: Keycloak.KeycloakInstance;\r\n  private readonly authState: Subject<boolean> = new ReplaySubject<boolean>();\r\n\r\n  constructor(\r\n    @Inject(AuthenticationConfigService) config: AuthenticationConfig\r\n  ) {\r\n    this.keycloakAuth = Keycloak(config);\r\n\r\n    this.authState.subscribe((auth: boolean) =>\r\n      log.debug(`Auth state updated: ${auth}`)\r\n    );\r\n\r\n    this.keycloakAuth.onReady = auth => this.authState.next(auth);\r\n    this.keycloakAuth.onAuthSuccess = () => this.authState.next(true);\r\n    this.keycloakAuth.onAuthLogout = () => this.authState.next(false);\r\n\r\n    /**\r\n     * Whenever the token expires and a refresh token is available, try to refresh the access token.\r\n     * Otherwise, redirect to login.\r\n     */\r\n    this.keycloakAuth.onTokenExpired = () => {\r\n      if (this.keycloakAuth.refreshToken) {\r\n        this.updateToken();\r\n      } else {\r\n        this.authState.next(false);\r\n        this.login();\r\n      }\r\n    };\r\n    /**\r\n     * When failing to refresh the token, redirect to login.\r\n     */\r\n    this.keycloakAuth.onAuthRefreshError = () => {\r\n      log.debug('Failed to refresh the access token. Redirecting to login...');\r\n      this.authState.next(false);\r\n      this.login();\r\n    };\r\n  }\r\n\r\n  async login(options: LoginOptions = {}): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.login(options);\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.logout();\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  async accountManagement(): Promise<void> {\r\n    const { success, error } = this.keycloakAuth.accountManagement();\r\n    return new Promise<void>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  updateToken(): Promise<string> {\r\n    const { success, error } = this.keycloakAuth.updateToken(5);\r\n    return new Promise<string>((resolve, reject) => {\r\n      success(() => resolve(this.keycloakAuth.token));\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  get isAuthenticated(): Promise<boolean> {\r\n    const { authenticated } = this.keycloakAuth;\r\n    return authenticated\r\n      ? Promise.resolve(authenticated)\r\n      : this.isSSOAuthenticated();\r\n  }\r\n\r\n  get token(): string {\r\n    return this.keycloakAuth.token;\r\n  }\r\n\r\n  get tokenParsed(): Keycloak.KeycloakTokenParsed {\r\n    return this.keycloakAuth.tokenParsed;\r\n  }\r\n\r\n  get userProfile(): Promise<Keycloak.KeycloakProfile> {\r\n    const { profile } = this.keycloakAuth;\r\n    return profile ? Promise.resolve(profile) : this.loadUserProfile();\r\n  }\r\n\r\n  get onAuthStateChanged(): Observable<boolean> {\r\n    return this.authState.pipe(distinctUntilChanged());\r\n  }\r\n\r\n  private async isSSOAuthenticated(): Promise<boolean> {\r\n    const { success, error } = this.keycloakAuth.init({ onLoad: 'check-sso' });\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n\r\n  private async loadUserProfile(): Promise<Keycloak.KeycloakProfile> {\r\n    const { success, error } = this.keycloakAuth.loadUserProfile();\r\n    return new Promise<Keycloak.KeycloakProfile>((resolve, reject) => {\r\n      success(resolve);\r\n      error(reject);\r\n    });\r\n  }\r\n}\r\n","export * from './lib/core';\n","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { AuthenticationConfig, AuthenticationModule } from '@models4insight/authentication';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsModule } from '@models4insight/google-analytics';\r\nimport { HttpModule } from '@models4insight/http';\r\nimport { I18nConfig, I18nModule } from '@models4insight/i18n';\r\nimport { LoggerModule } from '@models4insight/logger';\r\nimport { NotificationsConfig, NotificationsModule } from '@models4insight/notifications';\r\nimport { ReduxModule } from '@models4insight/redux';\r\nimport { ServicesBranchModule } from '@models4insight/services/branch';\r\nimport { ClickstreamModule } from '@models4insight/services/clickstream';\r\nimport { ServicesModelModule } from '@models4insight/services/model';\r\nimport { ServicesProjectModule } from '@models4insight/services/project';\r\nimport { ServicesUserInfoModule } from '@models4insight/services/user-info';\r\nimport { ShellConfig, ShellModule } from '@models4insight/shell';\r\nimport { TaskManagerModule } from '@models4insight/task-manager';\r\nimport { VersionModule } from '@models4insight/version';\r\n\r\nexport interface CoreConfig {\r\n  readonly googleAnalyticsMeasurementID: GoogleAnalyticsConfig['measurementID'];\r\n  readonly i18n: I18nConfig;\r\n  readonly keycloak: AuthenticationConfig;\r\n  readonly notifications: NotificationsConfig;\r\n  readonly production: boolean;\r\n  readonly shell: ShellConfig;\r\n}\r\n\r\n/**\r\n * Represents the core of every Models4Insight application. Provides a method to generate an NgModule imports statement with a given configuration.\r\n */\r\nexport class Core {\r\n  /**\r\n   * Returns an NgModule imports statement for the core Models4Insight modules initialized with the given configuration parameters\r\n   * @param config The configuration parameters with which to initialize the core modules\r\n   */\r\n  static imports(config: CoreConfig): NgModule['imports'] {\r\n    return [\r\n      BrowserAnimationsModule,\r\n      LoggerModule.forRoot({ production: config.production }),\r\n      HttpModule.forRoot({ production: config.production }),\r\n      VersionModule.forRoot({\r\n        appName: config.shell.appName,\r\n        production: config.production\r\n      }),\r\n      ReduxModule.forRoot({ production: config.production }),\r\n      AuthenticationModule.forRoot(config.keycloak),\r\n      GoogleAnalyticsModule.forRoot({\r\n        measurementID: config.googleAnalyticsMeasurementID,\r\n        production: config.production\r\n      }),\r\n      I18nModule.forRoot(config.i18n),\r\n      TaskManagerModule,\r\n      ClickstreamModule.forRoot({ app: config.shell.appName }),\r\n      NotificationsModule.forRoot(config.notifications),\r\n      ServicesBranchModule,\r\n      ServicesModelModule,\r\n      ServicesProjectModule,\r\n      ServicesUserInfoModule,\r\n      ServiceWorkerModule.register('./ngsw-worker.js', {\r\n        enabled: config.production\r\n      }),\r\n      ShellModule.forRoot(config.shell)\r\n    ];\r\n  }\r\n}\r\n","export { GoogleAnalyticsConfig } from './lib/google-analytics-config.service';\nexport * from './lib/google-analytics.module';\nexport * from './lib/google-analytics.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface GoogleAnalyticsConfig {\r\n  readonly production?: boolean;\r\n  readonly measurementID?: string;\r\n}\r\n\r\nexport const GoogleAnalyticsConfigService = new InjectionToken<\r\n  GoogleAnalyticsConfig\r\n>('GoogleAnalyticsConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsConfigService } from './google-analytics-config.service';\r\nimport { GoogleAnalyticsService } from './google-analytics.service';\r\n\r\n@NgModule({})\r\nexport class GoogleAnalyticsModule {\r\n  constructor(\r\n    @Inject(GoogleAnalyticsConfigService)\r\n    config: GoogleAnalyticsConfig = {},\r\n    googleAnalyticsService: GoogleAnalyticsService,\r\n    @Optional() @SkipSelf() parentModule: GoogleAnalyticsModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'GoogleAnalyticsModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      googleAnalyticsService.init();\r\n    }\r\n  }\r\n\r\n  static forRoot(\r\n    config: GoogleAnalyticsConfig = {}\r\n  ): ModuleWithProviders<GoogleAnalyticsModule> {\r\n    return {\r\n      ngModule: GoogleAnalyticsModule,\r\n      providers: [\r\n        GoogleAnalyticsService,\r\n        {\r\n          provide: GoogleAnalyticsConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/// <reference types=\"gtag.js\" />\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { distinctUntilChanged, filter, pluck } from 'rxjs/operators';\r\nimport { GoogleAnalyticsConfig, GoogleAnalyticsConfigService } from './google-analytics-config.service';\r\n\r\ndeclare const gtag: Gtag.Gtag;\r\n\r\n@Injectable()\r\nexport class GoogleAnalyticsService {\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(GoogleAnalyticsConfigService)\r\n    private config: GoogleAnalyticsConfig = {}\r\n  ) {}\r\n\r\n  init() {\r\n    // Listen for navigation end events on the router.\r\n    // Whenever the url changes, record a new pageview\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        pluck<NavigationEnd, string>('urlAfterRedirects'),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe(url => {\r\n        if (gtag) {\r\n          gtag('config', this.config.measurementID, {\r\n            page_path: url\r\n          });\r\n        } else {\r\n          throw new Error(\r\n            'Tried submitting Google analytics measurement data, but Google analytics functions were not loaded properly.'\r\n          );\r\n        }\r\n      });\r\n  }\r\n}\r\n","export { HttpConfig } from './lib/http-config.service';\nexport * from './lib/http.module';\nexport * from './lib/http.service';\n\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('AuthorizationHeaderInterceptorFilter');\r\n\r\n/**\r\n * Adds an authorization header containing the current Keycloak token to all requests.\r\n */\r\n@Injectable()\r\nexport class AuthorizationHeaderInterceptorFilter implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept<T>(\r\n    request: HttpRequest<T>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<T>> {\r\n    // Retrieve the current access token or update it if it has expired.\r\n    const token$ = this.authenticationService.updateToken();\r\n\r\n    return from(token$).pipe(\r\n      switchMap(token =>\r\n        next.handle(\r\n          request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer search-ot1rcw3uffpojw1tz299upw1`\r\n            }\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('AuthorizationHeaderInterceptor');\r\n\r\n/**\r\n * Adds an authorization header containing the current Keycloak token to all requests.\r\n */\r\n@Injectable()\r\nexport class AuthorizationHeaderInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept<T>(\r\n    request: HttpRequest<T>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<T>> {\r\n    // Retrieve the current access token or update it if it has expired.\r\n    const token$ = this.authenticationService.updateToken();\r\n\r\n    return from(token$).pipe(\r\n      switchMap(token =>\r\n        next.handle(\r\n          request.clone({\r\n            setHeaders: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { HttpCacheService } from './http-cache.service';\n\n/**\n * Caches HTTP requests.\n * Use ExtendedHttpClient fluent API to configure caching for each request.\n */\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  private forceUpdate = false;\n\n  constructor(private httpCacheService: HttpCacheService) {}\n\n  /**\n   * Configures interceptor options\n   * @param options If update option is enabled, forces request to be made and updates cache entry.\n   * @return The configured instance.\n   */\n  configure(options?: { update?: boolean } | null): CacheInterceptor {\n    const instance = new CacheInterceptor(this.httpCacheService);\n    if (options && options.update) {\n      instance.forceUpdate = true;\n    }\n    return instance;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (request.method !== 'GET') {\n      return next.handle(request);\n    }\n\n    return new Observable((subscriber: Subscriber<HttpEvent<any>>) => {\n      const cachedData = this.forceUpdate ? null : this.httpCacheService.getCacheData(request.urlWithParams);\n      if (cachedData !== null) {\n        // Create new response to avoid side-effects\n        subscriber.next(new HttpResponse(cachedData as Object));\n        subscriber.complete();\n      } else {\n        next.handle(request).subscribe(\n          event => {\n            if (event instanceof HttpResponse) {\n              this.httpCacheService.setCacheData(request.urlWithParams, event);\n            }\n            subscriber.next(event);\n          },\n          error => subscriber.error(error),\n          () => subscriber.complete()\n        );\n      }\n    });\n  }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Logger } from '@models4insight/logger';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpConfig, HttpConfigService } from './http-config.service';\n\nconst log = new Logger('ErrorHandlerInterceptor');\n\n/**\n * Adds a default error handler to all requests.\n */\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n  constructor(\n    @Optional() @Inject(HttpConfigService) private config: HttpConfig = {}\n  ) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next\n      .handle(request)\n      .pipe(catchError(error => this.errorHandler(error)));\n  }\n\n  // Customize the default error handler here if needed\n  private errorHandler(response: HttpEvent<any>): Observable<HttpEvent<any>> {\n    if (!this.config.production) {\n      // Do something with the error\n      log.error('Request error', response);\n    }\n    throw response;\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { each } from 'lodash';\r\n\r\n\r\nconst log = new Logger('HttpCacheService');\r\nconst cachePersistenceKey = 'httpCache';\r\n\r\nexport interface HttpCacheEntry {\r\n  lastUpdated: Date;\r\n  data: HttpResponse<any>;\r\n}\r\n\r\n/**\r\n * Provides a cache facility for HTTP requests with configurable persistence policy.\r\n */\r\n@Injectable()\r\nexport class HttpCacheService {\r\n  private cachedData: { [key: string]: HttpCacheEntry } = {};\r\n  private storage: Storage | null = null;\r\n\r\n  constructor() {\r\n    this.loadCacheData();\r\n  }\r\n\r\n  /**\r\n   * Sets the cache data for the specified request.\r\n   * @param url The request URL.\r\n   * @param data The received data.\r\n   * @param lastUpdated The cache last update, current date is used if not specified.\r\n   */\r\n  setCacheData(url: string, data: HttpResponse<any>, lastUpdated?: Date) {\r\n    this.cachedData[url] = {\r\n      lastUpdated: lastUpdated || new Date(),\r\n      data: data\r\n    };\r\n    log.debug(`Cache set for key: \"${url}\"`);\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Gets the cached data for the specified request.\r\n   * @param url The request URL.\r\n   * @return The cached data or null if no cached data exists for this request.\r\n   */\r\n  getCacheData(url: string): HttpResponse<any> | null {\r\n    const cacheEntry = this.cachedData[url];\r\n\r\n    if (cacheEntry) {\r\n      log.debug(`Cache hit for key: \"${url}\"`);\r\n      return cacheEntry.data;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gets the cached entry for the specified request.\r\n   * @param url The request URL.\r\n   * @return The cache entry or null if no cache entry exists for this request.\r\n   */\r\n  getHttpCacheEntry(url: string): HttpCacheEntry | null {\r\n    return this.cachedData[url] || null;\r\n  }\r\n\r\n  /**\r\n   * Clears the cached entry (if exists) for the specified request.\r\n   * @param url The request URL.\r\n   * @param matchAll Whether or not the url of the request should match completely. Defaults to `true`.\r\n   */\r\n  clearCache(url: string, matchAll=true): void {\r\n    this.cachedData = Object.entries(this.cachedData)\r\n      .filter(([cachedUrl]) => matchAll ? url === cachedUrl : cachedUrl.includes(url))\r\n      .reduce((cache, [cachedUrl, cachedData]) => ({...cache, [cachedUrl]: cachedData}), {})\r\n    log.debug(`Cache cleared for key: \"${url}\"`);\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Cleans cache entries older than the specified date.\r\n   * @param expirationDate The cache expiration date. If no date is specified, all cache is cleared.\r\n   */\r\n  cleanCache(expirationDate?: Date) {\r\n    if (expirationDate) {\r\n      each(this.cachedData, (value: HttpCacheEntry, key: string) => {\r\n        if (expirationDate >= value.lastUpdated) {\r\n          delete this.cachedData[key];\r\n        }\r\n      });\r\n    } else {\r\n      this.cachedData = {};\r\n    }\r\n    this.saveCacheData();\r\n  }\r\n\r\n  /**\r\n   * Sets the cache persistence policy.\r\n   * Note that changing the cache persistence will also clear the cache from its previous storage.\r\n   * @param persistence How the cache should be persisted, it can be either local or session storage, or if no value is\r\n   *   provided it will be only in-memory (default).\r\n   */\r\n  setPersistence(persistence?: 'local' | 'session') {\r\n    this.cleanCache();\r\n    this.storage =\r\n      persistence === 'local' || persistence === 'session'\r\n        ? window[persistence + 'Storage']\r\n        : null;\r\n    this.loadCacheData();\r\n  }\r\n\r\n  private saveCacheData() {\r\n    if (this.storage) {\r\n      this.storage[cachePersistenceKey] = JSON.stringify(this.cachedData);\r\n    }\r\n  }\r\n\r\n  private loadCacheData() {\r\n    const data = this.storage ? this.storage[cachePersistenceKey] : null;\r\n    this.cachedData = data ? JSON.parse(data) : {};\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface HttpConfig {\r\n  production?: boolean;\r\n}\r\n\r\nexport const HttpConfigService = new InjectionToken<HttpConfig>('HttpConfig');\r\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport {\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n  SkipSelf\r\n} from '@angular/core';\r\nimport { AuthorizationHeaderInterceptor } from './authorization-header.interceptor';\r\nimport { AuthorizationHeaderInterceptorFilter } from './authorization-header-filter.interceptor';\r\nimport { CacheInterceptor } from './cache.interceptor';\r\nimport { ErrorHandlerInterceptor } from './error-handler.interceptor';\r\nimport { HttpCacheService } from './http-cache.service';\r\nimport { HttpConfig, HttpConfigService } from './http-config.service';\r\nimport { HttpService } from './http.service';\r\nimport { IECacheHeaderInterceptor } from './ie-cache-header-interceptor';\r\n\r\n@NgModule({\r\n  imports: [HttpClientModule]\r\n})\r\nexport class HttpModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: HttpModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'HttpModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n\r\n  static forRoot(config: HttpConfig = {}): ModuleWithProviders<HttpModule> {\r\n    return {\r\n      ngModule: HttpModule,\r\n      providers: [\r\n        AuthorizationHeaderInterceptor,\r\n        CacheInterceptor,\r\n        ErrorHandlerInterceptor,\r\n        IECacheHeaderInterceptor,\r\n        HttpCacheService,\r\n        AuthorizationHeaderInterceptorFilter,\r\n        {\r\n          provide: HttpClient,\r\n          useClass: HttpService\r\n        },\r\n        {\r\n          provide: HttpConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {\r\n  HttpClient,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthorizationHeaderInterceptor } from './authorization-header.interceptor';\r\nimport { AuthorizationHeaderInterceptorFilter } from './authorization-header-filter.interceptor';\r\nimport { CacheInterceptor } from './cache.interceptor';\r\nimport { ErrorHandlerInterceptor } from './error-handler.interceptor';\r\nimport { IECacheHeaderInterceptor } from './ie-cache-header-interceptor';\r\n\r\n// HttpClient is declared in a re-exported module, so we have to extend the original module to make it work properly\r\n// (see https://github.com/Microsoft/TypeScript/issues/13897)\r\ndeclare module '@angular/common/http/' {\r\n  // Augment HttpClient with the added configuration methods from HttpService, to allow in-place replacement of\r\n  // HttpClient with HttpService using dependency injection\r\n  export interface HttpClient {\r\n    /**\r\n     * Enables caching for this request.\r\n     * @param forceUpdate Forces request to be made and updates cache entry.\r\n     * @return The new instance.\r\n     */\r\n    cache(forceUpdate?: boolean): HttpClient;\r\n\r\n    /**\r\n     * Skips default error handler for this request.\r\n     * @return The new instance.\r\n     */\r\n    skipErrorHandler(): HttpClient;\r\n\r\n    /**\r\n     * Append an authorization header to this request.\r\n     * @return The new instance.\r\n     */\r\n    authorize(): HttpClient;\r\n  }\r\n}\r\n\r\n// From @angular/common/http/src/interceptor: allows to chain interceptors\r\nclass HttpInterceptorHandler implements HttpHandler {\r\n  constructor(\r\n    private next: HttpHandler,\r\n    private interceptor: HttpInterceptor\r\n  ) {}\r\n\r\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\r\n    return this.interceptor.intercept(request, this.next);\r\n  }\r\n}\r\n\r\n/**\r\n * Allows to override default dynamic interceptors that can be disabled with the HttpService extension.\r\n * Except for very specific needs, you should better configure these interceptors directly in the constructor below\r\n * for better readability.\r\n *\r\n * For static interceptors that should always be enabled, use the standard HTTP_INTERCEPTORS token.\r\n */\r\nexport const HTTP_DYNAMIC_INTERCEPTORS = new InjectionToken<HttpInterceptor>(\r\n  'HTTP_DYNAMIC_INTERCEPTORS'\r\n);\r\n\r\n/**\r\n * Extends HttpClient with per request configuration using dynamic interceptors.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService extends HttpClient {\r\n  constructor(\r\n    private httpHandler: HttpHandler,\r\n    private injector: Injector,\r\n    @Optional()\r\n    @Inject(HTTP_DYNAMIC_INTERCEPTORS)\r\n    private interceptors: HttpInterceptor[] = []\r\n  ) {\r\n    super(httpHandler);\r\n\r\n    if (!this.interceptors) {\r\n      // Configure default interceptors that can be disabled here\r\n      this.interceptors = [\r\n        this.injector.get(ErrorHandlerInterceptor),\r\n        this.injector.get(IECacheHeaderInterceptor)\r\n      ];\r\n    }\r\n  }\r\n\r\n  authorize(): HttpClient {\r\n    const authHeaderInterceptor = this.injector.get(\r\n      AuthorizationHeaderInterceptor\r\n    );\r\n    return this.addInterceptor(authHeaderInterceptor);\r\n  }\r\n  authorizeFilter(): HttpClient {\r\n    const authHeaderInterceptor = this.injector.get(\r\n      AuthorizationHeaderInterceptorFilter\r\n    );\r\n\r\n    return this.addInterceptor(authHeaderInterceptor);\r\n  }\r\n\r\n  cache(forceUpdate?: boolean): HttpClient {\r\n    const cacheInterceptor = this.injector\r\n      .get(CacheInterceptor)\r\n      .configure({ update: forceUpdate });\r\n    return this.addInterceptor(cacheInterceptor);\r\n  }\r\n\r\n  skipErrorHandler(): HttpClient {\r\n    return this.removeInterceptor(ErrorHandlerInterceptor);\r\n  }\r\n\r\n  // Override the original method to wire interceptors when triggering the request.\r\n  request(method?: any, url?: any, options?: any): any {\r\n    const handler = this.interceptors.reduceRight(\r\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor),\r\n      this.httpHandler\r\n    );\r\n    return new HttpClient(handler).request(method, url, options);\r\n  }\r\n\r\n  private removeInterceptor(interceptorType: Function): HttpService {\r\n    return new HttpService(\r\n      this.httpHandler,\r\n      this.injector,\r\n      this.interceptors.filter(i => !(i instanceof interceptorType))\r\n    );\r\n  }\r\n\r\n  private addInterceptor(interceptor: HttpInterceptor): HttpService {\r\n    return new HttpService(\r\n      this.httpHandler,\r\n      this.injector,\r\n      this.interceptors.concat([interceptor])\r\n    );\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * Appends no-cache headers to the request.\r\n * This solves a problem particularly with Internet Explorer where REST API responses would be cached by the browser, showing outdated information in the app.\r\n */\r\n@Injectable()\r\nexport class IECacheHeaderInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (request.method === 'GET') {\r\n      const customRequest = request.clone({\r\n        headers: request.headers\r\n          .set('Cache-Control', 'no-cache')\r\n          .set('Pragma', 'no-cache')\r\n      });\r\n      return next.handle(customRequest);\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","export * from './lib/i18n.module';\nexport * from './lib/i18n.service';\nexport { I18nConfig } from './lib/i18n-config.service';\n","import { InjectionToken } from '@angular/core';\r\nimport { Dictionary } from 'lodash';\r\n\r\nexport interface LanguagesConfig {\r\n  [IETF_LANGUAGE_TAg: string]: Dictionary<string>;\r\n}\r\n\r\n/**\r\n * Configure the available languages by adding dictionaries containing translations, keyed by IETF language tag.\r\n */\r\nexport interface I18nConfig {\r\n  defaultLanguage: string;\r\n  languages: LanguagesConfig;\r\n}\r\n\r\nexport const I18nConfigService = new InjectionToken<I18nConfig>('I18nConfig');\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { I18nConfig, I18nConfigService } from './i18n-config.service';\r\nimport { I18nService } from './i18n.service';\r\n\r\n@NgModule({\r\n  imports: [TranslateModule.forRoot()],\r\n  exports: [TranslateModule]\r\n})\r\nexport class I18nModule {\r\n  constructor(\r\n    private readonly i18nService: I18nService,\r\n    @Optional() @SkipSelf() parentModule: I18nModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'I18nModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    this.i18nService.init();\r\n  }\r\n\r\n  static forRoot(config: I18nConfig): ModuleWithProviders<I18nModule> {\r\n    return {\r\n      ngModule: I18nModule,\r\n      providers: [\r\n        I18nService,\r\n        {\r\n          provide: I18nConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRouteSnapshot, Router, RoutesRecognized } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { includes } from 'lodash';\r\nimport { combineLatest, merge } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, pluck, shareReplay, switchMapTo } from 'rxjs/operators';\r\nimport { I18nConfig, I18nConfigService } from './i18n-config.service';\r\n\r\nconst log = new Logger('I18nService');\r\nconst languageKey = 'language';\r\n\r\n/**\r\n * Pass-through function to mark a string for translation extraction.\r\n * @param s The string to extract for translation.\r\n * @return The same string.\r\n */\r\nexport function extract(s: string) {\r\n  return s;\r\n}\r\n\r\nexport interface I18nStoreContext {\r\n  defaultLanguage?: string;\r\n  supportedLanguages?: string[];\r\n  userLanguage?: string;\r\n  currentLanguage?: string;\r\n}\r\n\r\n/**\r\n * Passes through all child nodes of the given `ActivatedRouteSnapshot` and returns the furthest page title found.\r\n * If no title is found, returns `undefined`.\r\n */\r\nfunction findTitle(activatedRoute: ActivatedRouteSnapshot): string {\r\n  let title: string;\r\n  if (activatedRoute.firstChild) {\r\n    title = findTitle(activatedRoute.firstChild);\r\n  }\r\n  if (!title) {\r\n    title = activatedRoute.data['title'];\r\n  }\r\n  return title;\r\n}\r\n\r\n@Injectable()\r\nexport class I18nService extends BasicStore<I18nStoreContext> {\r\n  defaultLanguage: string;\r\n\r\n  constructor(\r\n    private readonly router: Router,\r\n    private readonly titleService: Title,\r\n    private readonly translateService: TranslateService,\r\n    @Inject(I18nConfigService) config: I18nConfig,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: {\r\n        defaultLanguage: config.defaultLanguage,\r\n        supportedLanguages: Object.keys(config.languages),\r\n        userLanguage:\r\n          localStorage.getItem(languageKey) ||\r\n          translateService.getBrowserCultureLang()\r\n      },\r\n      name: 'I18nService',\r\n      storeService\r\n    });\r\n    Object.entries(config.languages).forEach(([lang, translations]) =>\r\n      this.setTranslation(lang, translations)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initializes i18n for the application.\r\n   * Loads language from local storage if present, or sets default language.\r\n   * @param defaultLanguage The default language to use.\r\n   * @param supportedLanguages The list of supported languages.\r\n   */\r\n  init() {\r\n    // Whenever the current language changes, update the store\r\n    this.translateService.onLangChange\r\n      .pipe(pluck('lang'))\r\n      .subscribe((lang: string) =>\r\n        this.update({\r\n          payload: { currentLanguage: lang },\r\n          description: 'Current language settings updated'\r\n        })\r\n      );\r\n\r\n    // Whenever new route data becomes available, look up the current page title\r\n    const pageTitle = this.router.events.pipe(\r\n      filter(data => data instanceof RoutesRecognized),\r\n      map((data: RoutesRecognized) => findTitle(data.state.root)),\r\n      distinctUntilChanged(),\r\n      shareReplay()\r\n    );\r\n\r\n    // Whenever the current language or the page title changes, update the page title\r\n    merge([this.translateService.onLangChange, pageTitle])\r\n      .pipe(switchMapTo(pageTitle))\r\n      .subscribe(title => {\r\n        if (title) {\r\n          this.titleService.setTitle(this.translateService.instant(title));\r\n        }\r\n      });\r\n\r\n    // Whenever the current language changes, cache it as the the user's preferred language in the localStorage\r\n    this.select('currentLanguage').subscribe(lang =>\r\n      localStorage.setItem(languageKey, lang)\r\n    );\r\n\r\n    // Whenever the user's language, supported languages, or default language update, update the `TranslateService` to use this language.\r\n    combineLatest([\r\n      this.select('userLanguage'),\r\n      this.select('supportedLanguages'),\r\n      this.select('defaultLanguage')\r\n    ])\r\n      .pipe(\r\n        map(([userLang, supportedLangs, defaultLang]) => {\r\n          let lang = userLang;\r\n          let isSupportedLanguage = includes(supportedLangs, lang);\r\n          // If no exact match is found, search without the region\r\n          if (userLang && !isSupportedLanguage) {\r\n            const noRegion = lang.split('-')[0];\r\n            lang =\r\n              supportedLangs.find(supportedLanguage =>\r\n                supportedLanguage.startsWith(noRegion)\r\n              ) || '';\r\n            isSupportedLanguage = Boolean(lang);\r\n          }\r\n          // Fallback if language is not supported\r\n          if (!isSupportedLanguage) {\r\n            lang = defaultLang;\r\n          }\r\n          return lang;\r\n        })\r\n      )\r\n      .subscribe(lang => {\r\n        log.debug(`Language set to ${lang}`);\r\n        this.translateService.use(lang);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sets the current language.\r\n   * Note: The current language is saved to the local storage.\r\n   * If no parameter is specified, the language is loaded from local storage (if present).\r\n   * @param language The IETF language code to set.\r\n   */\r\n  setLanguage(language: string) {\r\n    this.update({\r\n      payload: { userLanguage: language },\r\n      description: 'New preferred language selected'\r\n    });\r\n  }\r\n\r\n  /** Merges a set of translations with the current dictionary for the given language. */\r\n  setTranslation(\r\n    /** The IETF language code associated with the translations */\r\n    language: string,\r\n    /** The translations to merge with the current dictionary */\r\n    translations: Object\r\n  ) {\r\n    this.translateService.setTranslation(language, translations, true);\r\n  }\r\n}\r\n","export * from './lib/logger';\nexport { LoggerConfig } from './lib/logger-config.service';\nexport * from './lib/logger.module';\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface LoggerConfig {\r\n  readonly production?: boolean;\r\n}\r\n\r\nexport const LoggerConfigService = new InjectionToken<\r\n  LoggerConfig\r\n>('LoggerConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { Logger } from './logger';\r\nimport { LoggerConfig, LoggerConfigService } from './logger-config.service';\r\n\r\n@NgModule()\r\nexport class LoggerModule {\r\n  constructor(\r\n    @Optional() @Inject(LoggerConfigService) config: LoggerConfig = {},\r\n    @Optional() @SkipSelf() parentModule: LoggerModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'LoggerModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      Logger.enableProductionMode();\r\n    }\r\n  }\r\n  \r\n  static forRoot(config: LoggerConfig = {}): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        {\r\n          provide: LoggerConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Simple logger system with the possibility of registering custom outputs.\r\n *\r\n * 4 different log levels are provided, with corresponding methods:\r\n * - debug   : for debug information\r\n * - info    : for informative status of the application (success, ...)\r\n * - warning : for non-critical errors that do not prevent normal application behavior\r\n * - error   : for critical errors that prevent normal application behavior\r\n *\r\n * Example usage:\r\n * ```\r\n * import { Logger } from 'app/core/logger.service';\r\n *\r\n * const log = new Logger('myFile');\r\n * ...\r\n * log.debug('something happened');\r\n * ```\r\n *\r\n * To disable debug and info logs in production, add this snippet to your root module:\r\n * ```\r\n * @NgModule({\r\n *  imports: [\r\n *    LoggerModule.forRoot({ production: environment.production }),\r\n *    ...\r\n *  ]\r\n * })\r\n * export class AppModule {}\r\n *\r\n * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.\r\n */\r\n\r\n/**\r\n * The possible log levels.\r\n * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.\r\n */\r\nexport enum LogLevel {\r\n  Off = 0,\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug\r\n}\r\n\r\n/**\r\n * Log output handler function.\r\n */\r\nexport type LogOutput = (\r\n  source: string,\r\n  level: LogLevel,\r\n  ...objects: any[]\r\n) => void;\r\n\r\nexport class Logger {\r\n  /**\r\n   * Current logging level.\r\n   * Set it to LogLevel.Off to disable logs completely.\r\n   */\r\n  static level = LogLevel.Debug;\r\n\r\n  /**\r\n   * Enables production mode.\r\n   * Sets logging level to LogLevel.Warning.\r\n   */\r\n  static enableProductionMode() {\r\n    Logger.level = LogLevel.Warning;\r\n  }\r\n\r\n  constructor(private source?: string) {}\r\n\r\n  /**\r\n   * Logs messages or objects with the debug level.\r\n   * Works the same as console.log().\r\n   */\r\n  debug(...objects: any[]) {\r\n    this.log(console.log, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the error level.\r\n   * Works the same as console.log().\r\n   */\r\n  error(...objects: any[]) {\r\n    this.log(console.error, LogLevel.Error, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the info level.\r\n   * Works the same as console.log().\r\n   */\r\n  info(...objects: any[]) {\r\n    this.log(console.info, LogLevel.Info, objects);\r\n  }\r\n\r\n  /**\r\n   * Starts a timer with the given label. Outputs at the debug level.\r\n   * @param objects The label of the timer\r\n   */\r\n  time(...objects: any[]) {\r\n    this.log(console.time, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Ends the timer with the given label. Outputs at the debug level.\r\n   * @param objects The label of the timer\r\n   */\r\n  timeEnd(...objects: any[]) {\r\n    this.log(console.timeEnd, LogLevel.Debug, objects);\r\n  }\r\n\r\n  /**\r\n   * Logs messages or objects with the warning level.\r\n   * Works the same as console.log().\r\n   */\r\n  warn(...objects: any[]) {\r\n    this.log(console.warn, LogLevel.Warning, objects);\r\n  }\r\n\r\n  private log(func: Function, level: LogLevel, objects: any[]) {\r\n    if (level <= Logger.level) {\r\n      const messageContent = objects.join(', ');\r\n      const logMessage = this.source\r\n        ? `[${this.source}] ${messageContent}`\r\n        : messageContent;\r\n      func.call(console, logMessage);\r\n    }\r\n  }\r\n}\r\n","export { NotificationsConfig } from './lib/notifications-config.service';\nexport * from './lib/notifications.module';\nexport * from './lib/notifications.service';\n\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NotificationsConfig {\r\n  readonly badgePath?: string;\r\n  readonly iconPath?: string;\r\n}\r\n\r\nexport const NotificationsConfigService = new InjectionToken<\r\n  NotificationsConfig\r\n>('NotificationsConfig');\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NotificationsConfig, NotificationsConfigService } from './notifications-config.service';\n\n@NgModule()\nexport class NotificationsModule {\n  static forRoot(config: NotificationsConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: NotificationsModule,\n      providers: [\n        {\n          provide: NotificationsConfigService,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { now } from 'lodash';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { NotificationsConfig, NotificationsConfigService } from './notifications-config.service';\r\nimport { NotificationsModule } from './notifications.module';\r\n\r\nexport interface NotificationOptions {\r\n  /** Detailed message */\r\n  body?: string;\r\n  /** Whether or not to play a notification sound */\r\n  silent?: boolean;\r\n  /** Optional notification ID. Use this to group notifications. If not set, a random UUID is used. */\r\n  tag?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: NotificationsModule\r\n})\r\nexport class NotificationsService {\r\n  private serviceWorkerRegistration: ServiceWorkerRegistration;\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(NotificationsConfigService)\r\n    private config: NotificationsConfig = {}\r\n  ) {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        this.serviceWorkerRegistration = registration;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to show a notification to the user.\r\n   * Notifications are user opt-in based.\r\n   * The user will be prompted to grant permission if not already granted or denied.\r\n   * Prefers the service worker persistent notification interface, but falls back to browser notifications if the service worker is unavailable.\r\n   * Returns the tag of the notification.\r\n   */\r\n  async showNotification(\r\n    /** The notification message that will be shown to the user */\r\n    title: string,\r\n    /** Additional options */\r\n    options: NotificationOptions = {}\r\n  ): Promise<string | null> {\r\n    let result = null;\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      if (permission === 'granted') {\r\n        const config = Object.assign(\r\n          {\r\n            badge: this.config.badgePath,\r\n            icon: this.config.iconPath,\r\n            tag: result = uuid(),\r\n            timestamp: now()\r\n          },\r\n          options\r\n        );\r\n        result = config.tag;\r\n        if (this.serviceWorkerRegistration) {\r\n          this.serviceWorkerRegistration.showNotification(title, config);\r\n        } else {\r\n          new Notification(title, config);\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export * from './lib/branch-permission';\nexport * from './lib/feature';\nexport * from './lib/project-permission';\n\n","import { OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport abstract class AbstractPermissionDirective implements OnInit, OnDestroy {\r\n  /** Indicates the current user permission state */\r\n  protected readonly hasPermission$: Subject<boolean> = new BehaviorSubject(false);\r\n\r\n  /** Indicates whether or not the view has been created. Can also be false if previously created, but destroyed. */\r\n  protected hasView = false;\r\n\r\n  constructor(\r\n    protected readonly templateRef: TemplateRef<any>,\r\n    protected readonly viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Whenever the permission provider emits a new value, propagate the new permission state.\r\n    this.permissionProvider\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(this.hasPermission$);\r\n\r\n    //Whenever the permissions change, trigger the update of the view.\r\n    this.hasPermission$\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(hasPermission => this.handlePermissionChange(hasPermission));\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  /**\r\n   * Provides the permission state as an observable stream.\r\n   */\r\n  protected abstract get permissionProvider(): Observable<boolean>;\r\n\r\n  /**\r\n   * Updates the view based on the given permission state.\r\n   */\r\n  protected abstract handlePermissionChange(hasPermission: boolean): void;\r\n}\r\n","import { TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { BranchPermissionLevel } from '@models4insight/repository';\r\nimport { combineLatest, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\nexport abstract class AbstractBranchPermissionDirective extends AbstractPermissionDirective {\r\n  protected readonly level$: Subject<BranchPermissionLevel> = new ReplaySubject<\r\n    BranchPermissionLevel\r\n  >();\r\n\r\n  protected readonly branchName$: Subject<string> = new ReplaySubject<string>();\r\n\r\n  constructor(\r\n    protected readonly branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return combineLatest([this.branchName$, this.level$]).pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(([branchName, permissionLevel]) =>\r\n        this.branchPermissionService.checkPermission(\r\n          branchName,\r\n          permissionLevel\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { BranchPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractBranchPermissionDirective } from './abstract-branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-branch-permission, [models4insight-branch-permission]'\r\n})\r\nexport class BranchPermissionDirective extends AbstractBranchPermissionDirective {\r\n  constructor(\r\n    branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(branchPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-branch-permission')\r\n  set level(level: BranchPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  @Input('models4insight-branch-permissionBranch')\r\n  set branchName(branchName: string) {\r\n    this.branchName$.next(branchName);\r\n  }\r\n\r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { ProjectPermissionModule } from '../project-permission';\r\nimport { BranchPermissionDirective } from './branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\nimport { HasBranchPermissionDirective } from './has-branch-permission.directive';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule, ProjectPermissionModule],\r\n  declarations: [BranchPermissionDirective, HasBranchPermissionDirective],\r\n  exports: [BranchPermissionDirective, HasBranchPermissionDirective]\r\n})\r\nexport class BranchPermissionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BranchPermissionModule,\r\n      providers: [BranchPermissionService]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { BranchPermissionLevel, PermissionLevel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport { concatMap, map, switchMap, takeUntil, withLatestFrom } from 'rxjs/operators';\r\nimport { ProjectPermissionService } from '../project-permission';\r\n\r\nexport interface BranchPermissionStoreContext {\r\n  readonly permissions?: {\r\n    readonly [project: string]: {\r\n      readonly [branch: string]: BranchPermissionLevel;\r\n    };\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class BranchPermissionService extends BasicStore<\r\n  BranchPermissionStoreContext\r\n> {\r\n  private readonly checkPermission$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    private readonly projectPermissionService: ProjectPermissionService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'BranchPermissionService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Handles control flow to prevent flooding the rest api with requests for the same project.\r\n    // After the first request is made for any combination of project ID and branch name, any further requests can be served from the store.\r\n    this.checkPermission$\r\n      .pipe(\r\n        withLatestFrom(this.projectService.select('projectId')),\r\n        concatMap(([branchName, projectId]) =>\r\n          // This manages control flow for updates on the store to ensure there are no excess updates due to triggers in quick succession\r\n          of(1).pipe(\r\n            switchMap(() => this.handleCheckPermission(projectId, branchName)),\r\n            takeUntil(this.select(['permissions', projectId, branchName]))\r\n          )\r\n        )\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not the current user meets the required permission level for the branch of the given project. The owner of a project always has the required permissions.\r\n   * @param project the project to check permission for\r\n   * @param branchName the branch to check permission for\r\n   * @param requiredPermissionLevel the minimum permission level required\r\n   */\r\n  checkPermission(\r\n    branchName: string,\r\n    requiredPermissionLevel: BranchPermissionLevel\r\n  ): Observable<boolean> {\r\n    this.checkPermission$.next(branchName);\r\n\r\n    const branchPermissionLevel = this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select(['permissions', projectId, branchName])\r\n        )\r\n      );\r\n\r\n    const isOwner = this.projectPermissionService.checkPermission(\r\n      PermissionLevel.OWNER\r\n    );\r\n\r\n    return combineLatest([branchPermissionLevel, isOwner]).pipe(\r\n      map(([branchPermissionLevel, isOwner]) => branchPermissionLevel <= requiredPermissionLevel || isOwner)\r\n    );\r\n  }\r\n\r\n  private async handleCheckPermission(projectId: string, branchName: string) {\r\n    // Placeholder while rest api function is still unavailable.\r\n    this.update({\r\n      description: `Permission level updated for branch ${branchName} of project ${projectId}`,\r\n      path: ['permissions', projectId, branchName],\r\n      payload: PermissionLevel.OWNER\r\n    });\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Project, BranchPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractBranchPermissionDirective } from './abstract-branch-permission.directive';\r\nimport { BranchPermissionService } from './branch-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-has-branch-permission, [models4insight-has-branch-permission]'\r\n})\r\nexport class HasBranchPermissionDirective extends AbstractBranchPermissionDirective {\r\n  private context: { hasPermission: boolean } = { hasPermission: false };\r\n\r\n  constructor(\r\n    branchPermissionService: BranchPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(branchPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-has-branch-permission')\r\n  set level(level: BranchPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n  \r\n  @Input('models4insight-has-branch-permissionBranch')\r\n  set branchName(branchName: string) {\r\n    this.branchName$.next(branchName);\r\n  }\r\n\r\n  /**\r\n   * Updates the context of the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (!this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef, this.context);\r\n      this.hasView = true;\r\n    }\r\n    this.context.hasPermission = hasPermission;\r\n  }\r\n}\r\n","export * from './branch-permission.directive';\r\nexport * from './branch-permission.module';\r\nexport * from './branch-permission.service';\r\nexport * from './has-branch-permission.directive';\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { Feature, FeatureService } from './feature.service';\r\n\r\n@Directive({\r\n  selector: 'models4insight-feature, [models4insight-feature]'\r\n})\r\nexport class FeatureDirective extends AbstractPermissionDirective {\r\n  private subscription$: Subject<Feature> = new ReplaySubject<Feature>();\r\n\r\n  constructor(\r\n    private readonly featureService: FeatureService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-feature')\r\n  set subscription(value: Feature) {\r\n    this.subscription$.next(value);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return this.subscription$.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(subscription =>\r\n        this.featureService.checkPermission(subscription)\r\n      )\r\n    );\r\n  } \r\n  \r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { FeatureDirective } from './feature.directive';\r\nimport { FeatureService } from './feature.service';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule],\r\n  declarations: [FeatureDirective],\r\n  providers: [FeatureService],\r\n  exports: [FeatureDirective]\r\n})\r\nexport class FeatureModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\n\r\nexport interface FeatureStoreContext {\r\n  readonly subscription?: {\r\n    readonly [featureName: string]: boolean;\r\n  };\r\n}\r\n\r\nexport enum Feature {\r\n  ANALYTICS_ACCESS = 'analytics_access',\r\n  DATA2MODEL_ACCESS = 'data2model_access',\r\n  DATA2MODEL_BRANCH_CREATE = 'data2model_branch_create',\r\n  DATA2MODEL_MODEL_SAVE = 'data2model_model_save',\r\n  DATA2MODEL_RULES_EDIT = 'data2model_rules_edit',\r\n  DATA2MODEL_RULES_SAVE = 'data2model_rules_save',\r\n  DATA2MODEL_SUGGESTIONS = 'data2model_suggestions',\r\n  PLATFORM_ACCESS = 'platform_access',\r\n  PLATFORM_BRANCH_ACCESS_RIGHTS = 'platform_branch_access_rights',\r\n  PLATFORM_BRANCH_CREATE = 'platform_branch_create',\r\n  PLATFORM_BRANCH_MERGE = 'platform_branch_merge',\r\n  PLATFORM_MODEL_EXPLORE = 'platform_model_explore',\r\n  PLATFORM_MODEL_RETRIEVE = 'platform_model_retrieve',\r\n  PLATFORM_MODEL_UPLOAD = 'platform_model_upload',\r\n  PLATFORM_PROJECT_COLLABORATE = 'platform_project_collaborate',\r\n  PLATFORM_PROJECT_CONTINUE_WORKING = 'platform_project_continue_working',\r\n  PLATFORM_PROJECT_CREATE = 'platform_project_create',\r\n  PLATFORM_PROJECT_HOME = 'platform_project_home',\r\n  PLATFORM_USER_GROUPS_CREATE = 'platform_user_groups_create'\r\n}\r\n\r\n@Injectable()\r\nexport class FeatureService extends BasicStore<FeatureStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({ name: 'FeatureService', storeService });\r\n  }\r\n\r\n  /**\r\n   * Checks with the backend whether or not the current user can access the feature with the given name and updates the store accordingly.\r\n   */\r\n  checkPermission(feature: Feature) {\r\n    // This is a placeholder while the backend function is not yet available\r\n    this.update({\r\n      description: `Subscription updated for feature ${feature}`,\r\n      path: ['subscription', feature],\r\n      payload: true\r\n    });\r\n\r\n    return this.select(['subscription', feature]);\r\n  }\r\n}\r\n","export * from './feature.module';\r\nexport * from './feature.directive';\r\nexport * from './feature.service';","import { AbstractPermissionDirective } from '../abstract-permission.directive';\r\nimport { Observable, combineLatest, Subject, ReplaySubject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\r\nimport { Project, ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nexport abstract class AbstractProjectPermissionDirective extends AbstractPermissionDirective {\r\n  protected readonly level$: Subject<\r\n    ProjectPermissionLevel\r\n  > = new ReplaySubject<ProjectPermissionLevel>();\r\n\r\n  constructor(\r\n    protected readonly projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(templateRef, viewContainer);\r\n  }\r\n\r\n  get permissionProvider(): Observable<boolean> {\r\n    return this.level$.pipe(\r\n      switchMap(permissionLevel =>\r\n        this.projectPermissionService.checkPermission(permissionLevel)\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractProjectPermissionDirective } from './abstract-project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-has-project-permission, [models4insight-has-project-permission]'\r\n})\r\nexport class HasProjectPermissionDirective extends AbstractProjectPermissionDirective {\r\n  private context: { hasPermission: boolean } = { hasPermission: false };\r\n\r\n  constructor(\r\n    projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(projectPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-has-project-permission')\r\n  set level(level: ProjectPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  /**\r\n   * Updates the context of the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (!this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef, this.context);\r\n      this.hasView = true;\r\n    }\r\n    this.context.hasPermission = hasPermission;\r\n  }\r\n}\r\n","export * from './project-permission.directive';\r\nexport * from './project-permission.module';\r\nexport * from './project-permission.service';\r\nexport * from './has-project-permission.directive'\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { AbstractProjectPermissionDirective } from './abstract-project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@Directive({\r\n  selector:\r\n    'models4insight-project-permission, [models4insight-project-permission]'\r\n})\r\nexport class ProjectPermissionDirective extends AbstractProjectPermissionDirective {\r\n  \r\n  constructor(\r\n    projectPermissionService: ProjectPermissionService,\r\n    templateRef: TemplateRef<any>,\r\n    viewContainer: ViewContainerRef\r\n  ) {\r\n    super(projectPermissionService, templateRef, viewContainer);\r\n  }\r\n\r\n  @Input('models4insight-project-permission')\r\n  set level(level: ProjectPermissionLevel) {\r\n    this.level$.next(level);\r\n  }\r\n\r\n  /**\r\n   * Creates or destroys the view based on the given permission state.\r\n   */\r\n  protected handlePermissionChange(hasPermission: boolean) {\r\n    if (hasPermission && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!hasPermission && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n \r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RepositoryModule } from '@models4insight/repository';\r\nimport { HasProjectPermissionDirective } from './has-project-permission.directive';\r\nimport { ProjectPermissionDirective } from './project-permission.directive';\r\nimport { ProjectPermissionService } from './project-permission.service';\r\n\r\n@NgModule({\r\n  imports: [RepositoryModule],\r\n  declarations: [\r\n    ProjectPermissionDirective,\r\n    HasProjectPermissionDirective,\r\n  ],\r\n  exports: [ProjectPermissionDirective, HasProjectPermissionDirective]\r\n})\r\nexport class ProjectPermissionModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ProjectPermissionModule,\r\n      providers: [ProjectPermissionService]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { getUserRole, ProjectPermissionLevel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { Observable, of } from 'rxjs';\r\nimport { concatMap, distinctUntilKeyChanged, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nexport interface ProjectPermissionStoreContext {\r\n  readonly permissions?: {\r\n    readonly [projectId: string]: ProjectPermissionLevel;\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class ProjectPermissionService extends BasicStore<\r\n  ProjectPermissionStoreContext\r\n> {\r\n  constructor(\r\n    private projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ProjectPermissionService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Handles control flow to prevent flooding the rest api with requests for the same project.\r\n    // After the first request is made for any project ID, any further requests can be served from the store.\r\n    this.projectService\r\n      .selectCurrentProject()\r\n      .pipe(\r\n        distinctUntilKeyChanged('id'),\r\n        concatMap(({ project }) =>\r\n          // This manages control flow for updates on the store to ensure there are no excess updates due to triggers in quick succession\r\n          of(1).pipe(\r\n            switchMap(() => this.handleCheckPermissions(project)),\r\n            takeUntil(this.select(['permissions', project]))\r\n          )\r\n        )\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable`stream of whether or not the current user meets the given minimum required permission level for the current project.\r\n   * @param requiredPermissionLevel The minimum permission level required.\r\n   */\r\n  checkPermission(\r\n    requiredPermissionLevel: ProjectPermissionLevel\r\n  ): Observable<boolean> {\r\n    return this.projectService.selectCurrentProject().pipe(\r\n      switchMap(({ project }) => this.select(['permissions', project])),\r\n      map(permissionLevel => permissionLevel <= requiredPermissionLevel)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the current huser meets the given minimum required permission level for the current project\r\n   * @param requiredPermissionLevel The minimum permission level required.\r\n   */\r\n  async hasPermission(requiredPermissionLevel: ProjectPermissionLevel) {\r\n    const { project } = await this.projectService.getCurrentProject(),\r\n      permissionLevel = await this.get(['permissions', project]);\r\n\r\n    return permissionLevel <= requiredPermissionLevel;\r\n  }\r\n\r\n  private async handleCheckPermissions(projectName: string) {\r\n    const { role_id } = await getUserRole(projectName, {\r\n      forceUpdate: true\r\n    }).toPromise();\r\n\r\n    this.update({\r\n      description: `Permission level updated for project ${projectName}`,\r\n      path: ['permissions', projectName],\r\n      payload: role_id\r\n    });\r\n  }\r\n}\r\n","export * from './lib/action';\r\nexport * from './lib/basic-store';\r\nexport { ReduxConfig } from './lib/redux-config.service';\r\nexport * from './lib/redux.module';\r\nexport * from './lib/store';\r\nexport * from './lib/store.service';\r\n\r\n","import { OnDestroy } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { SubType, untilDestroyed } from '@models4insight/utils';\r\nimport { cloneDeep, Dictionary, differenceWith, isEqual } from 'lodash';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, first, map, pairwise, pluck, scan } from 'rxjs/operators';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Action, ActionType, ResetAction } from './action';\r\nimport { Store, StoreContext } from './store';\r\nimport { StoreService } from './store.service';\r\n\r\nconst win = window as any;\r\n\r\nexport interface AbstractStoreOptions<CONTEXT> {\r\n  /**\r\n   * The initial state of this store. Can be restored by calling `reset()`.\r\n   */\r\n  defaultState?: CONTEXT;\r\n  /**\r\n   * The name of this store. Used to tag debug output and as a key in the `StoreService` snapshot. The store name should be unique across all stores.\r\n   * It is recommended to choose a recognizable, human readable name for a store.\r\n   * If no name is given, a UUID is assigned instead.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Reducers for this store keyed by action type\r\n   */\r\n  rootReducers?: Dictionary<RootReducer>;\r\n  /**\r\n   * Pass a reference to the `StoreService` if you want this store to be registered for snapshotting\r\n   */\r\n  storeService?: StoreService;\r\n}\r\n\r\nexport type RootReducer<CONTEXT extends StoreContext = StoreContext> = (\r\n  state: CONTEXT,\r\n  action: Action<CONTEXT>\r\n) => CONTEXT;\r\n\r\nexport const abstractStoreDefaultState: StoreContext = {};\r\n\r\n/**\r\n * An abstract base store which provides some shared functionality\r\n */\r\nexport abstract class AbstractStore<\r\n  CONTEXT extends StoreContext,\r\n  ACTION extends Action<CONTEXT> = Action<CONTEXT>\r\n> implements OnDestroy, Store<CONTEXT> {\r\n  /**\r\n   * Whether or not the Store is running in production mode\r\n   */\r\n  public static production = false;\r\n\r\n  /**\r\n   * The current session ID shared across all stores for debugging and telemetry\r\n   */\r\n  private static readonly sessionId = uuid();\r\n\r\n  /**\r\n   * The display name of the store\r\n   */\r\n  public readonly name: string;\r\n\r\n  /**\r\n   * The initial state of the store\r\n   */\r\n  protected readonly defaultState: CONTEXT;\r\n\r\n  /**\r\n   * Instance of the logger for this store\r\n   */\r\n  protected readonly logger: Logger;\r\n\r\n  private readonly actions$ = new Subject<ACTION | ResetAction>();\r\n  private readonly state$: BehaviorSubject<CONTEXT>;\r\n\r\n  private readonly rootReducers: Dictionary<RootReducer> = {};\r\n\r\n  constructor({\r\n    storeService,\r\n    name = uuid(),\r\n    rootReducers = {},\r\n    defaultState = abstractStoreDefaultState as CONTEXT\r\n  }: AbstractStoreOptions<CONTEXT> = {}) {\r\n    // Set the default state of the store as a clone of the given default state in case the default state is shared between several stores\r\n    this.defaultState = cloneDeep(defaultState);\r\n\r\n    // Initialize the state with the given default state\r\n    this.state$ = new BehaviorSubject<CONTEXT>(this.defaultState);\r\n\r\n    // Add the reset operation to the given set of reducers\r\n    this.rootReducers = {\r\n      ...rootReducers,\r\n      [ActionType.RESET]: () => this.reduceReset()\r\n    };\r\n\r\n    // If no store name is given, a UUID is used instead\r\n    this.name = name;\r\n\r\n    // Initialize the logger with either the store name or the UUID.\r\n    this.logger = new Logger(this.name);\r\n\r\n    // Register this store with the parent service if a reference is given. This is used for error reporting.\r\n    if (storeService) {\r\n      storeService.register(this);\r\n    }\r\n\r\n    // Start up the reducer that maintains the state\r\n    this.actions$\r\n      .pipe(this.reducer(), untilDestroyed(this))\r\n      .subscribe(this.state$);\r\n  }\r\n\r\n  /**\r\n   * Enables production mode.\r\n   * Disables emissions to Redux DevTools\r\n   */\r\n  static enableProductionMode() {\r\n    AbstractStore.production = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.actions$.complete();\r\n    this.state$.complete();\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current state at the given path\r\n   * @param path the path of the state to return\r\n   */\r\n  get<P extends keyof CONTEXT>(\r\n    path: P | [P],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P]>;\r\n  get<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(\r\n    path: [P, Q],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(\r\n    path: [P, Q, R],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(\r\n    path: [P, Q, R, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R][S]>;\r\n  get<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R],\r\n    T extends keyof CONTEXT[P][Q][R][S]\r\n  >(\r\n    path: [P, Q, R, S, T],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Promise<CONTEXT[P][Q][R][S][T]>;\r\n  get(path: any, options: { includeFalsy?: boolean } = {}): Promise<any> {\r\n    return this.select(path, options)\r\n      .pipe(first())\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Returns the store to its default state\r\n   */\r\n  reset() {\r\n    this.dispatch({\r\n      type: ActionType.RESET,\r\n      description: 'Return to default state'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the state at the given path\r\n   * @param path the path of the state to observe\r\n   * @param options includeFalsy - whether to include values that are falsy (e.g. undefined, null, NaN)\r\n   */\r\n  select<P extends keyof CONTEXT>(\r\n    path: P | [P],\r\n    options?: {\r\n      /** Whether or not to include values that are falsy (e.g. undefined, null, NaN) */\r\n      includeFalsy?: boolean;\r\n    }\r\n  ): Observable<CONTEXT[P]>;\r\n  select<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(\r\n    path: [P, Q],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(\r\n    path: [P, Q, R],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(\r\n    path: [P, Q, R, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R][S]>;\r\n  select<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R],\r\n    T extends keyof CONTEXT[P][Q][R][S]\r\n  >(\r\n    path: [P, Q, R, S, T],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<CONTEXT[P][Q][R][S][T]>;\r\n  select(\r\n    path: string | (string | number)[],\r\n    options: { includeFalsy?: boolean } = {}\r\n  ): Observable<any> {\r\n    let result: Observable<any>;\r\n    if (Array.isArray(path)) {\r\n      // Pluck does not have an overload for an array that combines strings an numbers, but the function does actually support it.\r\n      result = this.state$.pipe(pluck(...(path as any[])));\r\n    } else {\r\n      result = this.state$.pipe(pluck(path));\r\n    }\r\n    return result.pipe(\r\n      distinctUntilChanged(isEqual),\r\n      filter(\r\n        value =>\r\n          (value !== undefined && value !== null && !Number.isNaN(value)) ||\r\n          (options.includeFalsy && !value)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Observes the collection at the given `path`.\r\n   * Emits an event whenever new children are added to the collection, and/or existing children are changed.\r\n   * The collection can be either an `object` or an `array`.\r\n   * Emits an `array` of all new and changed children.\r\n   * Does not detect deletions.\r\n   *\r\n   * @param path the path of the state to observe\r\n   */\r\n  watch<\r\n    S extends keyof SubType<CONTEXT, Dictionary<any>>,\r\n    T extends CONTEXT[S]\r\n  >(\r\n    path: S | [S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    S extends keyof SubType<CONTEXT[M], Dictionary<any>>,\r\n    T extends CONTEXT[M][S]\r\n  >(\r\n    path: [M, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    S extends keyof SubType<CONTEXT[M][N], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][S]\r\n  >(\r\n    path: [M, N, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    O extends keyof CONTEXT[M][N],\r\n    S extends keyof SubType<CONTEXT[M][N][O], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][O][S]\r\n  >(\r\n    path: [M, N, O, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch<\r\n    M extends keyof CONTEXT,\r\n    N extends keyof CONTEXT[M],\r\n    O extends keyof CONTEXT[M][N],\r\n    P extends keyof CONTEXT[M][N][O],\r\n    S extends keyof SubType<CONTEXT[M][N][O][P], Dictionary<any>>,\r\n    T extends CONTEXT[M][N][O][P][S]\r\n  >(\r\n    path: [M, N, O, P, S],\r\n    options?: { includeFalsy?: boolean }\r\n  ): Observable<T extends any[] ? T : T[keyof T][]>;\r\n  watch(path: any, options: { includeFalsy?: boolean } = {}): Observable<any> {\r\n    return this.select(path, options).pipe(\r\n      map(state => (Array.isArray(state) ? state : Object.values(state ?? {}))),\r\n      pairwise(),\r\n      map(([old, current]) =>\r\n        old ? differenceWith(current, old, isEqual) : current\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the complete state\r\n   */\r\n  get state(): Observable<CONTEXT> {\r\n    return this.state$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns the current state\r\n   */\r\n  get value(): CONTEXT {\r\n    return this.state$.getValue();\r\n  }\r\n\r\n  /**\r\n   * Dispatch an operation that manipulates the state\r\n   * @param action The operation to dispatch\r\n   */\r\n  protected dispatch(action: ACTION | ResetAction): void {\r\n    this.actions$.next(action);\r\n  }\r\n\r\n  /**\r\n   * Apply the given action to the given state, resulting in a new state object that reflects the result of the operation.\r\n   * @param state the current state\r\n   * @param action the operation to apply\r\n   */\r\n  private reducer() {\r\n    return scan((state: CONTEXT, action: ACTION | ResetAction) => {\r\n      const next = this.reduceAction(state, action);\r\n      if (!AbstractStore.production) {\r\n        // Construct a debug message representing the current action\r\n        const logMessage = action.description\r\n          ? `${action.type}: ${action.description}`\r\n          : action.type;\r\n\r\n        // Log the debug message to the console\r\n        this.logger.debug(logMessage);\r\n\r\n        // If the user has Redux devtools enabled, also log the action there\r\n        if (win.devTools) {\r\n          win.devTools.send(`[${this.name}] ${logMessage}`, next);\r\n        }\r\n      }\r\n      return next;\r\n    }, this.state$.value);\r\n  }\r\n\r\n  private reduceAction(\r\n    state: CONTEXT,\r\n    action: Action<CONTEXT> | ResetAction\r\n  ): CONTEXT {\r\n    const rootReducer = this.rootReducers[action.type];\r\n    return rootReducer ? (rootReducer(state, action) as CONTEXT) : state;\r\n  }\r\n\r\n  private reduceReset() {\r\n    return this.defaultState;\r\n  }\r\n}\r\n","export enum ActionType {\r\n  RESET = 'RESET',\r\n  SET = 'SET',\r\n  UPDATE = 'UPDATE',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\nexport interface SetAction<T> {\r\n  type: ActionType.SET;\r\n  description: string;\r\n  payload: T;\r\n}\r\n\r\nexport interface UpdateAction<T> {\r\n  type: ActionType.UPDATE;\r\n  description: string;\r\n  path: (string | number)[];\r\n  payload: T;\r\n}\r\n\r\nexport interface DeleteAction {\r\n  type: ActionType.DELETE;\r\n  description: string;\r\n  path: (string | number)[];\r\n}\r\n\r\nexport interface ResetAction {\r\n  type: ActionType.RESET;\r\n  description: string;\r\n}\r\n\r\n// You can extend Action by piping in additional types, e.g:\r\n// export type ExtendedAction<T> = Action<T> | MyAction<T>\r\nexport type Action<T> = SetAction<T> | UpdateAction<T> | DeleteAction | ResetAction;\r\n","import { SubType } from '@models4insight/utils';\r\nimport { clone, get, omit, setWith } from 'lodash';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { finalize, switchMapTo, tap } from 'rxjs/operators';\r\nimport { AbstractStore, AbstractStoreOptions, RootReducer } from './abstract-store';\r\nimport { Action, ActionType, DeleteAction, SetAction, UpdateAction } from './action';\r\nimport { StoreContext } from './store';\r\n\r\n/**\r\n * Returns a new instance of the given `state` which omits the entry at the given `path`.\r\n * If no `path` is given, or if the given `path` is empty, returns an empty `state`.\r\n */\r\nexport function reduceDelete<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { path }: DeleteAction\r\n): CONTEXT {\r\n  return !path || path.length === 0\r\n    ? ({} as CONTEXT)\r\n    : path.length === 1\r\n    ? (omit(state, path) as CONTEXT)\r\n    : setWith(\r\n        clone(state),\r\n        path.slice(0, path.length - 1),\r\n        omit(get(state, path.slice(0, path.length - 1)), path[path.length - 1]),\r\n        clone\r\n      );\r\n}\r\n\r\n/**\r\n * Returns a new instance of the given `payload`, replacing the given `state`.\r\n */\r\nexport function reduceSet<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { payload }: SetAction<CONTEXT>\r\n): CONTEXT {\r\n  return clone(payload);\r\n}\r\n\r\n/**\r\n * Returns a new instance of the given `state` where any entry at the given `path` has been replaced with the given `payload`.\r\n * If no `path` is given, or if the given `path` is empty, the given `payload` is assigned to the given `state`.\r\n */\r\nexport function reduceUpdate<CONTEXT extends StoreContext = StoreContext>(\r\n  state: CONTEXT,\r\n  { path, payload }: UpdateAction<CONTEXT>\r\n): CONTEXT {\r\n  return !path || path.length === 0\r\n    ? Object.assign(state, clone(payload))\r\n    : // Make a clone of the current state and the payload to ensure the state is never modified in place\r\n      setWith(clone(state), path, payload, clone);\r\n}\r\n\r\nconst rootReducers: { [type in ActionType]?: RootReducer } = {\r\n  [ActionType.SET]: reduceSet,\r\n  [ActionType.UPDATE]: reduceUpdate,\r\n  [ActionType.DELETE]: reduceDelete\r\n};\r\n\r\nexport interface MonitorAsyncOptions {\r\n  /** Subject to push an event to when the operation finishes */\r\n  onComplete?: Subject<void>;\r\n  /**Reference to the store which defines the given indicator property */\r\n  store?: BasicStore<any>;\r\n}\r\n\r\n/**\r\n * Decorator function which wraps a reducer to switch the given property of a `BasicStore` to `true` when the reducer starts, and `false` after it has completed.\r\n *\r\n * You can use this decorator inside of a `BasicStore` without providing the `store` parameter.\r\n * When using this decorator outside of a `BasicStore`, please provide a reference to the `BasicStore` which defines the given indicator property.\r\n */\r\nexport function MonitorAsync<T extends (...args: any[]) => Promise<any>>(\r\n  /* Key or path to the property of the `BasicStore` which indicates the state of the operation */\r\n  indicatorProperty: string | string[],\r\n  /* Reference to the store which defines the given indicator property */\r\n  options?: MonitorAsyncOptions\r\n);\r\nexport function MonitorAsync<T extends (...args: any[]) => Observable<any>>(\r\n  /* Key or path to the property of the BasicStore which indicates the state of the operation */\r\n  indicatorProperty: string | string[],\r\n  options?: MonitorAsyncOptions\r\n);\r\nexport function MonitorAsync<\r\n  T extends (...args: any[]) => Promise<any> | Observable<any>\r\n>(\r\n  indicatorProperty: string | string[],\r\n  { onComplete, store }: MonitorAsyncOptions = {}\r\n) {\r\n  return function(\r\n    target: BasicStore<any>,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<T>\r\n  ) {\r\n    const original = descriptor.value;\r\n    descriptor.value = function(this: Function, ...args: any[]) {\r\n      const originalResult = original.apply(this, args);\r\n      return (store ?? target).monitorAsync.apply(this, [\r\n        originalResult,\r\n        indicatorProperty,\r\n        onComplete\r\n      ]);\r\n    } as any;\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * This is an implementation of a store supporting basic CRUD operations.\r\n */\r\nexport abstract class BasicStore<\r\n  CONTEXT extends StoreContext = {}\r\n> extends AbstractStore<CONTEXT, Action<CONTEXT>> {\r\n  constructor(options: AbstractStoreOptions<CONTEXT> = {}) {\r\n    super({\r\n      ...options,\r\n      rootReducers: { ...options.rootReducers, ...rootReducers }\r\n    });\r\n  }\r\n  /**\r\n   * Dispatch a delete operation, removing an entry in the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {String} options.path           The path of the entry to update\r\n   */\r\n  delete(options?: { description?: string; path?: [] }): void;\r\n  delete<P extends keyof CONTEXT>(options?: {\r\n    description?: string;\r\n    path?: [P];\r\n  }): void;\r\n  delete<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(options?: {\r\n    description?: string;\r\n    path?: [P, Q];\r\n  }): void;\r\n  delete<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(options?: { description?: string; path?: [P, Q, R] }): void;\r\n  delete<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(options?: { description?: string; path?: [P, Q, R, S] }): void;\r\n  delete(\r\n    options: { description?: string; path?: (string | number)[] } = {}\r\n  ): void {\r\n    this.dispatch({\r\n      type: ActionType.DELETE,\r\n      description: options.description,\r\n      path: options.path\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wraps a reducer in an asynchronous operation to switch the given indicator property to true when it starts running, and false after it has completed..\r\n   * @param {Observable<T>} operation         The operation to be run\r\n   * @param {keyof CONTEXT} indicatorProperty The key or path of the property with which to indicate the process of the operation. The given key should map to a boolean type.\r\n   */\r\n  monitorAsync<K extends keyof SubType<CONTEXT, boolean>, P, R>(\r\n    operation: Observable<R>,\r\n    indicatorProperty: K,\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    K extends keyof SubType<CONTEXT[L], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    K extends keyof SubType<CONTEXT[L][M], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    N extends keyof CONTEXT[L][M],\r\n    K extends keyof SubType<CONTEXT[L][M][N], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, N, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<\r\n    L extends keyof CONTEXT,\r\n    M extends keyof CONTEXT[L],\r\n    N extends keyof CONTEXT[L][M],\r\n    O extends keyof CONTEXT[L][M][N],\r\n    K extends keyof SubType<CONTEXT[L][M][N][O], boolean>,\r\n    R\r\n  >(\r\n    operation: Observable<R>,\r\n    indicatorProperty: [L, M, N, O, K],\r\n    onComplete?: Subject<void>\r\n  ): Observable<R>;\r\n  monitorAsync<R>(\r\n    operation: Observable<R>,\r\n    indicatorProperty: any,\r\n    onComplete?: Subject<void>\r\n  ): Observable<R> {\r\n    if (!Array.isArray(indicatorProperty)) {\r\n      indicatorProperty = [indicatorProperty];\r\n    }\r\n    const setIndicatorState = (state: boolean) =>\r\n      this.update({\r\n        description: `Set ${indicatorProperty} to ${Boolean(state)\r\n          .toString()\r\n          .toUpperCase()}`,\r\n        path: indicatorProperty,\r\n        payload: state\r\n      } as any);\r\n\r\n    return of(1).pipe(\r\n      tap(() => setIndicatorState(true)),\r\n      switchMapTo(operation),\r\n      finalize(() => {\r\n        setIndicatorState(false);\r\n        onComplete?.next();\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Dispatch a set operation, replacing the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {any} options.payload           The new state\r\n   */\r\n  set(options: { description?: string; payload?: CONTEXT } = {}): void {\r\n    this.dispatch({\r\n      type: ActionType.SET,\r\n      description: options.description,\r\n      payload: options.payload\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dispatch an update operation, modifying the current state\r\n   * @param {Object} options\r\n   * @param {String} options.description    A short explanation of the update\r\n   * @param {String} options.path           The path of the entry to update\r\n   * @param {any} options.payload           The new state\r\n   */\r\n  update(options?: {\r\n    description?: string;\r\n    path?: [];\r\n    payload?: CONTEXT;\r\n  }): void;\r\n  update<P extends keyof CONTEXT>(options?: {\r\n    description?: string;\r\n    path?: [P];\r\n    payload?: CONTEXT[P];\r\n  }): void;\r\n  update<P extends keyof CONTEXT, Q extends keyof CONTEXT[P]>(options?: {\r\n    description?: string;\r\n    path?: [P, Q];\r\n    payload?: CONTEXT[P][Q];\r\n  }): void;\r\n  update<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q]\r\n  >(options?: {\r\n    description?: string;\r\n    path?: [P, Q, R];\r\n    payload?: CONTEXT[P][Q][R];\r\n  }): void;\r\n  update<\r\n    P extends keyof CONTEXT,\r\n    Q extends keyof CONTEXT[P],\r\n    R extends keyof CONTEXT[P][Q],\r\n    S extends keyof CONTEXT[P][Q][R]\r\n  >(options?: {\r\n    description?: string;\r\n    path?: [P, Q, R, S];\r\n    payload?: CONTEXT[P][Q][R][S];\r\n  }): void;\r\n  update(\r\n    options: {\r\n      description?: string;\r\n      path?: (string | number)[];\r\n      payload?: any;\r\n    } = {}\r\n  ): void {\r\n    this.dispatch({\r\n      type: ActionType.UPDATE,\r\n      description: options.description,\r\n      path: options.path,\r\n      payload: options.payload\r\n    });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ReduxConfig {\r\n  readonly production?: boolean;\r\n}\r\nexport const ReduxConfigService = new InjectionToken<\r\n  ReduxConfig\r\n>('ReduxConfig');\r\n","import { Inject, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { AbstractStore } from './abstract-store';\r\nimport { ReduxConfig, ReduxConfigService } from './redux-config.service';\r\n\r\n/*\r\n * Enable integration with Redux dev tools if:\r\n * - Running in dev mode, and\r\n * - The extension is available in the user's browser.\r\n */\r\nconst win = window as any;\r\n\r\nconst reduxDevToolsOptions = {\r\n  maxAge: 15,\r\n  features: {\r\n    pause: false,\r\n    lock: false,\r\n    persist: false,\r\n    jump: false,\r\n    skip: false,\r\n    reorder: false,\r\n    dispatch: false,\r\n    test: false\r\n  }\r\n};\r\n\r\n@NgModule()\r\nexport class ReduxModule {\r\n  constructor(\r\n    @Optional() @Inject(ReduxConfigService) config: ReduxConfig = {},\r\n    @Optional() @SkipSelf() parentModule: ReduxModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ReduxModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    if (config.production) {\r\n      AbstractStore.enableProductionMode();\r\n    } else if (win.__REDUX_DEVTOOLS_EXTENSION__) {\r\n      win.devTools = win.__REDUX_DEVTOOLS_EXTENSION__.connect(\r\n        reduxDevToolsOptions\r\n      );\r\n    }\r\n  }\r\n\r\n  static forRoot(config: ReduxConfig = {}): ModuleWithProviders<ReduxModule> {\r\n    return {\r\n      ngModule: ReduxModule,\r\n      providers: [\r\n        {\r\n          provide: ReduxConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { map, mergeMap, scan } from 'rxjs/operators';\r\nimport { ReduxModule } from './redux.module';\r\nimport { Store, StoreContext, StoreSnapshot } from './store';\r\n\r\n/**\r\n * This service allows stores to register themselves, enabling a snapshot which aggregates the current state of all registered stores.\r\n * Stores which should not be included in the snapshot, should not be registered.\r\n */\r\n@Injectable({\r\n  providedIn: ReduxModule\r\n})\r\nexport class StoreService {\r\n  private register$: Subject<Store<StoreContext>> = new Subject<\r\n    Store<StoreContext>\r\n  >();\r\n  private snapshot$: BehaviorSubject<StoreSnapshot> = new BehaviorSubject<\r\n    StoreSnapshot\r\n  >({});\r\n\r\n  constructor() {\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Update the current snapshot every time the state of one of the registered stores updates\r\n    this.register$\r\n      .pipe(\r\n        mergeMap(store =>\r\n          store.state.pipe(map(state => ({ [store.name]: state })))\r\n        ),\r\n        scan(\r\n          (snapshot, stateMap) => ({ ...snapshot, ...stateMap }),\r\n          this.snapshot$.value\r\n        )\r\n      )\r\n      .subscribe(this.snapshot$);\r\n  }\r\n\r\n  /** Register a store with this service */\r\n  register(store: Store<StoreContext>) {\r\n    this.register$.next(store);\r\n  }\r\n\r\n  /** Returns the current aggregated state of all registered stores */\r\n  get snapshot(): StoreSnapshot {\r\n    return this.snapshot$.getValue();\r\n  }\r\n\r\n  /** Returns an observable stream of the aggregated state of all registered stores */\r\n  get state(): Observable<StoreSnapshot> {\r\n    return this.snapshot$.asObservable();\r\n  }\r\n}\r\n","export * from './lib/check-commit-status';\r\nexport * from './lib/commit-data';\r\nexport * from './lib/commit-event-log';\r\nexport * from './lib/commit-json-model';\r\nexport * from './lib/commit-model';\r\nexport * from './lib/compare-models';\r\nexport * from './lib/create-metric-exemption';\r\nexport * from './lib/create-project';\r\nexport * from './lib/delete-branch';\r\nexport * from './lib/delete-metric-exemption';\r\nexport * from './lib/delete-project';\r\nexport * from './lib/delete-user-group';\r\nexport * from './lib/download-model';\r\nexport * from './lib/force-commit-model';\r\nexport * from './lib/get-branch';\r\nexport * from './lib/get-branches';\r\nexport * from './lib/get-branches-summary';\r\nexport * from './lib/get-metric-exemption';\r\nexport * from './lib/get-model';\r\nexport * from './lib/get-model-conflict';\r\nexport * from './lib/get-project';\r\nexport * from './lib/get-provenance';\r\nexport * from './lib/get-provenance-summary';\r\nexport * from './lib/get-user-group';\r\nexport * from './lib/get-user-groups';\r\nexport * from './lib/get-user-info';\r\nexport * from './lib/get-user-projects';\r\nexport * from './lib/get-user-role';\r\nexport * from './lib/log-clickstream-event';\r\nexport * from './lib/merge-branch';\r\nexport * from './lib/modelview-convert';\r\nexport * from './lib/monitor-status';\r\nexport * from './lib/report-error';\r\nexport * from './lib/repository-version';\r\nexport * from './lib/repository.module';\r\nexport * from './lib/types';\r\nexport * from './lib/update-branch';\r\nexport * from './lib/update-project';\r\nexport * from './lib/update-user-group';\r\nexport * from './lib/update-user-info';\r\nexport * from './lib/user-search';\r\nexport { createHttpParams } from './lib/utils';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelQuery } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API call to check the status of an asynchronous backend operation\r\n */\r\nexport function checkCommitStatus(\r\n  /** The ID of the operation assigned by the API */\r\n  taskId: string,\r\n  /** The full name of the project to which the operation is related */\r\n  projectName: string\r\n): Observable<ModelQuery> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/query`;\r\n\r\n  validateRequiredArguments(arguments, 'checkCommitStatus');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Accept', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({\r\n    taskId,\r\n    projectName\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers: headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http.authorize().get(path, requestOptions);\r\n}\r\n","export * from './check-commit-status';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commit a dataset associated with a model to the repository\r\n */\r\nexport function commitData(\r\n  /** The full name of the project to which the data should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the data should be committed */\r\n  branchName: string,\r\n  /** The actual data to be committed. Defaults to an empty array */\r\n  content: any[] = [],\r\n  /** The id of the model to which the data should be committed. Defaults to 'TRUNK' */\r\n  model_id: string = 'TRUNK'\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/data`;\r\n\r\n  validateRequiredArguments(arguments, 'commitData');\r\n\r\n  const body = {\r\n    project: projectName,\r\n    branch: branchName,\r\n    model_id: model_id,\r\n    content: content\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .post<string>(path, body, { responseType: 'text' as 'json' });\r\n}\r\n","export * from './commit-data';\r\n","import { Action, ActionType } from '@models4insight/redux';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { now } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryLogBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commit a history of redux events to the repository\r\n */\r\nexport function commitEventLog(\r\n  sessionId: string,\r\n  event: Action<any>\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryLogBasePath}/event`;\r\n\r\n  validateRequiredArguments(arguments, 'commitEventLog');\r\n\r\n  let eventPath: (string | number)[];\r\n  if (event.type === ActionType.UPDATE || event.type === ActionType.DELETE) {\r\n    eventPath = event.path;\r\n  }\r\n\r\n  const body = {\r\n    sessionId,\r\n    event: {\r\n      description: event.description,\r\n      path: eventPath,\r\n      timestamp: now(),\r\n      type: event.type\r\n    }\r\n  };\r\n\r\n  return http.post<void>(path, body);\r\n}\r\n","export * from './commit-event-log';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelCommit } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface CommitJsonOptions {\r\n  /** The parser that should be used to interpret the file */\r\n  readonly parserName?: 'archimate3';\r\n  /** The ID of the module to which the model should be committed */\r\n  readonly module?: string;\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n}\r\n\r\n/**\r\n * Commits a model to the repository as a JSON string\r\n */\r\nexport function commitJsonModel(\r\n  /** The full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the model should be committed */\r\n  toBranchName: string,\r\n  /** The JSON string representing the model */\r\n  json: string,\r\n  /** The username of the user committing the model */\r\n  userid: string,\r\n  /** Optional parameters for the commit operation */\r\n  {\r\n    parserName = 'archimate3',\r\n    module = '',\r\n    comment = ''\r\n  }: CommitJsonOptions = {}\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/commitJson`;\r\n\r\n  validateRequiredArguments(arguments, 'commitJsonModel');\r\n\r\n  const body = {\r\n    projectName: projectName,\r\n    branch: toBranchName,\r\n    userid: userid,\r\n    type: parserName,\r\n    comment: comment,\r\n    raw: json\r\n  };\r\n\r\n  return http.authorize().post<ModelCommit>(path, body);\r\n}\r\n","export * from './commit-json-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelCommit, ModelCommitContentTypeEnum } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface CommitModelOptions {\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n  /** The content type of the file */\r\n  readonly contentType?: ModelCommitContentTypeEnum;\r\n  /** Whether or not to create new ids for new concepts, or use the ids already present */\r\n  readonly keepOriginalIds?: boolean;\r\n  /** The parser that should be used to interpret the file */\r\n  readonly parserName?: 'archimate3';\r\n  /** The ID of the module to which the model should be committed */\r\n  readonly module?: string;\r\n  /** The ID of the model that should be overwritten */\r\n  readonly modelId?: string;\r\n}\r\n\r\n/**\r\n * Commits a model to the repository as a File\r\n */\r\nexport function commitModel(\r\n  /** The full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the branch to which the model should be committed */\r\n  toBranchName: string,\r\n  /** The file containing the model */\r\n  file: File,\r\n  /** The username of the user committing the model */\r\n  userid: string,\r\n  /** Optional parameters for the commit operation */\r\n  {\r\n    keepOriginalIds = false,\r\n    parserName = 'archimate3',\r\n    module = '',\r\n    modelId = 'TRUNK',\r\n    comment = '',\r\n    contentType = ModelCommitContentTypeEnum.ARCHIMATE\r\n  }: CommitModelOptions = {}\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/commit`;\r\n\r\n  validateRequiredArguments(arguments, 'commitModel');\r\n\r\n  const formParams = new FormData();\r\n\r\n  formParams.append('parserName', parserName);\r\n  formParams.append('projectName', projectName);\r\n  formParams.append('toBranchName', toBranchName);\r\n  formParams.append('module', module);\r\n  formParams.append('modelId', modelId);\r\n  formParams.append('userid', userid);\r\n  formParams.append('comment', comment);\r\n  formParams.append('contentType', contentType);\r\n  formParams.append('keepOriginalIds', Boolean(keepOriginalIds).toString());\r\n  formParams.append('file', file, file.name);\r\n\r\n  return http.authorize().post<ModelCommit>(path, formParams);\r\n}\r\n","export * from './commit-model';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { modelCompareBasePath } from '../constants';\r\nimport { GetOptions, ModelCompareResult } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface CompareModelsOptions {\r\n  /** Specify the version of the base model to compare a specific version. If omitted, compare the latest version of the base branch. */\r\n  baseVersion?: number;\r\n  /** Specify the version of the other model to compare a specific version. If omitted, compare the latest version of the other branch. */\r\n  otherVersion?: number;\r\n}\r\n\r\nexport function compareModels(\r\n  project: string,\r\n  baseBranchName: string,\r\n  otherBranchName: string,\r\n  {\r\n    baseVersion,\r\n    forceUpdate,\r\n    otherVersion\r\n  }: CompareModelsOptions & GetOptions = {}\r\n): Observable<ModelCompareResult> {\r\n  const http = getHttpClient(),\r\n    path = modelCompareBasePath;\r\n\r\n  validateRequiredArguments(arguments, 'compareModels');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project,\r\n    baseBranch: baseBranchName,\r\n    baseVersion,\r\n    otherBranch: otherBranchName,\r\n    otherVersion\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelCompareResult>(path, requestOptions);\r\n}\r\n","export * from './compare-models';\r\n","export const modelCompareBasePath = 'compare';\r\nexport const modelviewBasePath = 'modelview/api';\r\nexport const repositoryBasePath = 'repository'\r\nexport const repositoryApiBasePath = `${repositoryBasePath}/api`;\r\nexport const repositoryLogBasePath = `${repositoryBasePath}/log`\r\nexport const userSearchBasePath = 'users';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { MetricExemption } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Commits the given metric exemption to the database\r\n */\r\nexport function createMetricExemption(\r\n  /** The metric exemption that should be committed */\r\n  exemption: MetricExemption\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt`;\r\n\r\n  validateRequiredArguments(arguments, 'createMetricExemption');\r\n\r\n  const params = createHttpParams(exemption);\r\n\r\n  return http.authorize().post<MetricExemption>(path, params);\r\n}\r\n","export * from './create-metric-exemption';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { PermissionLevel, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/** Adds default permissions, committer information and a default update message to the given project */\r\nexport function initializeProject(\r\n  /** The data object representing the project */\r\n  project: Project,\r\n  /** The username of the user to whom the project belongs */\r\n  username: string,\r\n  /** The email address of the user to whom the project belongs */\r\n  email: string\r\n): Project {\r\n  return {\r\n    ...project,\r\n    permissions: {\r\n      [username]: PermissionLevel.OWNER\r\n    },\r\n    last_update_message: 'project creation',\r\n    committer: {\r\n      username,\r\n      email\r\n    }\r\n  };\r\n}\r\n\r\n/** Create a project with some default values */\r\nexport function createProject(\r\n  /** The data object representing the project */\r\n  project: Project,\r\n  /** The username of the user to whom the project belongs */\r\n  username: string,\r\n  /** The email address of the user to whom the project belongs */\r\n  email: string\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project`;\r\n\r\n  validateRequiredArguments(arguments, 'createProject');\r\n\r\n  const initializedProject: Project = initializeProject(\r\n    project,\r\n    username,\r\n    email\r\n  );\r\n\r\n  return http.authorize().post<Project>(path, initializedProject);\r\n}\r\n","export * from './create-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Deletes the branch with the given `projectId` and `branchId` from the repository.\r\n * Branches are not actually deleted, but have their `enabled` property set to `false` in the database.\r\n */\r\nexport function deleteBranch(\r\n  /** The id of the project for which a branch should be deleted */\r\n  projectId: string,\r\n  /** The id of the branch which should be deleted */\r\n  branchId: string\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteBranch');\r\n\r\n  const requestParameters = createHttpParams({\r\n    project_id: projectId,\r\n    branch_id: branchId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: requestParameters,\r\n    responseType: 'text' as 'text'\r\n  };\r\n\r\n  return http.authorize().delete(path, requestOptions);\r\n}\r\n","export * from './delete-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Delete an exemption from the database which:\r\n * - Belongs to the metric with the given name and project with the given id, and\r\n * - Has the given exemption id\r\n */\r\nexport function deleteMetricExemption(\r\n  /** The id of the project to which the exemption belongs */\r\n  projectId: string,\r\n  /** The id of the exemption */\r\n  exemptionId: string\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt/${projectId}/${exemptionId}`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteMetricExemption');\r\n\r\n  return http.authorize().delete(path);\r\n}\r\n","export * from './delete-metric-exemption';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to delete a specific project and all associated models\r\n */\r\nexport function deleteProject(\r\n  /** The ID of the project to delete */\r\n  projectId: string\r\n) {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'deleteProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http.authorize().delete(path);\r\n}\r\n","export * from './delete-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Deletes the `UserGroup` with the given `projectId` and `userGroupId` from the repository.\r\n */\r\nexport function deleteUserGroup(\r\n  projectId: string,\r\n  userGroupId: string\r\n): Observable<string> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'deleteUserGroup');\r\n\r\n  const requestParameters = createHttpParams({\r\n    project_id: projectId,\r\n    group_id: userGroupId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: requestParameters,\r\n    responseType: 'text' as 'text'\r\n  };\r\n\r\n  return http.authorize().delete(path, requestOptions);\r\n}\r\n","export * from './delete-user-group';\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver';\r\nimport { map } from 'rxjs/operators';\r\nimport { getModel } from '../get-model';\r\nimport { GetOptions, ModelCommitContentTypeEnum } from '../types';\r\n\r\nexport interface DownloadModelOptions {\r\n  /** The format in which the model should be retrieved */\r\n  contentType?: ModelCommitContentTypeEnum;\r\n  /** The ID of the model which to retrieve */\r\n  modelId?: string;\r\n  /** The ID of the module which to retrieve */\r\n  module?: string;\r\n  /** The name of the parser to use */\r\n  parserName?: 'archimate3';\r\n}\r\n\r\nexport const defaultDownloadModelOptions: DownloadModelOptions = {\r\n  contentType: ModelCommitContentTypeEnum.ARCHIMATE,\r\n  module: '',\r\n  modelId: 'TRUNK',\r\n  parserName: 'archimate3'\r\n};\r\n\r\nfunction findFileName(response: HttpResponse<any>) {\r\n  const contentDisposition = response.headers.get('content-disposition') || '';\r\n  const matches = /filename=([^;]+)/gi.exec(contentDisposition);\r\n  return (matches[1] || '').trim();\r\n}\r\n\r\n/**\r\n * Download a version of a model from the given project and branch in a particular format\r\n */\r\nexport function downloadModel(\r\n  /** The full name of the project from which to retrieve the model */\r\n  fullProjectName: string,\r\n  /** The name of the branch from which to retrieve the model */\r\n  branch: string,\r\n  /** The username of the user downloading the model */\r\n  userid: string,\r\n  /** */\r\n  version?: number,\r\n  /** Additional parameters for the download model operation */\r\n  options: DownloadModelOptions & GetOptions = defaultDownloadModelOptions\r\n) {\r\n  const { contentType, forceUpdate, modelId, module, parserName } = {\r\n    ...defaultDownloadModelOptions,\r\n    ...options\r\n  };\r\n\r\n  return getModel(\r\n    parserName,\r\n    fullProjectName,\r\n    branch,\r\n    module,\r\n    modelId,\r\n    userid,\r\n    contentType,\r\n    { forceUpdate, observe: 'response', responseType: 'text', version }\r\n  ).pipe(\r\n    map((response: HttpResponse<string>) => {\r\n      saveAs(\r\n        new Blob([response.body], {\r\n          type: contentType === 'json' ? 'application/json' : 'text/xml'\r\n        }),\r\n        findFileName(response)\r\n      );\r\n    })\r\n  );\r\n}\r\n","export * from './download-model';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ConflictResolutionTemplateEnum, ModelCommit } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Forcibly commit a model to the repository, resolving any conflicts\r\n */\r\nexport function forceCommitModel(\r\n  /** Name of the parser used for interpreting the added file */\r\n  parserName: string,\r\n  /** Full name of the project to which the model should be committed */\r\n  projectName: string,\r\n  /** The name of the source branch */\r\n  fromBranchName: string,\r\n  /** ID of the module to which the model should be committed */\r\n  module: string,\r\n  /** The ID of the model that should be forcibly committed */\r\n  fromModelId: string,\r\n  /** The name of the target branch */\r\n  toBranchName: string,\r\n  /** The ID of the model that should be overwritten */\r\n  toModelId: string,\r\n  /** The username of the user that is triggering the commit */\r\n  userid: string,\r\n  /** The comment provided by the user */\r\n  comment: string,\r\n  /** The data format in which the model was provided */\r\n  contentType: string,\r\n  /** The original task ID as provided by the API */\r\n  commitTaskId: string,\r\n  /** The conflict resolution template to apply */\r\n  template: ConflictResolutionTemplateEnum,\r\n  /** A list of IDs representing which items to keep from the repository version of the model */\r\n  addListLeft: string[] = [],\r\n  /** A list of IDs representing which items to keep from the uploaded version of the model */\r\n  addListRight: string[] = [],\r\n  /** A list of IDs representing which items to discard from the repository version of the model */\r\n  deleteListLeft: string[] = [],\r\n  /** A list of IDs representing which items to discard from the uploaded version of the model */\r\n  deleteListRight: string[] = []\r\n): Observable<ModelCommit> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/force`;\r\n\r\n  let headers = new HttpHeaders();\r\n\r\n  validateRequiredArguments(arguments, 'forceCommitModel');\r\n\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const formParams = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    fromBranchName,\r\n    module,\r\n    fromModelId,\r\n    toBranchName,\r\n    toModelId,\r\n    userid,\r\n    comment,\r\n    contentType,\r\n    template,\r\n    addListLeft,\r\n    addListRight,\r\n    deleteListLeft,\r\n    deleteListRight,\r\n    commitTaskId\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http.authorize().post<ModelCommit>(path, formParams, requestOptions);\r\n}\r\n","export * from './force-commit-model';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch, GetOptions, Project } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the `Branch` with the given `branchId` for the project with the given `projectId`\r\n */\r\nexport function getBranch(\r\n  /** The id of the project for which to retrieve the branch */\r\n  projectId: Project['id'],\r\n  /** The id of the branch to retrieve */\r\n  branchId: Branch['id'],\r\n  /** Additional parameters for the getBranch operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Branch> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranch');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId,\r\n    branch_id: branchId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Branch>(path, requestOptions);\r\n}\r\n","export * from './get-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { BranchSummary, GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetBranchesSummaryOptions {\r\n  /** The number of summaries to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index of the summary to start the page at */\r\n  readonly offset?: number;\r\n  /** Select only the branches whose name includes this string */\r\n  readonly queryString?: string;\r\n  /** Select only the branches whose name matches this string */\r\n  readonly branchName?: string;\r\n  /** Select only the most recent updates for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Select only the branch updates after this timestamp */\r\n  readonly from?: number;\r\n  /** Select only the branch updates before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API call to retrieve a paged summary of all branches in the project\r\n */\r\nexport function getBranchesSummary(\r\n  /** The full name of the project for which to retrieve the branch summary */\r\n  projectName: string,\r\n  /** Additional query parameters */\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetBranchesSummaryOptions & GetOptions = {}\r\n): Observable<BranchSummary[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranchesSummary');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<BranchSummary[]>(path, requestOptions);\r\n}\r\n","export * from './get-branches-summary';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch, GetOptions, Project } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves all `Branch` for the project with the given `projectId`\r\n */\r\nexport function getBranches(\r\n  /** The id of the project for which to retrieve the branches */\r\n  projectId: Project['id'],\r\n  /** Additional parameters for the getBranches operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Branch[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'getBranches');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Branch[]>(path, requestOptions);\r\n}\r\n","export * from './get-branches';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, MetricExemption } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n\r\nexport interface GetMetricExemptionOptions {\r\n  /** You can specify the branch id if you only want the exemptions for a particular branch */\r\n  branchId?: string;\r\n  /** You can specify a metric name if you want to limit the exemptions to the metric with that name */\r\n  metricName?: string;\r\n  /** You can specify the version timestamp if you only want the exemptions for a particular version */\r\n  version?: number;\r\n}\r\n\r\n/**\r\n * Retrieves all `MetricExemption` for the project with the given `projectId`.\r\n * You can optionally supply a branch id, metric name and version timestamp to limit the results.\r\n */\r\nexport function getMetricExemption(\r\n  /** The id of the project for which to retrieve the exemptions */\r\n  projectId: string,\r\n  /** Additional options for the getMetricExemption operation */\r\n  {\r\n    branchId,\r\n    forceUpdate,\r\n    metricName,\r\n    version\r\n  }: GetOptions & GetMetricExemptionOptions = {}\r\n): Observable<MetricExemption[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/exempt`;\r\n\r\n  validateRequiredArguments(arguments, 'getMetricExemption');\r\n\r\n  const params = createHttpParams({\r\n    project_id: projectId,\r\n    branch: branchId,\r\n    metric: metricName,\r\n    version\r\n  });\r\n\r\n  return http\r\n    .cache(forceUpdate)\r\n    .authorize()\r\n    .get<MetricExemption[]>(path, { params });\r\n}\r\n","export * from './get-metric-exemption';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ModelQuery } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieve the details for a conflict or a set of conflicts\r\n */\r\nexport function getModelConflict(\r\n  /** The ID of the operation that resulted in the conflicts */\r\n  taskId: string,\r\n  /** The full name of the project to which the conflicts belong */\r\n  projectName: string,\r\n  /** The inclusive index at which to start the page */\r\n  index: number,\r\n  /** The length of the page */\r\n  limit: number\r\n): Observable<ModelQuery> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/v2/conflict`;\r\n\r\n  validateRequiredArguments(arguments, 'getModelConflict');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Accept', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({\r\n    taskId,\r\n    projectName,\r\n    index,\r\n    limit\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache()\r\n    .get<ModelQuery>(path, requestOptions);\r\n}\r\n","export * from './get-model-conflict';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface RetrieveModelOptions {\r\n  observe?: any;\r\n  responseType?: any;\r\n  /** The timestamp at which the model that should be retrieved was originally committed */\r\n  version?: number;\r\n}\r\n\r\n/**\r\n * Retrieve a version of a model from the given project and branch in a particular format. If no version is given, retrieves the latest version.\r\n */\r\nexport function getModel(\r\n  /** Name of the parser used for interpreting the added file */\r\n  parserName: string,\r\n  /** The full name of the project from which to retrieve the model */\r\n  projectName: string,\r\n  /** The name of the branch from which to retrieve the model */\r\n  branchName: string,\r\n  /** The ID of the module which to retrieve */\r\n  module: string,\r\n  /** The ID of the model which to retrieve */\r\n  modelId: string,\r\n  /** The username of the user retrieving the model */\r\n  userid: string,\r\n  /** The format in which to retrieve the model */\r\n  contentType: string,\r\n  /** Additional parameters for the retrieve operation */\r\n  {\r\n    forceUpdate,\r\n    observe,\r\n    responseType,\r\n    version\r\n  }: RetrieveModelOptions & GetOptions = {}\r\n): Observable<any> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/model/retrieve`;\r\n\r\n  validateRequiredArguments(arguments, 'getModel');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const queryParameters = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    branchName,\r\n    module,\r\n    modelId,\r\n    userid,\r\n    version,\r\n    contentType\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters,\r\n    observe,\r\n    responseType: responseType || (contentType === 'json' ? 'json' : 'text')\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get(path, requestOptions);\r\n}\r\n","export * from './get-model';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve details about a specific project with the given projectId\r\n */\r\nexport function getProject(\r\n  /** The ID of the project for which to retrieve the details */\r\n  projectId: string,\r\n  /** Optional parameters for the get project operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Project> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Project>(path);\r\n}\r\n","export * from './get-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, ModelProvenanceSummary } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetProvenanceSummaryOptions {\r\n  /** The number of provenance items to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index at which to start the page */\r\n  readonly offset?: number;\r\n  /** The provenance item should include this string */\r\n  readonly queryString?: string;\r\n  /** The branch for the provenance item should match this name */\r\n  readonly branchName?: string;\r\n  /** Only include the latest provenance items for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Only include provenance items from after this timestamp */\r\n  readonly from?: number;\r\n  /** Only include provenance items from before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API request to retrieve a paged set of provenance summaries for the given project\r\n */\r\nexport function getProvenanceSummary(\r\n  /** The full name of the project for which to retrieve the provenance */\r\n  projectName: string,\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetProvenanceSummaryOptions & GetOptions = {}\r\n): Observable<ModelProvenanceSummary[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/provenance/hour`;\r\n\r\n  validateRequiredArguments(arguments, 'getProvenanceSummary');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelProvenanceSummary[]>(path, requestOptions);\r\n}\r\n","export * from './get-provenance-summary';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, ModelProvenance } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface GetProvenanceOptions {\r\n  /** The number of provenance items to retrieve */\r\n  readonly batchSize?: number;\r\n  /** The inclusive index at which to start the page */\r\n  readonly offset?: number;\r\n  /** The provenance item should include this string */\r\n  readonly queryString?: string;\r\n  /** The branch for the provenance item should match this name */\r\n  readonly branchName?: string;\r\n  /** Only include the latest provenance items for each branch */\r\n  readonly latestOnly?: boolean;\r\n  /** Only include provenance items from after this timestamp */\r\n  readonly from?: number;\r\n  /** Only include provenance items from before this timestamp */\r\n  readonly until?: number;\r\n}\r\n\r\n/**\r\n * Makes an API request for a paged set of provenance items for the given project\r\n */\r\nexport function getProvenance(\r\n  /** The full name of the project for which to retrieve the provenance */\r\n  projectName: string,\r\n  /** Additional query parameters */\r\n  {\r\n    batchSize,\r\n    offset,\r\n    queryString,\r\n    branchName,\r\n    latestOnly,\r\n    from,\r\n    until,\r\n    forceUpdate\r\n  }: GetProvenanceOptions & GetOptions = {}\r\n): Observable<ModelProvenance[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/provenance`;\r\n\r\n  validateRequiredArguments(arguments, 'getProvenance');\r\n\r\n  const queryParameters = createHttpParams({\r\n    projectName,\r\n    pageLength: batchSize,\r\n    pageOffset: offset,\r\n    query: queryString,\r\n    branchName,\r\n    latestOnly,\r\n    startDate: from,\r\n    endDate: until\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<ModelProvenance[]>(path, requestOptions);\r\n}\r\n","export * from './get-provenance';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project, UserGroup } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the `UserGroup` with the given `userGroupId` for the project with the given `projectId`\r\n */\r\nexport function getUserGroup(\r\n  /** The id of the project for which to retrieve the user group */\r\n  projectId: Project['id'],\r\n  /** The id of the user group to retrieve */\r\n  userGroupId: UserGroup['id'],\r\n  /** Additional parameters for the getUserGroup operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserGroup> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'getUserGroup');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId,\r\n    group_id: userGroupId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserGroup>(path, requestOptions);\r\n}\r\n","export * from './get-user-group';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project, UserGroup } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves all `UserGroup` for the project with the given `projectId`\r\n */\r\nexport function getUserGroups(\r\n  /** The id of the project for which to retrieve the user groups */\r\n  projectId: Project['id'],\r\n  /** Additional parameters for the getUserGroups operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserGroup[]> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'getUserGroups');\r\n\r\n  const queryParameters = createHttpParams({\r\n    project_id: projectId\r\n  });\r\n\r\n  const requestOptions = {\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserGroup[]>(path, requestOptions);\r\n}\r\n","export * from './get-user-groups';\r\n","import { GetOptions, UserInfo } from '../types';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve the user info for the current user.\r\n * The API interprets the Bearer token in the request header to determine which user info to return.\r\n */\r\nexport function getUserInfo({ forceUpdate }: GetOptions = {}): Observable<\r\n  UserInfo\r\n> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/user`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserInfo>(path);\r\n}\r\n","export * from './get-user-info';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieve a list of projects the given user owns or has permission to access\r\n */\r\nexport function getUserProjects(\r\n  /** The username of the user for whom to retrieve the projects */\r\n  userId: string,\r\n  /** Optional parameters for the get user projects operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<Project[]> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getUserProjects');\r\n\r\n  const path = `${repositoryApiBasePath}/project/user/${userId}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<Project[]>(path);\r\n}\r\n","export * from './get-user-projects';","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { GetOptions, UserRole } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to retrieve the role of the current user in the given project.\r\n * The identity of the user is derived from the bearer token\r\n */\r\nexport function getUserRole(\r\n  /** The full name of the project for which to look up the role */\r\n  projectName: string,\r\n  /** Additional parameters for the get user role operation */\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserRole> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'getUserRole');\r\n\r\n  const path = `${repositoryApiBasePath}/auth/role/${projectName}`;\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserRole>(path);\r\n}\r\n","export * from './get-user-role';\r\n","export * from './log-clickstream-event';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { getHttpClient } from '../utils';\r\n\r\nexport interface ClickstreamEvent {\r\n  /** The name of the application */\r\n  readonly app: string;\r\n  /** The epoch time at which the event occurred */\r\n  readonly timestamp: number;\r\n  /** The path in the application that the user visited */\r\n  readonly url: string;\r\n  /** The username of the user */\r\n  readonly userid: string;\r\n}\r\n\r\n/**\r\n * Saves the given clickstream event to the database\r\n */\r\nexport function logClickstreamEvent(\r\n  /** The event that should be saved to the database */\r\n  event: ClickstreamEvent\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/log`;\r\n\r\n  validateRequiredArguments(arguments, 'logClickstreamEvent');\r\n\r\n  return http.authorize().post<void>(path, event);\r\n}\r\n","export * from './merge-branch';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { BranchCommit } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport interface MergeBranchOptions {\r\n  /** The name of the parser to use */\r\n  readonly parserName?: 'archimate3';\r\n  /** The comment provided by the user */\r\n  readonly comment?: string;\r\n}\r\n\r\n/**\r\n * Makes an API call to move a branch to another branch. Has convenient default values for the optionals.\r\n */\r\nexport function mergeBranch(\r\n  /** The full name of the project */\r\n  projectName: string,\r\n  /** The name of the source branch */\r\n  fromBranch: string,\r\n  /** The name of the target branch */\r\n  toBranch: string,\r\n  /** The username of the user making the merge */\r\n  userid: string,\r\n  /** Additional parameters for the merge branch operation */\r\n  { parserName = 'archimate3', comment = '' }: MergeBranchOptions = {}\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'mergeBranch');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n  const formParams = createHttpParams({\r\n    parserName,\r\n    projectName,\r\n    fromBranch,\r\n    toBranch,\r\n    userid,\r\n    comment\r\n  });\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .post<BranchCommit>(path, formParams.toString(), requestOptions);\r\n}\r\n","export * from './modelview-convert';\r\n","import { b64toBlob, b64urlToB64, validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { modelviewBasePath } from '../constants';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\nexport function modelviewConvert(\r\n  svg: string,\r\n  width: number,\r\n  height: number\r\n): Observable<Blob> {\r\n  const http = getHttpClient(),\r\n    path = `${modelviewBasePath}/convert`;\r\n\r\n  validateRequiredArguments(arguments, 'modelviewConvert');\r\n\r\n  const formParams = createHttpParams({\r\n    svg,\r\n    width,\r\n    height\r\n  });\r\n\r\n  return http\r\n    .authorize()\r\n    .post(path, formParams, { responseType: 'text' })\r\n    .pipe(map(response => b64toBlob(b64urlToB64(response))));\r\n}\r\n","export * from './monitor-status';\r\n","import { retryBackoff } from 'backoff-rxjs';\r\nimport { of, throwError } from 'rxjs';\r\nimport { concatMap, switchMap } from 'rxjs/operators';\r\nimport { ModelQuery, ModelQueryDifResultStateEnum, ModelQueryStateEnum } from '../types';\r\nimport { checkCommitStatus } from '../check-commit-status';\r\n\r\nexport interface MonitorStatusOptions {\r\n  /** The maximum numer of times to check the status before timing out. Defaults to 30 */\r\n  readonly retryCount?: number;\r\n  /** The maximum time interval at which to check the status in milliseconds. Defaults to 30 seconds */\r\n  readonly retryIntervalMax?: number;\r\n  /** The minimum time interval at which to check the status in milliseconds. Defaults to 1 second */\r\n  readonly retryIntervalMin?: number;\r\n}\r\n\r\nexport const defaultMonitorStatusOptions: MonitorStatusOptions = {\r\n  retryCount: 30,\r\n  retryIntervalMax: 30000,\r\n  retryIntervalMin: 1000\r\n};\r\n\r\nexport function monitorStatus(\r\n  /** The full name of the project to which the task relates */\r\n  fullProjectName: string,\r\n  /** The ID of the task for which to check the status */\r\n  taskId: string,\r\n  /** Additional parameters for the monitor status operation */\r\n  options: MonitorStatusOptions = defaultMonitorStatusOptions\r\n) {\r\n  const { retryCount, retryIntervalMax, retryIntervalMin } = {\r\n    ...defaultMonitorStatusOptions,\r\n    ...options\r\n  };\r\n\r\n  return of(1).pipe(\r\n    // Retrieve the current operation state from the API\r\n    switchMap(() =>\r\n      checkCommitStatus(taskId, fullProjectName)\r\n    ),\r\n    // Throws a timeout error if the state of the operation is not and end state\r\n    switchMap((status: ModelQuery) =>\r\n      status.state === ModelQueryStateEnum.COMPLETED ||\r\n      status.state === ModelQueryStateEnum.FAILURE\r\n        ? of(status)\r\n        : throwError('The processing timed out!')\r\n    ),\r\n    // Retries the status check and doubles the interval every time\r\n    // This ensures the operation does not actually time out until the max retries are reached\r\n    retryBackoff({\r\n      initialInterval: retryIntervalMin,\r\n      maxInterval: retryIntervalMax,\r\n      maxRetries: retryCount\r\n    }),\r\n    // If the end state was a failure of some sorts, throw an error\r\n    concatMap((status: ModelQuery) =>\r\n      status.state === ModelQueryStateEnum.FAILURE ||\r\n      status.difResult.state === ModelQueryDifResultStateEnum.FAILURE\r\n        ? throwError('Something went wrong while processing the model!')\r\n        : of(status)\r\n    )\r\n  );\r\n}\r\n","export * from './report-error';\r\n","import { StoreSnapshot } from '@models4insight/redux';\r\nimport { circularReplacer, validateRequiredArguments } from '@models4insight/utils';\r\nimport { omit } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { ErrorContext } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/** Make an API call to report an error */\r\nexport function reportError(\r\n  /** The name of the app from which the error is reported */\r\n  appName: string,\r\n  /** The version of the app from which the error is reported */\r\n  appVersion: string,\r\n  /** The error as thrown */\r\n  error: Error,\r\n  /** The username of the user reporting the error */\r\n  userid: string,\r\n  /** A snapshot of the current application state */\r\n  state?: StoreSnapshot\r\n): Observable<void> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/error`;\r\n\r\n  validateRequiredArguments(arguments, 'reportError');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  const body: ErrorContext = {\r\n    app: appName,\r\n    error: error,\r\n    userid: userid,\r\n    state: state,\r\n    version: appVersion\r\n  };\r\n\r\n  const requestOptions = { headers };\r\n\r\n  // Sometimes the state cannot be serialized. In this case, omit the state from the payload.\r\n  let payload: string;\r\n  try {\r\n    payload = JSON.stringify(body, circularReplacer());\r\n  } catch {\r\n    payload = JSON.stringify(omit(body, 'state'), circularReplacer());\r\n  }\r\n\r\n  return http.authorize().post<void>(path, payload, requestOptions);\r\n}\r\n","export * from './repository-version';\r\n","import { repositoryLogBasePath } from '../constants';\r\nimport { GetOptions, RepositoryVersion } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Retrieves the version string of the repository this application is currently connected to.\r\n * If the version string is unavailable for whatever reason, returns `unknown` instead.\r\n */\r\nexport function repositoryVersion({ forceUpdate }: GetOptions = {}) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryLogBasePath}/version`;\r\n\r\n  return http.cache(forceUpdate).get<RepositoryVersion>(path);\r\n}\r\n","import { Injector, NgModule } from '@angular/core';\n\n@NgModule()\nexport class RepositoryModule {\n  static injector: Injector;\n\n  constructor(injector: Injector) {\n    RepositoryModule.injector = injector;\n  }\n}\n","import { StoreSnapshot } from '@models4insight/redux';\r\n\r\nexport type ModelCompareDifferenceType = 'added' |  'changed' | 'removed' | 'unchanged'\r\n\r\nexport interface ModelCompareDifference {\r\n  readonly id: string,\r\n  readonly difference: ModelCompareDifferenceType\r\n}\r\n\r\nexport interface ModelCompareResult {\r\n  readonly model: any,\r\n  readonly differences: ModelCompareDifference[]\r\n}\r\n\r\n/**\r\n * Represents repository version information\r\n */\r\nexport interface RepositoryVersion {\r\n  /** The shortened git commit hash of the current repository version */\r\n  readonly abbrev: string;\r\n  /** The git branch name of the current repository version */\r\n  readonly branch: string;\r\n  /** The time at which the current version was built */\r\n  readonly build_time: string;\r\n  /** The full version string of the current repository version consisting of the release number and the git commit hash, delimited by a `#` sign */\r\n  readonly version: string;\r\n}\r\n\r\n/**\r\n * Represents a specific concept that is exempt from a particular metric.\r\n */\r\nexport interface MetricExemption {\r\n  /** The id of the exempt concept */\r\n  readonly concept_id: string;\r\n  /** The name of the metric from which the concept is exempt */\r\n  readonly metric: string;\r\n  /** The id of the project to which the concept belongs */\r\n  readonly project_id: string;\r\n  /** Specify the branch id if the exemption should only apply to a specific branch */\r\n  readonly branch?: string;\r\n  /** A description of why the concept is exempt */\r\n  readonly comment?: string;\r\n  /** The id of the metric exemption. Is set by the database */\r\n  readonly id?: string;\r\n  /** Specify the version timestamp if the exemption should only apply to a specific model version */\r\n  readonly version?: number;\r\n}\r\n\r\n/**\r\n * Generic application permission levels.\r\n * Permissions form a hierarchy. The higher the number, the lower the permission level.\r\n * Permissions from lower levels apply to higher levels as well.\r\n */\r\nexport enum PermissionLevel {\r\n  /** No permission required */\r\n  UNRESTRICTED = -1,\r\n  /** Can perform delete actions and assign other owners */\r\n  OWNER = 0,\r\n  /** Can alter properties and settings including access control */\r\n  MAINTAINER = 1,\r\n  /** Can commit changes to the model */\r\n  CONTRIBUTOR = 2,\r\n  /** Can retrieve models in Archi format */\r\n  MODEL_USER = 3,\r\n  /** Can use the model explorer and business dashboards */\r\n  BUSINESS_USER = 4\r\n}\r\n\r\n/** Additional permission levels for use with branch access control */\r\nexport enum BranchPermission {}\r\n\r\n/** Additional permission levels for use with project access control */\r\nexport enum ProjectPermission {}\r\n\r\n/** Permission levels for use with branch access control */\r\nexport type BranchPermissionLevel = PermissionLevel | BranchPermission;\r\n\r\n/** Permission levels for use with project access control */\r\nexport type ProjectPermissionLevel = PermissionLevel | ProjectPermission;\r\n\r\nexport interface GetOptions {\r\n  /** Whether or not to refresh the cache */\r\n  readonly forceUpdate?: boolean;\r\n}\r\n\r\nexport interface UserGroup {\r\n  readonly id?: string;\r\n  readonly project_id?: string;\r\n  readonly name: string;\r\n  readonly description: string;\r\n  readonly members: string[];\r\n}\r\n\r\nexport interface BranchMembers {\r\n  [username: string]: BranchPermissionLevel;\r\n}\r\n\r\nexport interface Branch {\r\n  readonly id?: string;\r\n  readonly description: string;\r\n  readonly name: string;\r\n  readonly project_id?: string;\r\n  readonly protected?: boolean;\r\n  readonly members: BranchMembers;\r\n}\r\n\r\n/**\r\n * Returned by the API for traceability of a branch move\r\n */\r\nexport interface BranchCommit {\r\n  /** The name of the parser used for the operation */\r\n  parserName: string;\r\n  /** The full name of the project this operation relates to */\r\n  projectName: string;\r\n  /** The name of the source branch*/\r\n  branchName: string;\r\n  /** The comment supplied by the user for this operation */\r\n  comment: string;\r\n  /** The time at which this operation started */\r\n  version: string;\r\n  /** The username of the user who started this operation */\r\n  userid: string;\r\n  /** The ID of the operation assigned by the API */\r\n  taskId: string;\r\n  /** The name of the target branch */\r\n  toBranch: string;\r\n  /** The ID of the module this operation relates to */\r\n  module?: string;\r\n}\r\n\r\n/**\r\n * Provides a summary of a branch for display in the UI\r\n */\r\nexport interface BranchSummary {\r\n  /** The name of the branch */\r\n  _id: string;\r\n  /** The number of model versions in this branch */\r\n  cnt: number;\r\n  /** The timestamp at which this branch was created */\r\n  min_start_date: { $numberLong: number };\r\n  /** The latest provenance item for this branch*/\r\n  last_update: ModelProvenance;\r\n}\r\n\r\nexport enum ConflictResolutionTemplateEnum {\r\n  MANUAL = 'manual',\r\n  REPOSITORY_ONLY = 'repository_only',\r\n  UPLOAD_ONLY = 'upload_only',\r\n  UNION_REPOSITORY = 'union_repository',\r\n  UNION_UPLOAD = 'union_upload'\r\n}\r\n\r\n/** Represents a conflict in the model */\r\nexport interface Conflict {\r\n  /** Represents the current state of the repository */\r\n  left?: ConflictSide;\r\n  /** What changed in the repository */\r\n  leftChange?: ConflictChangeTypeEnum;\r\n  /** Represents the current state of the upload */\r\n  right?: any;\r\n  /** What changed in the uploaded model */\r\n  rightChange?: ConflictChangeTypeEnum;\r\n  /** The type of model element this conflict relates to */\r\n  type?: ConflictTypeEnum;\r\n  /** How this conflict was resolved by the user */\r\n  resolution?: ConflictResolutionTemplateEnum;\r\n}\r\n\r\n/** All possible values of a conflict change type */\r\nexport enum ConflictChangeTypeEnum {\r\n  UNCHANGED = 'unchanged',\r\n  ADDED = 'added',\r\n  DELETED = 'deleted',\r\n  MODIFIED = 'modified'\r\n}\r\n\r\nexport interface ConflictSide {\r\n  /** The unprocessed raw conflicting item */\r\n  raw: any;\r\n  /** The path in the organization of the conflicting item */\r\n  organization: ConflictSideOrganization[];\r\n  /** The name of the conflicting item */\r\n  name: string;\r\n  /** The ID of the conflicting item */\r\n  id: string;\r\n  /** The hash of the conflicting item */\r\n  hash: number;\r\n  /** The type of the conflicting item */\r\n  type: string;\r\n  /** The full name of the project to which the conflicting item belongs */\r\n  project: string;\r\n  /** The name of the branch to which the conflicting item belongs */\r\n  branch: string;\r\n  /** The ID of the model to which the conflicting item belongs */\r\n  model_id: string;\r\n  /** The timestamp at which the conflicting item was added to the model */\r\n  start_date: number;\r\n  /** The timestamp at which the conflicting item expires or has expired */\r\n  end_date2: number;\r\n  /** Whether the conflicting item originates from the repository (left) or from the uploaded model (right) */\r\n  source: 'left' | 'right';\r\n}\r\n\r\nexport interface ConflictSideOrganization {\r\n  /** The name of the subfolder */\r\n  label: string;\r\n  /** The index of the subfolder in the overall path */\r\n  position: number;\r\n}\r\n\r\n/** All possible values of a conflict type */\r\nexport enum ConflictTypeEnum {\r\n  NODES = 'nodes',\r\n  RELATIONS = 'relations',\r\n  VIEWS = 'views'\r\n}\r\n\r\n/** Request body for submitting an error to the API */\r\nexport class ErrorContext {\r\n  /** The name of the application */\r\n  app: string;\r\n  /** The error as thrown */\r\n  error: Error;\r\n  /** The username of the current user */\r\n  userid: string;\r\n  /** A snapshot of the current application state */\r\n  state?: StoreSnapshot;\r\n  /** The current app version */\r\n  version: string;\r\n  /** The timestamp at which the error was recorded */\r\n  created_at?: number;\r\n}\r\n\r\n/**\r\n * Returned by the API for traceability of a model commit\r\n */\r\nexport interface ModelCommit {\r\n  /** The name of the parser used */\r\n  parserName?: string;\r\n  /** The full name of the project the model was committed to */\r\n  projectName?: string;\r\n  /** The name of the branch the model was committed to */\r\n  branchName?: string;\r\n  /** The ID of the module the model was committed to */\r\n  module?: string;\r\n  /** The ID of the committed model assigned by the API */\r\n  modelId?: string;\r\n  /** The content type of the model as it was committed */\r\n  contentType?: ModelCommitContentTypeEnum;\r\n  /** The comment provided by the user */\r\n  comment?: string;\r\n  /** The timestamp at which the model was committed */\r\n  version?: string;\r\n  /** The username of the user who committed the model */\r\n  userid?: string;\r\n  /** The ID of the commit operation assigned by the API */\r\n  taskId?: string;\r\n}\r\n\r\nexport enum ModelCommitContentTypeEnum {\r\n  /** Archimate 3.0 */\r\n  ARCHIMATE = 'archimate',\r\n  /** XML */\r\n  XML = 'xml',\r\n  /** JSON */\r\n  JSON = 'json'\r\n}\r\n\r\n/** Represents a single provenance item */\r\nexport interface ModelProvenance {\r\n  /** ?? */\r\n  name: string;\r\n  /** The ID of this provenance item */\r\n  id: string;\r\n  /** The ID of the module this operation relates to */\r\n  module: string;\r\n  /** The ID of the model this operation relates to */\r\n  modelId: string;\r\n  /** The model type of the model this operation relates to */\r\n  type: ParserNameEnum;\r\n  /** The timestamp at which this operation was started */\r\n  start_date: number;\r\n  /** The username of the user who started this operation */\r\n  start_user: string;\r\n  /** The timestamp at which this operation was finished */\r\n  end_date: string;\r\n  /** The username of the user who finished this operation */\r\n  end_user: string;\r\n  /** The hash of the model this operation relates to */\r\n  hash: number;\r\n  /** The name of the branch this operation relates to */\r\n  branch: string;\r\n  /** The comment provided by the user */\r\n  comment: string;\r\n  /** The timestamp at which the operation was started */\r\n  version: string;\r\n  /** The model ID of the repository version */\r\n  derived_from_left: string;\r\n  /** The model ID of the uploaded version */\r\n  derived_from_right: string;\r\n  /** The branch name of the repository version */\r\n  derived_from_left_branch: string;\r\n  /** The branch name of the uploaded version */\r\n  derived_from_right_branch: string;\r\n  /** ?? */\r\n  min: string;\r\n  /** The repository operation executed */\r\n  operation: ModelProvenanceOperationEnum;\r\n  /** The full project name this provenance item relates to */\r\n  project: string;\r\n}\r\n\r\n/**\r\n * All possible provenance operations\r\n */\r\nexport enum ModelProvenanceOperationEnum {\r\n  CREATE_PROJECT = 'create_project',\r\n  RETRIEVE = 'retrieve',\r\n  COMMIT = 'commit',\r\n  CLONE = 'clone',\r\n  MERGE = 'merge',\r\n  BRANCH_CLONE = 'branch_clone',\r\n  BRANCH_MERGE = 'branch_merge',\r\n  UPLOAD = 'upload'\r\n}\r\n\r\n/** Represents a summary of provenance items over a day */\r\nexport interface ModelProvenanceSummary {\r\n  /** Number of provenance items this day */\r\n  cnt: number;\r\n  /** Start of the time period */\r\n  start_date: number;\r\n  /** List of branch names occurring in the provenance items */\r\n  branches: string[];\r\n}\r\n\r\n/** The progress of a commit operation as reported by the API */\r\nexport interface ModelQuery {\r\n  /** Textual description of the message */\r\n  message?: string;\r\n  /** Timestamp of creating this message */\r\n  timestamp?: number;\r\n  /** Timestamp of when the operation was started */\r\n  version?: number;\r\n  /** Current state of the operation */\r\n  state?: ModelQueryStateEnum;\r\n  /** Result of comparing the old and new versions of the model */\r\n  difResult?: ModelQueryDifResult;\r\n}\r\n\r\n/**\r\n * Represents the comparison between the repository and the uploaded model as reported by the API\r\n */\r\nexport interface ModelQueryDifResult {\r\n  /** The state of the comparison */\r\n  state?: ModelQueryDifResultStateEnum;\r\n  /** Timestamp of when the calculation started */\r\n  timestamp?: number;\r\n  /** The number of conflicts found */\r\n  cnt?: number;\r\n  /** The conflicts found */\r\n  conflictList?: Conflict[];\r\n}\r\n\r\n/**\r\n * Represents the state of the processing after a commit as reported by the API\r\n */\r\nexport enum ModelQueryDifResultStateEnum {\r\n  COMMITTED = 'COMMITTED',\r\n  FAILURE = 'FAILURE',\r\n  CONFLICT = 'CONFLICT',\r\n  LOCKED = 'LOCKED',\r\n  UNDEFINED = 'UNDEFINED'\r\n}\r\n\r\n/**\r\n * Represents the state of the operation as reported by the API\r\n */\r\nexport enum ModelQueryStateEnum {\r\n  CREATED = 'created',\r\n  WAITING = 'waiting',\r\n  RUNNING = 'running',\r\n  COMPLETED = 'completed',\r\n  FAILURE = 'failure'\r\n}\r\n\r\n/** All possible parser name values */\r\nexport enum ParserNameEnum {\r\n  ARCHIMATE3 = 'archimate3'\r\n}\r\n\r\n/**\r\n *  Represents a single project\r\n */\r\nexport interface Project {\r\n  last_updated?: number;\r\n  id?: string;\r\n  name?: string;\r\n  committer?: ProjectMember;\r\n  documentation?: string;\r\n  subscription?: 'public' | 'private';\r\n  start_date?: number;\r\n  end_date?: number;\r\n  derived_from?: string;\r\n  project_id?: string;\r\n  normalized_name?: string;\r\n  last_update_message?: string;\r\n  permissions?: { [username: string]: ProjectPermissionLevel };\r\n  project?: string;\r\n  owner?: string;\r\n  end_date2?: number;\r\n  type_?: 'project';\r\n}\r\n\r\n/**\r\n * Represents a member of a project\r\n */\r\nexport interface ProjectMember {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n/** The message returned by the project update */\r\nexport interface ProjectUpdateResponse {\r\n  comment?: string;\r\n  taskid?: string;\r\n}\r\n\r\n/** Data object representing user related attributes */\r\nexport interface UserInfo {\r\n  /** The username of the user */\r\n  userid: string;\r\n  /** The path in the application that the user most recently visited */\r\n  last_visited?: string;\r\n  /** A set of IDs for the projects that the user has marked as favorite */\r\n  favorite_projects?: string[];\r\n  /** A set of IDs for the projects that the user has most recently visited */\r\n  recent_projects?: string[];\r\n  /** Whether or not to show the getting started screen the app home page */\r\n  skip_welcome?: boolean;\r\n}\r\n\r\nexport interface UserRole {\r\n  /** The username of the user */\r\n  userid: string;\r\n  /** The full name of the project to which the role applies */\r\n  project: string;\r\n  /** The email of the user */\r\n  email: string;\r\n  /** The name of the role */\r\n  role_name: string;\r\n  /** The id of the role corresponding with the permission level */\r\n  role_id: PermissionLevel;\r\n}\r\n\r\n/**\r\n * Search result returned by the API representing a single user\r\n */\r\nexport class UserSearch {\r\n  /** The first name of the user */\r\n  firstName: string;\r\n  /** The last name of the user */\r\n  lastName: string;\r\n  /** The username of the user */\r\n  userName: string;\r\n  /** The email address of the user */\r\n  email: string;\r\n}\r\n","export * from './update-branch';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Branch } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Creates or updates the given `Branch` in the repository.\r\n * Whether a `Branch` is updated or created depends on whether or not the `branch_id` property is set.\r\n */\r\nexport function updateBranch(\r\n  /** The branch which to create or update */\r\n  branch: Branch\r\n) {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/branch`;\r\n\r\n  validateRequiredArguments(arguments, 'updateBranch');\r\n\r\n  return http.authorize().post<Branch>(path, branch);\r\n}\r\n","export * from './update-project';\r\n","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { Project } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to update an existing project; project names are immutable\r\n */\r\nexport function updateProject(\r\n  /** The ID of the project to update */\r\n  projectId: string,\r\n  /** The updated project data object */\r\n  project: Project\r\n): Observable<Project> {\r\n  const http = getHttpClient();\r\n\r\n  validateRequiredArguments(arguments, 'updateProject');\r\n\r\n  const path = `${repositoryApiBasePath}/project/${projectId}`;\r\n\r\n  return http.authorize().post(path, project);\r\n}\r\n","export * from './update-user-group'","import { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { UserGroup } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Creates or updates the given `UserGroup` in the repository.\r\n * Whether a `UserGroup` is updated or created depends on whether or not the `group_id` property is set.\r\n */\r\nexport function updateUserGroup(\r\n  /** The user group which to create or update */\r\n  userGroup: UserGroup\r\n): Observable<UserGroup> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/project/group`;\r\n\r\n  validateRequiredArguments(arguments, 'updateUserGroup');\r\n\r\n  return http.authorize().post<UserGroup>(path, userGroup);\r\n}\r\n","export * from './update-user-info';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { repositoryApiBasePath } from '../constants';\r\nimport { UserInfo } from '../types';\r\nimport { getHttpClient } from '../utils';\r\n\r\n/**\r\n * Makes an API request to update the user info for the current user.\r\n * The API interprets the Bearer token in the request header to determine which user info to update.\r\n */\r\nexport function updateUserInfo(\r\n  /** The new user info */\r\n  userinfo: UserInfo\r\n): Observable<UserInfo> {\r\n  const http = getHttpClient(),\r\n    path = `${repositoryApiBasePath}/user/update`;\r\n\r\n  validateRequiredArguments(arguments, 'updateUserInfo');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/json');\r\n\r\n  const requestOptions = {\r\n    headers\r\n  };\r\n\r\n  return http.authorize().post<UserInfo>(path, userinfo, requestOptions);\r\n}\r\n","export * from './user-search';\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { validateRequiredArguments } from '@models4insight/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { userSearchBasePath } from '../constants';\r\nimport { GetOptions, UserSearch } from '../types';\r\nimport { createHttpParams, getHttpClient } from '../utils';\r\n\r\n/**\r\n * Get the user details matching the search string\r\n */\r\nexport function userSearch(\r\n  /** String to match the first name, last name, username or email address of any users */\r\n  search: string,\r\n  { forceUpdate }: GetOptions = {}\r\n): Observable<UserSearch[]> {\r\n  const http = getHttpClient(),\r\n    path = userSearchBasePath;\r\n\r\n  validateRequiredArguments(arguments, 'userSearch');\r\n\r\n  let headers = new HttpHeaders();\r\n  headers = headers.set('Content-Type', 'application/json');\r\n\r\n  const queryParameters = createHttpParams({ search });\r\n\r\n  const requestOptions = {\r\n    headers,\r\n    params: queryParameters\r\n  };\r\n\r\n  return http\r\n    .authorize()\r\n    .cache(forceUpdate)\r\n    .get<UserSearch[]>(path, requestOptions);\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { HttpService } from '@models4insight/http';\r\nimport { Dictionary, isNaN, isNil } from 'lodash';\r\nimport { RepositoryModule } from './repository.module';\r\n\r\n/**\r\n * Creates a new `HttpParams` object based on the given parameters, filtering out any parameter of which the value is null or undefined\r\n */\r\nexport function createHttpParams(\r\n  /** The set of key value pairs to include as parameters */\r\n  params: Dictionary<any>\r\n): HttpParams {\r\n  let result: HttpParams = new HttpParams();\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (!isNil(value) && !isNaN(value)) {\r\n      result = result.set(key, value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the `HttpService` as imported by the `RepositoryModule`. If the `RepositoryModule` has not been loaded, throws an error.\r\n */\r\nexport function getHttpClient(): HttpService {\r\n  if (!RepositoryModule.injector) {\r\n    throw new Error(\r\n      'Tried running an API query while the RepositoryModule was not loaded. Please make sure the RepositoryModule is imported.'\r\n    );\r\n  }\r\n  return RepositoryModule.injector.get(HttpService);\r\n}\r\n","export * from './lib/branches.service';\r\nexport * from './lib/services-branch.module';\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Branch, deleteBranch, getBranches, updateBranch } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ServicesBranchModule } from './services-branch.module';\r\n\r\nexport interface ProjectBranchesContext {\r\n  readonly branchesById?: Dictionary<Branch>;\r\n  readonly branchesByName?: Dictionary<Branch>;\r\n}\r\n\r\nexport interface BranchesStoreContext {\r\n  readonly branchesPerProject?: Dictionary<ProjectBranchesContext>;\r\n  readonly isCreatingBranch?: boolean;\r\n  readonly isDeletingBranch?: boolean;\r\n  readonly isIndexingBranchesByName?: boolean;\r\n  readonly isLoadingBranches?: boolean;\r\n  readonly isUpdatingBranch?: boolean;\r\n}\r\n\r\nexport const defaultBranchesServiceState: BranchesStoreContext = {\r\n  isCreatingBranch: false,\r\n  isDeletingBranch: false,\r\n  isIndexingBranchesByName: false,\r\n  isLoadingBranches: false,\r\n  isUpdatingBranch: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesBranchModule\r\n})\r\nexport class BranchesService extends BasicStore<BranchesStoreContext> {\r\n  private readonly deleteBranch$ = new Subject<Branch>();\r\n  private readonly branchDeleted$ = new Subject<void>();\r\n  private readonly createBranch$ = new Subject<Branch>();\r\n  private readonly branchUpdated$ = new Subject<Branch>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultBranchesServiceState,\r\n      name: 'BranchesService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.deleteBranch$\r\n      .pipe(\r\n        concatMap(branch => this.handleDeleteBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchDeleted$);\r\n\r\n    this.createBranch$\r\n      .pipe(\r\n        concatMap(branch => this.handleCreateBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchUpdated$);\r\n\r\n    // Whenever a new project is selected, retrieve the branches for that project\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId => this.handleRetrieveBranches(projectId)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the branches update, build an index of branches by name\r\n    this.branches\r\n      .pipe(\r\n        switchMap(branches => this.handleIndexBranchesByName(branches)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever a branch is created or updated, save it to the backend\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.watch(['branchesPerProject', projectId, 'branchesById'])\r\n        ),\r\n        concatMap(branches => from(branches)),\r\n        mergeMap(branch => this.handleUpdateBranch(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.branchUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Saves the given `branch` to the back end.\r\n   * Use this function if your `branch` does not yet have an ID.\r\n   */\r\n  createBranch(branch: Branch) {\r\n    this.updateBranch(branch);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given `branch`\r\n   */\r\n  deleteBranch(branch: Branch) {\r\n    this.deleteBranch$.next(branch);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Branch` with the given `branchId` as a `Promise`.\r\n   * @param branchId the ID of the `Branch` to retrieve.\r\n   */\r\n  async getBranchById(branchId: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return this.get([\r\n      'branchesPerProject',\r\n      projectId,\r\n      'branchesById',\r\n      branchId\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Branch` with the given `branchName` as a `Promise`.\r\n   * @param branchName The name of the `Branch` to retrieve.\r\n   */\r\n  async getBranchByName(branchName: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return this.get([\r\n      'branchesPerProject',\r\n      projectId,\r\n      'branchesByName',\r\n      branchName\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Branch` with the given `branchId`.\r\n   * @param branchId the ID of the `Branch` to observe\r\n   */\r\n  selectBranchById(branchId: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select([\r\n            'branchesPerProject',\r\n            projectId,\r\n            'branchesById',\r\n            branchId\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Branch` with the given `branchName`.\r\n   * @param branchName The name of the `Branch` to observe.\r\n   */\r\n  selectBranchByName(branchName: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.select([\r\n            'branchesPerProject',\r\n            projectId,\r\n            'branchesByName',\r\n            branchName\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Saves the given `branch` to the back end.\r\n   */\r\n  async updateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchId = branch?.id;\r\n    if (branchId) {\r\n      this.update({\r\n        description: `Branch ${branchId} updated`,\r\n        path: ['branchesPerProject', projectId, 'branchesById', branchId],\r\n        payload: branch\r\n      });\r\n    } else {\r\n      this.createBranch$.next(branch);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of all branches as a list\r\n   */\r\n  get branches(): Observable<Branch[]> {\r\n    return this.projectService.select('projectId').pipe(\r\n      switchMap(projectId =>\r\n        this.select(['branchesPerProject', projectId, 'branchesById'])\r\n      ),\r\n      map(Object.values)\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Creating the branch', { isQuiet: true })\r\n  @MonitorAsync('isCreatingBranch')\r\n  private async handleCreateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    const createBranchResponse = await updateBranch({\r\n      ...branch,\r\n      project_id: projectId\r\n    }).toPromise();\r\n\r\n    this.updateBranch(createBranchResponse);\r\n\r\n    return createBranchResponse;\r\n  }\r\n\r\n  @ManagedTask('Deleting the branch', { isQuiet: true })\r\n  @MonitorAsync('isDeletingBranch')\r\n  private async handleDeleteBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchId = branch?.id;\r\n\r\n    const deleteBranchResponse = await deleteBranch(\r\n      projectId,\r\n      branchId\r\n    ).toPromise();\r\n\r\n    if (deleteBranchResponse === 'OK') {\r\n      this.delete({\r\n        description: `Branch ${branchId} deleted`,\r\n        path: ['branchesPerProject', projectId, 'branchesById', branchId]\r\n      });\r\n    }\r\n  }\r\n\r\n  @ManagedTask('Indexing the branches by name', { isQuiet: true })\r\n  @MonitorAsync('isIndexingBranchesByName')\r\n  private async handleIndexBranchesByName(branches: Branch[]) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      branchesByName = indexByProperty(branches, 'name');\r\n\r\n    this.update({\r\n      description: 'New branches by name index available',\r\n      path: ['branchesPerProject', projectId, 'branchesByName'],\r\n      payload: branchesByName\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Retrieving the branches for the current project', {\r\n    isQuiet: true\r\n  })\r\n  @MonitorAsync('isLoadingBranches')\r\n  private async handleRetrieveBranches(projectId: string) {\r\n    const branches = await getBranches(projectId, {\r\n      forceUpdate: true\r\n    }).toPromise();\r\n\r\n    const branchesById = indexByProperty(branches, 'id');\r\n\r\n    this.update({\r\n      description: 'New branches available',\r\n      path: ['branchesPerProject', projectId, 'branchesById'],\r\n      payload: branchesById\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the branch', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingBranch')\r\n  private async handleUpdateBranch(branch: Branch) {\r\n    const projectId = await this.projectService.get('projectId');\r\n    return updateBranch({ ...branch, project_id: projectId }).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesBranchModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesBranchModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesBranchModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/clickstream.module';\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ClickstreamConfig {\r\n  readonly app: string;\r\n}\r\n\r\nexport const ClickstreamConfigService = new InjectionToken<ClickstreamConfig>(\r\n  'ClickstreamConfig'\r\n);\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { ClickstreamConfig, ClickstreamConfigService } from './clickstream-config.service';\r\nimport { ClickstreamService } from './clickstream.service';\r\n\r\n@NgModule()\r\nexport class ClickstreamModule {\r\n  constructor(\r\n    clickstreamService: ClickstreamService,\r\n    @Optional() @SkipSelf() parentModule: ClickstreamModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ClickstreamModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    clickstreamService.init();\r\n  }\r\n\r\n  static forRoot(config: ClickstreamConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: ClickstreamModule,\r\n      providers: [\r\n        ClickstreamService,\r\n        {\r\n          provide: ClickstreamConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NavigationEnd, Router, RouterEvent } from '@angular/router';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { ClickstreamEvent, logClickstreamEvent } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { now } from 'lodash';\r\nimport { concatMap, filter } from 'rxjs/operators';\r\nimport { ClickstreamConfig, ClickstreamConfigService } from './clickstream-config.service';\r\n\r\nfunction eventIsNavigationEnd(event: RouterEvent): event is NavigationEnd {\r\n  return event instanceof NavigationEnd;\r\n}\r\n\r\nexport interface ClickstreamStoreContext {\r\n  readonly isLoggingClickstreamEvent?: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class ClickstreamService extends BasicStore<ClickstreamStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    @Inject(ClickstreamConfigService)\r\n    private readonly config: ClickstreamConfig,\r\n    private readonly router: Router,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ClickstreamService', storeService });\r\n  }\r\n\r\n  init() {\r\n    this.router.events\r\n      .pipe(\r\n        filter(eventIsNavigationEnd),\r\n        concatMap(event => this.logClickstreamEvent(event)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  @ManagedTask('Logging the clickstream event', { isQuiet: true })\r\n  @MonitorAsync('isLoggingClickstreamEvent')\r\n  private async logClickstreamEvent(event: NavigationEnd) {\r\n    const userid = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    const clickstreamEvent: ClickstreamEvent = {\r\n      app: this.config.app,\r\n      timestamp: now(),\r\n      url: event.urlAfterRedirects,\r\n      userid\r\n    };\r\n\r\n    return logClickstreamEvent(clickstreamEvent).toPromise();\r\n  }\r\n}\r\n","export * from './lib/commit-model.service';\r\nexport * from './lib/conflicts.service';\r\nexport * from './lib/model-data-commit.service';\r\nexport * from './lib/model-data.service';\r\nexport * from './lib/model.service';\r\nexport * from './lib/retrieve-model.service';\r\nexport * from './lib/services-model.module';\r\nexport * from './lib/types';\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport {\r\n  commitJsonModel,\r\n  commitModel,\r\n  ConflictResolutionTemplateEnum,\r\n  forceCommitModel,\r\n  ModelCommit,\r\n  ModelCommitContentTypeEnum,\r\n  ModelQuery,\r\n  ModelQueryDifResultStateEnum,\r\n  monitorStatus\r\n} from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { TaskManagerService } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap, first } from 'rxjs/operators';\r\nimport { ConflictsService } from './conflicts.service';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface CommitOptions {\r\n  readonly conflictResolutionTemplate?: ConflictResolutionTemplateEnum;\r\n  readonly keepOriginalIds?: boolean;\r\n}\r\n\r\ninterface CommitModelContext {\r\n  readonly branchId: string;\r\n  readonly comment: string;\r\n  readonly model: File | string;\r\n  readonly options?: CommitOptions;\r\n  readonly how?: 'file' | 'json';\r\n}\r\n\r\nexport interface CommitModelStoreContext {\r\n  readonly isCommittingModel?: boolean;\r\n}\r\n\r\nexport const defaultCommitModelServiceState: CommitModelStoreContext = {\r\n  isCommittingModel: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class CommitModelService extends BasicStore<CommitModelStoreContext> {\r\n  private readonly commitModel$ = new Subject<CommitModelContext>();\r\n  private readonly onModelCommitted$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly conflictsService: ConflictsService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly taskManager: TaskManagerService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultCommitModelServiceState,\r\n      name: 'CommitModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever a commit is triggered, handle the commit. Only one commit can be active at a time.\r\n    this.commitModel$\r\n      .pipe(\r\n        exhaustMap(({ branchId, comment, model, options, how }) =>\r\n          this.handleCommitModel(branchId, comment, model, options, how)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.onModelCommitted$);\r\n  }\r\n\r\n  async commitModel(\r\n    branchId: string,\r\n    comment: string,\r\n    model: File,\r\n    options: CommitOptions = {}\r\n  ) {\r\n    this.commitModel$.next({\r\n      branchId,\r\n      comment,\r\n      model,\r\n      options,\r\n      how: 'file'\r\n    });\r\n\r\n    return this.onModelCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  async commitJsonModel(\r\n    branchId: string,\r\n    comment: string,\r\n    model: string,\r\n    options: CommitOptions = {}\r\n  ) {\r\n    this.commitModel$.next({\r\n      branchId,\r\n      comment,\r\n      model,\r\n      options,\r\n      how: 'json'\r\n    });\r\n\r\n    return this.onModelCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  get onModelCommitted() {\r\n    return this.onModelCommitted$.asObservable();\r\n  }\r\n\r\n  @MonitorAsync('isCommittingModel')\r\n  private async handleCommitModel(\r\n    branchName: string,\r\n    comment: string,\r\n    model: File | string,\r\n    { conflictResolutionTemplate, keepOriginalIds = false }: CommitOptions = {},\r\n    how: 'file' | 'json' = 'file'\r\n  ) {\r\n    const [project, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    const task = this.taskManager.createTask();\r\n\r\n    const commitMethods = {\r\n      file: () =>\r\n        commitModel(project.project, branchName, model as File, username, {\r\n          keepOriginalIds,\r\n          comment\r\n        }),\r\n      json: () =>\r\n        commitJsonModel(\r\n          project.project,\r\n          branchName,\r\n          model as string,\r\n          username,\r\n          {\r\n            comment\r\n          }\r\n        )\r\n    };\r\n\r\n    const commitMethod = commitMethods[how],\r\n      uploadModel = commitMethod().toPromise();\r\n\r\n    await task.addOperation({\r\n      description: 'Uploading the model to the repository',\r\n      operation: uploadModel\r\n    });\r\n\r\n    // Monitor the processing of the model and continue after processing is complete\r\n    const commitStatus = uploadModel.then(commit =>\r\n      monitorStatus(project.project, commit.taskId).toPromise()\r\n    );\r\n\r\n    await task.addOperation({\r\n      description: 'Processing the committed model',\r\n      operation: commitStatus\r\n    });\r\n\r\n    // If no conflict resolution template is given, register the conflict set with the conflicts service\r\n    const handleConflicts = Promise.all([commitStatus, uploadModel]).then(\r\n      ([query, commit]) => {\r\n        if (!conflictResolutionTemplate) {\r\n          this.conflictsService.registerConflictsForTask(\r\n            query,\r\n            project,\r\n            branchName,\r\n            branchName,\r\n            commit.taskId,\r\n            {\r\n              fromModelId: commit.taskId,\r\n              toModelId: 'TRUNK',\r\n              parserName: 'archimate3',\r\n              contentType: 'archimate',\r\n              comment: commit.comment\r\n            }\r\n          );\r\n        }\r\n        return [query, commit] as [ModelQuery, ModelCommit];\r\n      }\r\n    );\r\n\r\n    await task.addOperation({\r\n      description: 'Checking for conflicts',\r\n      operation: handleConflicts\r\n    });\r\n\r\n    // If a conflict resolution template is given, automatically resolve the conflicts\r\n    if (conflictResolutionTemplate) {\r\n      const resolveConflicts = handleConflicts.then(async ([query, commit]) => {\r\n        if (query.difResult.state === ModelQueryDifResultStateEnum.CONFLICT) {\r\n          const forceCommit = await forceCommitModel(\r\n            'archimate3',\r\n            project.project,\r\n            branchName,\r\n            '',\r\n            commit.taskId,\r\n            branchName,\r\n            'TRUNK',\r\n            username,\r\n            commit.comment,\r\n            ModelCommitContentTypeEnum.JSON,\r\n            commit.taskId,\r\n            conflictResolutionTemplate\r\n          ).toPromise();\r\n\r\n          return monitorStatus(project.project, forceCommit.taskId).toPromise();\r\n        } else {\r\n          return query;\r\n        }\r\n      });\r\n\r\n      await task.addOperation({\r\n        description: 'Resolving the conflicts',\r\n        operation: resolveConflicts\r\n      });\r\n    }\r\n\r\n    const executable = await task.getExecutable();\r\n\r\n    return executable.toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { ModelQuery, ModelQueryDifResultStateEnum, ModelQueryStateEnum, Project } from '@models4insight/repository';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\n/**\r\n * Represents the conflicts for a single commit or moved branch\r\n */\r\nexport interface ConflictSetContext {\r\n  readonly project: Project;\r\n  readonly parserName: string;\r\n  readonly fromBranchName: string;\r\n  readonly toBranchName: string;\r\n  readonly fromModelId: string;\r\n  readonly toModelId: string;\r\n  readonly comment: string;\r\n  readonly contentType: string;\r\n  readonly taskId: string;\r\n  readonly conflictSet: ModelQuery;\r\n  readonly addListLeft: Set<string>;\r\n  readonly addListRight: Set<string>;\r\n  readonly deleteListLeft: Set<string>;\r\n  readonly deleteListRight: Set<string>;\r\n}\r\n\r\n/**\r\n * Data object for the state of the conflicts service.\r\n */\r\nexport interface ConflictsStoreContext {\r\n  /** Index of conflict sets keyed by their task ID */\r\n  readonly conflictSetsByTaskId?: Dictionary<ConflictSetContext>;\r\n  /** Groups conflict sets by their associated project IDs */\r\n  readonly conflictSetsPerProject?: Dictionary<string[]>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ConflictsService extends BasicStore<ConflictsStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({\r\n      name: 'ConflictsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the conflict sets update, create an index of the conflict sets per project\r\n    this.select('conflictSetsByTaskId')\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(conflictSetsByTaskId =>\r\n        this.groupConflictSetsByProjectId(conflictSetsByTaskId)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Registers a new conflict set\r\n   */\r\n  addConflictSet(\r\n    /** The parser that should be used to interpret the model */\r\n    parserName: string,\r\n    /** The project to which the model belongs */\r\n    project: Project,\r\n    /** The source branch for the commit/move */\r\n    fromBranchName: string,\r\n    /** The target branch for the commit/move */\r\n    toBranchName: string,\r\n    /** The source model ID for the commit/move */\r\n    fromModelId: string,\r\n    /** The target model ID for the commit/move */\r\n    toModelId: string,\r\n    /** The original comment provided by the user */\r\n    comment: string,\r\n    /** The task ID as assigned by the API */\r\n    taskId: string,\r\n    /** The content type in which the model was submitted */\r\n    contentType: string,\r\n    /** The server response indicating there was a conflict */\r\n    conflictSet: ModelQuery\r\n  ) {\r\n    this.update({\r\n      description: 'New conflict set available',\r\n      path: ['conflictSetsByTaskId', taskId],\r\n      payload: {\r\n        parserName: parserName,\r\n        project: project,\r\n        taskId: taskId,\r\n        fromBranchName: fromBranchName,\r\n        toBranchName: toBranchName,\r\n        fromModelId: fromModelId,\r\n        toModelId: toModelId,\r\n        conflictSet: conflictSet,\r\n        comment: comment,\r\n        contentType: contentType,\r\n        addListLeft: new Set<string>(),\r\n        addListRight: new Set<string>(),\r\n        deleteListLeft: new Set<string>(),\r\n        deleteListRight: new Set<string>()\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the specific conflict set identified by the given task ID as a `Promise`\r\n   * @param taskId The identifier of the conflict set\r\n   */\r\n  async getConflictSet(taskId: string): Promise<ConflictSetContext> {\r\n    return this.get(['conflictSetsByTaskId', taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns the conflict sets for the project with the given `projectId` as a `Promise`\r\n   * @param projectId The id of the project for which to retrieve the conflict sets\r\n   */\r\n  async getConflictSetsForProject(projectId: string) {\r\n    const [conflictSetsByTaskId, taskIds] = await Promise.all([\r\n      this.get('conflictSetsByTaskId'),\r\n      this.get(['conflictSetsPerProject', projectId])\r\n    ]);\r\n\r\n    return taskIds.map(taskId => conflictSetsByTaskId[taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the given task indicates any conflicts\r\n   * @param modelQuery The task that should be checked\r\n   */\r\n  hasConflicts(modelQuery: ModelQuery) {\r\n    return (\r\n      modelQuery?.state === ModelQueryStateEnum.COMPLETED &&\r\n      modelQuery?.difResult?.state === ModelQueryDifResultStateEnum.CONFLICT\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks the given server response whether it indicates any conflicts.\r\n   * If so, registers a new conflict set.\r\n   */\r\n  registerConflictsForTask(\r\n    modelQuery: ModelQuery,\r\n    project: Project,\r\n    fromBranchName: string,\r\n    toBranchName: string,\r\n    taskId: string,\r\n    options: {\r\n      fromModelId?: string;\r\n      toModelId?: string;\r\n      parserName?: 'archimate3';\r\n      contentType?: 'archimate';\r\n      comment?: string;\r\n    } = {}\r\n  ) {\r\n    const config = {\r\n      fromModelId: 'TRUNK',\r\n      toModelId: 'TRUNK',\r\n      parserName: 'archimate3',\r\n      contentType: 'archimate',\r\n      comment: '',\r\n      ...options\r\n    };\r\n\r\n    if (this.hasConflicts(modelQuery)) {\r\n      this.addConflictSet(\r\n        config.parserName,\r\n        project,\r\n        fromBranchName,\r\n        toBranchName,\r\n        config.fromModelId,\r\n        config.toModelId,\r\n        config.comment,\r\n        taskId,\r\n        config.contentType,\r\n        modelQuery\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregisters a conflict set identified by the given `taskId`\r\n   */\r\n  removeConflictSet(\r\n    /** The task ID which identifies the conflict set */\r\n    taskId: string\r\n  ): void {\r\n    this.delete({\r\n      description: 'Removed a conflict set',\r\n      path: ['conflictSetsByTaskId', taskId]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves an `Observable` stream of the specific conflict set identified by the given `taskId`\r\n   * @param taskId The identifier of the conflict set\r\n   */\r\n  selectConflictSet(taskId: string): Observable<ConflictSetContext> {\r\n    return this.select(['conflictSetsByTaskId', taskId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the conflict sets for the project with the given `projectId`\r\n   * @param projectId The id of the project for which to retrieve the conflict sets\r\n   */\r\n  selectConflictSetsForProject(projectId: string) {\r\n    return combineLatest([\r\n      this.select('conflictSetsByTaskId'),\r\n      this.select(['conflictSetsPerProject', projectId])\r\n    ]).pipe(\r\n      map(([conflictSetsByTaskId, taskIds]) =>\r\n        taskIds\r\n          .map(taskId => conflictSetsByTaskId[taskId])\r\n          .filter(conflictSet => !!conflictSet)\r\n      )\r\n    );\r\n  }\r\n\r\n  private groupConflictSetsByProjectId(\r\n    conflictSetsByTaskId: Dictionary<ConflictSetContext>\r\n  ) {\r\n    const conflictSetsPerProject = Object.entries(conflictSetsByTaskId).reduce(\r\n      (result, [taskId, conflictSet]) => ({\r\n        ...result,\r\n        [conflictSet.project.id]: [\r\n          ...(result[conflictSet.project.id] ?? []),\r\n          taskId\r\n        ]\r\n      }),\r\n      {} as Dictionary<string[]>\r\n    );\r\n\r\n    this.update({\r\n      description: 'New conflict sets per project available',\r\n      payload: {\r\n        conflictSetsPerProject\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { commitData } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap, first } from 'rxjs/operators';\r\nimport { ModelDataService } from './model-data.service';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nfunction* formatData(dataByConceptId: Dictionary<Dictionary<any>>) {\r\n  for (const [id, data] of Object.entries(dataByConceptId)) {\r\n    yield {\r\n      id,\r\n      data\r\n    };\r\n  }\r\n}\r\n\r\nexport interface ModelDataCommitStoreContext {\r\n  readonly isCommittingData?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelDataCommitService extends BasicStore<\r\n  ModelDataCommitStoreContext\r\n> {\r\n  private readonly commitData$ = new Subject<string>();\r\n  private readonly dataCommitted$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private readonly modelDataService: ModelDataService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({ name: 'ModelDataCommitService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.commitData$\r\n      .pipe(\r\n        exhaustMap(branch => this.handleCommitData(branch)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.dataCommitted$);\r\n  }\r\n\r\n  async commitData(branch: string) {\r\n    this.commitData$.next(branch);\r\n    return this.onDataCommitted.pipe(first()).toPromise();\r\n  }\r\n\r\n  get onDataCommitted() {\r\n    return this.dataCommitted$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Committing the model data')\r\n  @MonitorAsync('isCommittingData')\r\n  private async handleCommitData(branch: string) {\r\n    const [{ project }, data] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.modelDataService.get('dataByConceptId')\r\n    ]);\r\n\r\n    const formattedData = Array.from(formatData(data));\r\n\r\n    return commitData(project, branch, formattedData).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { Dictionary } from 'lodash';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface ModelDataStoreContext {\r\n  readonly dataByConceptId?: Dictionary<Dictionary<any>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelDataService extends BasicStore<ModelDataStoreContext> {\r\n  constructor(storeService: StoreService) {\r\n    super({ name: 'ModelDataService', storeService });\r\n  }\r\n\r\n  set dataByConceptId(dataByConceptId: Dictionary<Dictionary<any>>) {\r\n    this.update({\r\n      description: 'New model data available',\r\n      payload: { dataByConceptId }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { getModel } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest } from 'rxjs';\r\nimport { debounceTime, filter, switchMap } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\nexport interface ModelStoreContext {\r\n  readonly branch?: string;\r\n  readonly isLoadingModel?: boolean;\r\n  readonly model?: any;\r\n  readonly version?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class ModelService extends BasicStore<ModelStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'ModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(() => this.reset());\r\n\r\n    combineLatest([\r\n      this.select('branch', { includeFalsy: true }),\r\n      this.select('version', { includeFalsy: true })\r\n    ])\r\n      .pipe(\r\n        debounceTime(50),\r\n        filter(([branch]) => !!branch),\r\n        switchMap(([branch, version]) =>\r\n          this.handleRetrieveModel(branch, version)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  set model(model: any) {\r\n    this.update({\r\n      description: 'New model available',\r\n      payload: { model }\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Loading the model', { isQuiet: true })\r\n  @MonitorAsync('isLoadingModel')\r\n  private async handleRetrieveModel(branch: string, version: number) {\r\n    const [{ project }, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    const model = await getModel(\r\n      'archimate3',\r\n      project,\r\n      branch,\r\n      '',\r\n      'TRUNK',\r\n      username,\r\n      'json',\r\n      { version }\r\n    ).toPromise();\r\n\r\n    this.model = model;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { downloadModel, ModelCommitContentTypeEnum } from '@models4insight/repository';\r\nimport { ProjectService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap } from 'rxjs/operators';\r\nimport { ServicesModelModule } from './services-model.module';\r\n\r\ninterface RetrieveModelContext {\r\n  readonly branchId: string;\r\n  readonly contentType: ModelCommitContentTypeEnum;\r\n  readonly version?: number;\r\n}\r\n\r\nexport interface RetrieveModelStoreContext {\r\n  readonly isRetrievingModel?: boolean;\r\n}\r\n\r\nexport const defaultRetrieveModelServiceState: RetrieveModelStoreContext = {\r\n  isRetrievingModel: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesModelModule\r\n})\r\nexport class RetrieveModelService extends BasicStore<RetrieveModelStoreContext> {\r\n  private readonly onModelRetrieved$ = new Subject<void>();\r\n  private readonly retrieveModel$ = new Subject<RetrieveModelContext>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultRetrieveModelServiceState,\r\n      name: 'RetrieveModelService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever a retrieve model is triggered, handle the retrieve. Only one retrieve can be active at a time.\r\n    this.retrieveModel$\r\n      .pipe(\r\n        exhaustMap(({ branchId, contentType, version }) =>\r\n          this.handleRetrieveModel(branchId, contentType, version)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.onModelRetrieved$);\r\n  }\r\n\r\n  retrieveModel(\r\n    branchId: string,\r\n    contentType: ModelCommitContentTypeEnum,\r\n    version?: number\r\n  ) {\r\n    this.retrieveModel$.next({\r\n      branchId,\r\n      contentType,\r\n      version\r\n    });\r\n  }\r\n\r\n  get onModelRetrieved() {\r\n    return this.onModelRetrieved$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Retrieving the model from the repository')\r\n  @MonitorAsync('isRetrievingModel')\r\n  private async handleRetrieveModel(\r\n    branchId: string,\r\n    contentType: ModelCommitContentTypeEnum,\r\n    version: number\r\n  ) {\r\n    const [{ project }, username] = await Promise.all([\r\n      this.projectService.getCurrentProject(),\r\n      this.authenticationService.get(['credentials', 'username'])\r\n    ]);\r\n\r\n    return downloadModel(project, branchId, username, version, {\r\n      contentType\r\n    }).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesModelModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesModelModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesModelModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/project-members.service';\r\nexport * from './lib/project-user-groups.service';\r\nexport * from './lib/project.service';\r\nexport * from './lib/projects.service';\r\nexport * from './lib/services-project.module';\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { PermissionLevel } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, switchMap } from 'rxjs/operators';\r\nimport { ProjectService } from './project.service';\r\nimport { ProjectsService } from './projects.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectMembersStoreContext {\r\n  readonly isUpdatingMemberPermissions?: boolean;\r\n}\r\n\r\nexport const defaultProjectMembersServiceState: ProjectMembersStoreContext = {\r\n  isUpdatingMemberPermissions: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectMembersService extends BasicStore {\r\n  private readonly deleteProjectMember$ = new Subject<string>();\r\n  private readonly projectMemberDeleted$ = new Subject<string>();\r\n  private readonly updateProjectMember$ = new Subject<\r\n    [string, PermissionLevel]\r\n  >();\r\n  private readonly projectMemberUpdated$ = new Subject<\r\n    Dictionary<PermissionLevel>\r\n  >();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly projectsService: ProjectsService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectMembersServiceState,\r\n      name: 'ProjectMembersService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.deleteProjectMember$\r\n      .pipe(\r\n        concatMap(username => this.handleDeleteProjectMember(username)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectMemberDeleted$);\r\n\r\n    this.updateProjectMember$\r\n      .pipe(\r\n        concatMap(([username, permission]) =>\r\n          this.handleUpdateMemberPermissions(username, permission)\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectMemberUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Add the member with the given `username` to the current project with the given `permission` level.\r\n   * By default, their permission level will be set to `BUSINESS_USER`.\r\n   *\r\n   * @param username The username of the new project member\r\n   * @param permission The permission level of the new project member\r\n   */\r\n  addProjectMember(\r\n    username: string,\r\n    permission: PermissionLevel = PermissionLevel.BUSINESS_USER\r\n  ) {\r\n    this.setProjectMemberPermissions(username, permission);\r\n  }\r\n\r\n  /**\r\n   * Removes the member with the given username from the project.\r\n   *\r\n   * @param username The username of the project member.\r\n   */\r\n  deleteProjectMember(username: string) {\r\n    this.deleteProjectMember$.next(username);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's permission level as a `Promise`.\r\n   */\r\n  async getCurrentUserPermissions() {\r\n    const username = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    return this.getMemberPermissions(username);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the permission level of the user with the given `username` as a `Promise`.\r\n   */\r\n  async getMemberPermissions(username: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    return this.projectsService.get(\r\n      ['projectsById', projectId, 'permissions', username],\r\n      { includeFalsy: true }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's permission level.\r\n   */\r\n  selectCurrentUserPermissions() {\r\n    return this.authenticationService\r\n      .select(['credentials', 'username'])\r\n      .pipe(switchMap(username => this.selectMemberPermissions(username)));\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the permission level of the project member with the given `username`.\r\n   */\r\n  selectMemberPermissions(username: string) {\r\n    return this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.projectsService.select([\r\n            'projectsById',\r\n            projectId,\r\n            'permissions',\r\n            username\r\n          ])\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Updates the `permission` level of the user with the given `username`.\r\n   *\r\n   * @param username The username of the new project member\r\n   * @param permission The permission level of the new project member\r\n   */\r\n  setProjectMemberPermissions(username: string, permission: PermissionLevel) {\r\n    this.updateProjectMember$.next([username, permission]);\r\n  }\r\n\r\n  /** Returns a list of project members */\r\n  get members() {\r\n    return this.projectService\r\n      .selectCurrentProject()\r\n      .pipe(map(project => Object.keys(project.permissions)));\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a project member has been deleted\r\n   */\r\n  get onProjectMemberDeleted(): Observable<string> {\r\n    return this.projectMemberDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a project member has been created or changed\r\n   */\r\n  get onProjectMemberUpdated(): Observable<Dictionary<PermissionLevel>> {\r\n    return this.projectMemberUpdated$.asObservable();\r\n  }\r\n\r\n  @ManagedTask(\"Updating the project member's permissions\", { isQuiet: true })\r\n  @MonitorAsync('isUpdatingMemberPermissions')\r\n  private async handleUpdateMemberPermissions(\r\n    username: string,\r\n    permission: PermissionLevel\r\n  ) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    this.projectsService.update({\r\n      description: `Updated permissions for user ${username} to project ${projectId}`,\r\n      path: ['projectsById', projectId, 'permissions', username],\r\n      payload: permission\r\n    });\r\n\r\n    return { username: permission };\r\n  }\r\n\r\n  @ManagedTask('Deleting the project member', { isQuiet: true })\r\n  @MonitorAsync('isDeletingProjectMember')\r\n  private async handleDeleteProjectMember(username: string) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    this.projectsService.delete({\r\n      description: `Removed permissions for user ${username} to project ${projectId}`,\r\n      path: ['projectsById', projectId, 'permissions', username]\r\n    });\r\n\r\n    return username;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { deleteUserGroup, getUserGroups, updateUserGroup, UserGroup } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ProjectService } from './project.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectUserGroupsContext {\r\n  readonly userGroupsById?: Dictionary<UserGroup>;\r\n}\r\n\r\nexport interface ProjectUserGroupsStoreContext {\r\n  readonly isCreatingUserGroup?: boolean;\r\n  readonly isDeletingUserGroup?: boolean;\r\n  readonly isRetrievingUserGroups?: boolean;\r\n  readonly isUpdatingUserGroup?: boolean;\r\n  readonly userGroupsPerProject?: Dictionary<ProjectUserGroupsContext>;\r\n}\r\n\r\nexport const defaultProjectUserGroupsServiceState: ProjectUserGroupsStoreContext = {\r\n  isCreatingUserGroup: false,\r\n  isDeletingUserGroup: false,\r\n  isRetrievingUserGroups: false,\r\n  isUpdatingUserGroup: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectUserGroupsService extends BasicStore<\r\n  ProjectUserGroupsStoreContext\r\n> {\r\n  private readonly createUserGroup$ = new Subject<UserGroup>();\r\n  private readonly deleteUserGroup$ = new Subject<UserGroup>();\r\n  private readonly userGroupDeleted$ = new Subject<void>();\r\n  private readonly userGroupUpdated$ = new Subject<UserGroup>();\r\n\r\n  constructor(\r\n    private readonly projectService: ProjectService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectUserGroupsServiceState,\r\n      name: 'ProjectUserGroupsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the project id changes, retrieve the associated user groups\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId => this.handleRetrieveUserGroups(projectId)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever a user group create is triggered, handle the create user group operation.\r\n    // Ony one user group create can be active at any time.\r\n    this.createUserGroup$\r\n      .pipe(\r\n        exhaustMap(userGroup => this.handleCreateUserGroup(userGroup)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.userGroupUpdated$);\r\n\r\n    // Whenever a user group delete is triggered, try to delete the given user group\r\n    // A user group can only be deleted by a project owner\r\n    this.deleteUserGroup$\r\n      .pipe(\r\n        exhaustMap(userGroup => this.handleDeleteUserGroup(userGroup)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.userGroupDeleted$);\r\n\r\n    // Whenever a user group is added or updated, save it to the repository\r\n    this.projectService\r\n      .select('projectId')\r\n      .pipe(\r\n        switchMap(projectId =>\r\n          this.watch(['userGroupsPerProject', projectId, 'userGroupsById'])\r\n        ),\r\n        concatMap(userGroups => from(userGroups)),\r\n        mergeMap(userGroup => this.handleUpdateUserGroup(userGroup))\r\n      )\r\n      .subscribe(this.userGroupUpdated$);\r\n  }\r\n\r\n  /**\r\n   * Saves the given user group to the back end.\r\n   * Use this function if your user group does not yet have an ID.\r\n   */\r\n  createUserGroup(userGroup: UserGroup) {\r\n    this.updateUserGroup(userGroup);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given user group\r\n   */\r\n  deleteUserGroup(userGroup: UserGroup) {\r\n    this.deleteUserGroup$.next(userGroup);\r\n  }\r\n\r\n  /**\r\n   * Saves the given user group to the back end.\r\n   */\r\n  async updateUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      userGroupId = userGroup?.id;\r\n    if (userGroupId) {\r\n      this.update({\r\n        description: `User group ${userGroupId} updated`,\r\n        path: [\r\n          'userGroupsPerProject',\r\n          projectId,\r\n          'userGroupsById',\r\n          userGroupId\r\n        ],\r\n        payload: userGroup\r\n      });\r\n    } else {\r\n      this.createUserGroup$.next(userGroup);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a user group has been deleted\r\n   */\r\n  get onUserGroupDeleted(): Observable<void> {\r\n    return this.userGroupDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits an event whenever a user group has been created or changed\r\n   */\r\n  get onUserGroupUpdated(): Observable<UserGroup> {\r\n    return this.userGroupUpdated$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns a list of user groups\r\n   */\r\n  get userGroups(): Observable<UserGroup[]> {\r\n    return this.projectService.select('projectId').pipe(\r\n      switchMap(projectId =>\r\n        this.select(['userGroupsPerProject', projectId, 'userGroupsById'])\r\n      ),\r\n      map(Object.values)\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Creating the user group', { isQuiet: true })\r\n  @MonitorAsync('isCreatingUserGroup')\r\n  private async handleCreateUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId');\r\n\r\n    const createUserGroupResponse = await updateUserGroup({\r\n      ...userGroup,\r\n      project_id: projectId\r\n    }).toPromise();\r\n\r\n    this.updateUserGroup(createUserGroupResponse);\r\n\r\n    return createUserGroupResponse;\r\n  }\r\n\r\n  @ManagedTask('Deleting the user group', { isQuiet: true })\r\n  @MonitorAsync('isDeletingUserGroup')\r\n  private async handleDeleteUserGroup(userGroup: UserGroup) {\r\n    const projectId = await this.projectService.get('projectId'),\r\n      userGroupId = userGroup?.id;\r\n\r\n    const deleteUserGroupResponse = await deleteUserGroup(\r\n      projectId,\r\n      userGroupId\r\n    ).toPromise();\r\n\r\n    if (deleteUserGroupResponse === 'OK') {\r\n      this.delete({\r\n        description: `User group ${userGroupId} deleted`,\r\n        path: ['userGroupsPerProject', projectId, 'userGroupsById', projectId]\r\n      });\r\n    }\r\n  }\r\n\r\n  @ManagedTask('Retrieving the user groups of the current project', {\r\n    isQuiet: true\r\n  })\r\n  @MonitorAsync('isRetrievingUserGroups')\r\n  private async handleRetrieveUserGroups(projectId: string) {\r\n    const userGroups = await getUserGroups(projectId).toPromise();\r\n\r\n    const userGroupsById = indexByProperty(userGroups, 'id');\r\n\r\n    this.update({\r\n      description: 'New user groups available',\r\n      path: ['userGroupsPerProject', projectId, 'userGroupsById'],\r\n      payload: userGroupsById\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the user group', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingUserGroup')\r\n  private async handleUpdateUserGroup(userGroup: UserGroup) {\r\n    return updateUserGroup(userGroup).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ProjectsService } from './projects.service';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectStoreContext {\r\n  /** The id of the current project */\r\n  readonly projectId?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectService extends BasicStore<ProjectStoreContext> {\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'ProjectService',\r\n      storeService\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current `Project` as a `Promise`.\r\n   */\r\n  async getCurrentProject() {\r\n    const projectId = await this.get('projectId');\r\n    return this.projectsService.getProjectById(projectId);\r\n  }\r\n\r\n  /**\r\n   * Deletes the current project\r\n   */\r\n  async deleteCurrentProject() {\r\n    const project = await this.getCurrentProject();\r\n    this.projectsService.deleteProject(project);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current `Project`.\r\n   */\r\n  selectCurrentProject() {\r\n    return this.select('projectId').pipe(\r\n      switchMap(projectId => this.projectsService.selectProjectById(projectId))\r\n    );\r\n  }\r\n\r\n  /** Updates the ID of the currently selected `Project` */\r\n  setCurrentProject(projectId: string) {\r\n    this.update({\r\n      description: `Project ${projectId} selected`,\r\n      payload: {\r\n        projectId\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { createProject, deleteProject, getUserProjects, Project, updateProject } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { indexByProperty, untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary, orderBy } from 'lodash';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { concatMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ServicesProjectModule } from './services-project.module';\r\n\r\nexport interface ProjectsStoreContext {\r\n  readonly isCreatingProject?: boolean;\r\n  readonly isDeletingProject?: boolean;\r\n  readonly isRetrievingProjects?: boolean;\r\n  readonly isUpdatingProject?: boolean;\r\n  readonly projectsById?: Dictionary<Project>;\r\n}\r\n\r\nexport const defaultProjectsServiceState: ProjectsStoreContext = {\r\n  isCreatingProject: false,\r\n  isDeletingProject: false,\r\n  isRetrievingProjects: false,\r\n  isUpdatingProject: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesProjectModule\r\n})\r\nexport class ProjectsService extends BasicStore<ProjectsStoreContext> {\r\n  private readonly createProject$ = new Subject<Project>();\r\n  private readonly projectCreated$ = new Subject<Project>();\r\n  private readonly deleteProject$ = new Subject<Project>();\r\n  private readonly projectDeleted$ = new Subject<void>();\r\n  private readonly projectUpdated$ = new Subject<Project>();\r\n\r\n  constructor(\r\n    readonly authenticationService: AuthenticationService,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultProjectsServiceState,\r\n      name: 'ProjectsService',\r\n      storeService\r\n    });\r\n\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Whenever the username of the user changes, retrieve the projects of the current user\r\n    this.authenticationService\r\n      .select(['credentials', 'username'])\r\n      .pipe(\r\n        switchMap(username => this.handleRetrieveProjects(username)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    this.createProject$\r\n      .pipe(\r\n        concatMap(project => this.handleCreateProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectCreated$);\r\n\r\n    this.deleteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleDeleteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectDeleted$);\r\n\r\n    // Whenever a project is added or changes, save it to the repository\r\n    this.watch('projectsById')\r\n      .pipe(\r\n        concatMap(projects => from(projects)),\r\n        mergeMap(project => this.handleUpdateProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(this.projectUpdated$);\r\n  }\r\n\r\n  @ManagedTask('Creating the project', { isQuiet: true })\r\n  @MonitorAsync('isCreatingProject')\r\n  private async handleCreateProject(project: Project) {\r\n    const { username, email } = await this.authenticationService.get(\r\n      'credentials'\r\n    );\r\n\r\n    const projectCreateResponse = await createProject(\r\n      project,\r\n      username,\r\n      email\r\n    ).toPromise();\r\n\r\n    this.updateProject(projectCreateResponse);\r\n\r\n    return projectCreateResponse;\r\n  }\r\n\r\n  /**\r\n   * Saves the given project to the back end.\r\n   * Use this function if your project does not yet have an ID.\r\n   */\r\n  createProject(project: Project) {\r\n    this.updateProject(project);\r\n  }\r\n\r\n  /**\r\n   * Deletes the given project\r\n   */\r\n  deleteProject(project: Project) {\r\n    this.deleteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Saves the given project to the back end.\r\n   */\r\n  updateProject(project: Project) {\r\n    if (project?.id) {\r\n      this.update({\r\n        description: `Project ${project.id} updated`,\r\n        path: ['projectsById', project.id],\r\n        payload: project\r\n      });\r\n    } else {\r\n      this.createProject$.next(project);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the `Project` with the given `projectId` as a `Promise`.\r\n   * @param projectId the ID of the project to retrieve\r\n   */\r\n  async getProjectById(projectId: string) {\r\n    return this.get(['projectsById', projectId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the `Project` with the given `projectId`.\r\n   * @param projectId the ID of the project to observe\r\n   */\r\n  selectProjectById(projectId: string) {\r\n    return this.select(['projectsById', projectId]);\r\n  }\r\n\r\n  /**\r\n   * An `Observable` stream of an `Array` containing all the user's current `Projects`.\r\n   */\r\n  get projects(): Observable<Project[]> {\r\n    return this.select('projectsById').pipe(\r\n      map(projectsById => {\r\n        const projects = Object.values(projectsById);\r\n        return orderBy(projects, 'last_updated', 'desc');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been created.\r\n   */\r\n  get onProjectCreated(): Observable<Project> {\r\n    return this.projectCreated$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been deleted.\r\n   */\r\n  get onProjectDeleted(): Observable<void> {\r\n    return this.projectDeleted$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Emits whenever a project has been updated.\r\n   */\r\n  get onProjectUpdated(): Observable<Project> {\r\n    return this.projectUpdated$.asObservable();\r\n  }\r\n\r\n  @ManagedTask('Deleting the project', { isQuiet: true })\r\n  @MonitorAsync('isDeletingProject')\r\n  private async handleDeleteProject(project: Project) {\r\n    await deleteProject(project?.id).toPromise();\r\n\r\n    this.delete({\r\n      description: `Project ${project?.id} deleted`,\r\n      path: ['projectsById', project?.id]\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Retrieving your projects', { isQuiet: true })\r\n  @MonitorAsync('isRetrievingProjects')\r\n  private async handleRetrieveProjects(username: string) {\r\n    const projects = await getUserProjects(username).toPromise();\r\n\r\n    const projectsById = indexByProperty(projects, 'id');\r\n\r\n    this.update({\r\n      description: 'New projects available',\r\n      payload: { projectsById }\r\n    });\r\n  }\r\n\r\n  @ManagedTask('Saving the project', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingProject')\r\n  private async handleUpdateProject(project: Project) {\r\n    return updateProject(project.id, project).toPromise();\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesProjectModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesProjectModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesProjectModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","export * from './lib/favorite-projects.service';\r\nexport * from './lib/recent-projects.service';\r\nexport * from './lib/services-user-info.module';\r\nexport * from './lib/user-info.service';\r\nexport * from './lib/last-visited-route.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Project } from '@models4insight/repository';\r\nimport {\r\n  ProjectService,\r\n  ProjectsService\r\n} from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, Subject } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\nexport interface FavoriteProjectsStoreContext {\r\n  readonly isAddingFavoriteProject?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class FavoriteProjectsService extends BasicStore<\r\n  FavoriteProjectsStoreContext\r\n> {\r\n  private readonly addFavoriteProject$ = new Subject<Project>();\r\n  private readonly removeFavoriteProject$ = new Subject<Project>();\r\n\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    private readonly projectService: ProjectService,\r\n    private readonly userInfoService: UserInfoService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      name: 'FavoriteProjectsService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.addFavoriteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleAddFavoriteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    this.removeFavoriteProject$\r\n      .pipe(\r\n        concatMap(project => this.handleRemoveFavoriteProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Register the given project as one of the current user's favorites.\r\n   * @param project The project that should be registered as a favorite.\r\n   */\r\n  addFavoriteProject(project: Project) {\r\n    this.addFavoriteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's favorite projects as a `Promise`\r\n   */\r\n  async getFavoriteProjects() {\r\n    const [favoriteProjectIds, projectsById] = await Promise.all([\r\n      this.userInfoService.get(['userInfo', 'favorite_projects']),\r\n      this.projectsService.get('projectsById')\r\n    ]);\r\n\r\n    return favoriteProjectIds\r\n      .filter(projectId => projectId in projectsById)\r\n      .map(projectId => projectsById[projectId]);\r\n  }\r\n\r\n  /**\r\n   * Unregisters the given project as one of the current user's favorites.\r\n   * @param project The project that should be unregistered as a favorite.\r\n   */\r\n  removeFavoriteProject(project: Project) {\r\n    this.removeFavoriteProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's favorite projects\r\n   */\r\n  selectFavoriteProjects() {\r\n    return combineLatest([\r\n      this.userInfoService.select(['userInfo', 'favorite_projects']),\r\n      this.projectsService.select('projectsById')\r\n    ]).pipe(\r\n      map(([favoriteProjectIds, projectsById]) =>\r\n        favoriteProjectIds\r\n          .filter(projectId => projectId in projectsById)\r\n          .map(projectId => projectsById[projectId])\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether the current projcect is a favorite as an `Observable` stream.\r\n   */\r\n  get isCurrentProjectFavorite() {\r\n    return combineLatest([\r\n      this.projectService.select('projectId'),\r\n      this.userInfoService.select(['userInfo', 'favorite_projects'], {\r\n        includeFalsy: true\r\n      })\r\n    ]).pipe(\r\n      map(([projectId, favoriteProjects]) =>\r\n        !!favoriteProjects?.includes(projectId)\r\n      )\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Adding a favorite project', { isQuiet: true })\r\n  @MonitorAsync('isAddingFavoriteProject')\r\n  private async handleAddFavoriteProject(project: Project) {\r\n    // If the favorite projects are unavailable, start with an empty list\r\n    const favoriteProjects =\r\n      (await this.userInfoService.get(['userInfo', 'favorite_projects'], {\r\n        includeFalsy: true\r\n      })) ?? [];\r\n\r\n    const updatedFavoriteProjects = [\r\n      project?.id,\r\n      ...favoriteProjects.filter(\r\n        favoriteProject => favoriteProject !== project?.id\r\n      )\r\n    ];\r\n\r\n    this.userInfoService.update({\r\n      description: 'Favorite projects updated',\r\n      path: ['userInfo', 'favorite_projects'],\r\n      payload: updatedFavoriteProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n\r\n  @ManagedTask('Removing a favorite project', { isQuiet: true })\r\n  @MonitorAsync('isRemovingFavoriteProject')\r\n  private async handleRemoveFavoriteProject(project: Project) {\r\n    const favoriteProjects = await this.userInfoService.get([\r\n      'userInfo',\r\n      'favorite_projects'\r\n    ]);\r\n\r\n    const updatedFavoriteProjects = favoriteProjects.filter(\r\n      favoriteProject => favoriteProject !== project?.id\r\n    );\r\n\r\n    this.userInfoService.update({\r\n      description: 'Favorite project removed',\r\n      path: ['userInfo', 'favorite_projects'],\r\n      payload: updatedFavoriteProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { getQueryParametersFromUrl } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\n/** Represents the last visited route in the application */\r\nexport interface LastVisitedRoute {\r\n  /** The path of the last visited route */\r\n  readonly path: string;\r\n  /** Any query parameters applied to the last visited route */\r\n  readonly queryParams?: Dictionary<string>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class LastVisitedRouteService {\r\n  constructor(private readonly userInfoService: UserInfoService) {}\r\n\r\n  /**\r\n   * Returns a snapshot of the user's last visited route as a `Promise`\r\n   */\r\n  async getLastVisitedRoute() {\r\n    const lastVisitedUrl = await this.userInfoService.get([\r\n      'userInfo',\r\n      'last_visited'\r\n    ]);\r\n    return this.handleFormatLastVisitedRoute(lastVisitedUrl);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the user's last visited route\r\n   */\r\n  selectLastVisitedRoute() {\r\n    return this.userInfoService\r\n      .select(['userInfo', 'last_visited'])\r\n      .pipe(\r\n        map(lastVisitedUrl => this.handleFormatLastVisitedRoute(lastVisitedUrl))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Sets the user's last vistited route to the given `url`\r\n   * @param url The url of the user's last visited route\r\n   */\r\n  updateLastVisitedRoute(url: string) {\r\n    const [pathAndParameters] = url.split('#');\r\n\r\n    this.userInfoService.update({\r\n      description: 'New last visited url available',\r\n      path: ['userInfo', 'last_visited'],\r\n      payload: pathAndParameters\r\n    });\r\n  }\r\n\r\n  private handleFormatLastVisitedRoute(\r\n    lastVisitedUrl: string\r\n  ): LastVisitedRoute {\r\n    const [path] = lastVisitedUrl.split('?'),\r\n      queryParams = getQueryParametersFromUrl(lastVisitedUrl);\r\n    return { path, queryParams };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { Project } from '@models4insight/repository';\r\nimport { ProjectsService } from '@models4insight/services/project';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, Subject } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\nimport { UserInfoService } from './user-info.service';\r\n\r\nexport interface RecentProjectsStoreContext {\r\n  readonly isAddingRecentProject?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class RecentProjectsService extends BasicStore {\r\n  private readonly addRecentProject$ = new Subject<Project>();\r\n  constructor(\r\n    private readonly projectsService: ProjectsService,\r\n    private readonly userInfoService: UserInfoService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({ name: 'RecentProjectsService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.addRecentProject$\r\n      .pipe(\r\n        concatMap(project => this.handleAddRecentProject(project)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Adds the given project to the user's recently visited projects\r\n   * @param project The project that should be added to the list\r\n   */\r\n  addRecentProject(project: Project) {\r\n    this.addRecentProject$.next(project);\r\n  }\r\n\r\n  /**\r\n   * Returns a snapshot of the current user's recently visited projects as a `Promise`\r\n   */\r\n  async getRecentProjects() {\r\n    const [recentProjectIds, projectsById] = await Promise.all([\r\n      this.userInfoService.get(['userInfo', 'recent_projects']),\r\n      this.projectsService.get('projectsById')\r\n    ]);\r\n\r\n    return recentProjectIds\r\n      .filter(projectId => projectId in projectsById)\r\n      .map(projectId => projectsById[projectId]);\r\n  }\r\n\r\n  /**\r\n   * Returns an `Observable` stream of the current user's recently visited projects\r\n   */\r\n  selectRecentProjects() {\r\n    return combineLatest([\r\n      this.userInfoService.select(['userInfo', 'recent_projects']),\r\n      this.projectsService.select('projectsById')\r\n    ]).pipe(\r\n      map(([recentProjectIds, projectsById]) =>\r\n        recentProjectIds\r\n          .filter(projectId => projectId in projectsById)\r\n          .map(projectId => projectsById[projectId])\r\n      )\r\n    );\r\n  }\r\n\r\n  @ManagedTask('Updating your recent projects', { isQuiet: true })\r\n  @MonitorAsync('isAddingRecentProject')\r\n  private async handleAddRecentProject(project: Project) {\r\n    // If the recent projects are unavailable, start with an empty list\r\n    const recentProjects =\r\n      (await this.userInfoService.get(['userInfo', 'recent_projects'], {\r\n        includeFalsy: true\r\n      })) ?? [];\r\n\r\n    const updatedRecentProjects = [\r\n      project?.id,\r\n      ...recentProjects.filter(recentProject => recentProject !== project?.id)\r\n    ].slice(0, 5);\r\n\r\n    this.userInfoService.update({\r\n      description: 'Recent projects updated',\r\n      path: ['userInfo', 'recent_projects'],\r\n      payload: updatedRecentProjects\r\n    });\r\n\r\n    return project;\r\n  }\r\n}\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class ServicesUserInfoModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: ServicesUserInfoModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'ServicesUserInfoModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { BasicStore, MonitorAsync, StoreService } from '@models4insight/redux';\r\nimport { getUserInfo, updateUserInfo, UserInfo } from '@models4insight/repository';\r\nimport { ManagedTask } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { identity } from 'lodash';\r\nimport { partition } from 'rxjs';\r\nimport { filter, pairwise, switchMap, debounceTime } from 'rxjs/operators';\r\nimport { ServicesUserInfoModule } from './services-user-info.module';\r\n\r\nexport interface UserInfoStoreContext {\r\n  readonly isAddingFavoriteProject?: boolean;\r\n  readonly isRemovingFavoriteProject?: boolean;\r\n  readonly isRetrievingUserInfo?: boolean;\r\n  readonly isUpdatingUserInfo?: boolean;\r\n  readonly userInfo?: UserInfo;\r\n}\r\n\r\nconst defaultUserInfoServiceState: UserInfoStoreContext = {\r\n  isAddingFavoriteProject: false,\r\n  isRemovingFavoriteProject: false,\r\n  isRetrievingUserInfo: false,\r\n  isUpdatingUserInfo: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: ServicesUserInfoModule\r\n})\r\nexport class UserInfoService extends BasicStore<UserInfoStoreContext> {\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    readonly storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: defaultUserInfoServiceState,\r\n      name: 'UserInfoService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Returns the current user preferences.\r\n   */\r\n  get userinfo() {\r\n    return this.select('userInfo');\r\n  }\r\n\r\n  private init() {\r\n    const [authenticated, notAuthenticated] = partition(\r\n      this.authenticationService.isAuthenticated(),\r\n      identity\r\n    );\r\n\r\n    // Whenever a user authenticates, retrieve their userinfo\r\n    authenticated\r\n      .pipe(\r\n        switchMap(() => this.handleRetrieveUserInfo()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Whenever the user is not or no longer authenticated, reset the userinfo\r\n    notAuthenticated.pipe(untilDestroyed(this)).subscribe(() => this.reset());\r\n\r\n    // Whenever the user info updates, send it over to the back end.\r\n    // Don't update on the initial load, or when another user logs in.\r\n    this.select('userInfo')\r\n      .pipe(\r\n        pairwise(),\r\n        filter(\r\n          ([old, current]) =>\r\n            old?.userid && current?.userid && old?.userid === current?.userid\r\n        ),\r\n        debounceTime(50),\r\n        switchMap(([, userInfo]) => this.handleUpdateUserInfo(userInfo)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  @ManagedTask('Retrieving your preferences', { isQuiet: true })\r\n  @MonitorAsync('isRetrievingUserInfo')\r\n  private async handleRetrieveUserInfo() {\r\n    const userInfo = await getUserInfo().toPromise();\r\n\r\n    this.update({\r\n      description: 'New user info available',\r\n      payload: { userInfo }\r\n    });\r\n\r\n    return userInfo;\r\n  }\r\n\r\n  @ManagedTask('Saving your preferences', { isQuiet: true })\r\n  @MonitorAsync('isUpdatingUserInfo')\r\n  private async handleUpdateUserInfo(userInfo: UserInfo) {\r\n    return updateUserInfo(userInfo).toPromise();\r\n  }\r\n}\r\n","export * from './lib/route-reusable-strategy';\nexport * from './lib/shell';\nexport { ShellConfig } from './lib/shell-config.service';\nexport * from './lib/shell.module';\nexport { ShellService, ShellStoreContext } from './lib/shell.service';\n\n","import { Component, Inject, Optional } from '@angular/core';\r\nimport { faCopyright } from '@fortawesome/free-regular-svg-icons';\r\nimport { VersionService } from '@models4insight/version';\r\nimport { ShellConfig, ShellConfigService } from '../shell-config.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent {\r\n  readonly appName: string;\r\n  readonly copyright: number;\r\n  readonly version: string;\r\n\r\n  readonly faCopyright = faCopyright;\r\n\r\n  constructor(\r\n    versionService: VersionService,\r\n    @Optional()\r\n    @Inject(ShellConfigService)\r\n    config: ShellConfig = {}\r\n  ) {\r\n    this.appName = config.appName;\r\n    this.copyright = config.appCopyright;\r\n    this.version = versionService.appVersion;\r\n  }\r\n}\r\n","<footer class=\"footer\">\n  <div class=\"container\">\n    <div class=\"level\">\n      <div class=\"level-left\">\n        <div class=\"level-item has-text-centered has-text-white\">\n          <span translate>shell.footer.copyright</span>\n          <span class=\"icon\">\n            <fa-icon [icon]=\"faCopyright\"></fa-icon>\n          </span>\n          {{ copyright }}\n        </div>\n      </div>\n      <div class=\"level-item has-text-centered has-text-white\">\n        {{ appName }}\n      </div>\n      <div class=\"level-right\">\n        <div class=\"level-item has-text-centered has-text-white\">\n          {{ version }}\n        </div>\n      </div>\n    </div>\n  </div>\n</footer>\n","import { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { faArrowCircleDown, faBook, faEllipsisV, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { AuthenticationService, Credentials } from '@models4insight/authentication';\nimport { I18nService } from '@models4insight/i18n';\nimport { Feature } from '@models4insight/permissions';\nimport { Observable } from 'rxjs';\nimport { ShellConfig, ShellConfigService } from '../shell-config.service';\nimport { ShellService } from '../shell.service';\n\n@Component({\n  selector: 'models4insight-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  readonly Feature = Feature;\n\n  readonly appLogoPath: string;\n  readonly appName: string;\n\n  readonly faArrowCircleDown = faArrowCircleDown;\n  readonly faBook = faBook;\n  readonly faEllipsisV = faEllipsisV;\n  readonly faSync = faSync;\n\n  credentials$: Observable<Credentials>;\n  currentLanguage$: Observable<string>;\n  isAppInstallable$: Observable<boolean>;\n  isUpdateAvailable$: Observable<boolean>;\n  routes$: Observable<Route[]>;\n  supportedLanguages$: Observable<string[]>;\n\n  menuHidden = true;\n\n  constructor(\n    public i18nService: I18nService,\n    private authenticationService: AuthenticationService,\n    private shellService: ShellService,\n    @Optional() @Inject(ShellConfigService) config: ShellConfig = {}\n  ) {\n    this.appLogoPath = config.appLogoPath || 'assets/m4i-logo-notext.png';\n    this.appName = config.appName;\n  }\n\n  ngOnInit() {\n    this.credentials$ = this.authenticationService.credentials();\n    this.currentLanguage$ = this.i18nService.select('currentLanguage');\n    this.isAppInstallable$ = this.shellService.select('isAppInstallable');\n    this.isUpdateAvailable$ = this.shellService.select('isUpdateAvailable');\n    this.routes$ = this.shellService.select('routes');\n    this.supportedLanguages$ = this.i18nService.select('supportedLanguages');\n  }\n\n  applyUpdate() {\n    this.shellService.applyUpdate();\n  }\n\n  triggerInstallPrompt() {\n    this.shellService.installApp();\n  }\n\n  toggleMenu() {\n    this.menuHidden = !this.menuHidden;\n  }\n\n  logout() {\n    this.authenticationService.logout();\n  }\n\n  accountManagement() {\n    this.authenticationService.accountManagement();\n  }\n\n  setLanguage(language: string) {\n    this.i18nService.setLanguage(language);\n  }\n}\n","<nav class=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\r\n  <div class=\"container\">\r\n    <div class=\"navbar-brand\">\r\n      <a class=\"navbar-item is-size-4\" routerLink=\"/\"\r\n        ><img class=\"logo\" [src]=\"appLogoPath\" [alt]=\"appName\"\r\n      /></a>\r\n      <a\r\n        role=\"button\"\r\n        class=\"navbar-burger burger\"\r\n        type=\"button\"\r\n        aria-label=\"Toggle navigation\"\r\n        data-target=\"primaryNavMenu\"\r\n        [attr.aria-expanded]=\"!menuHidden\"\r\n        [class.is-active]=\"!menuHidden\"\r\n        (click)=\"toggleMenu()\"\r\n      >\r\n        <span aria-hidden=\"true\"></span>\r\n        <span aria-hidden=\"true\"></span>\r\n        <span aria-hidden=\"true\"></span>\r\n      </a>\r\n    </div>\r\n    <div\r\n      id=\"primaryNavMenu\"\r\n      class=\"navbar-menu is-paddingless\"\r\n      [ngClass]=\"{ 'is-active': !menuHidden }\"\r\n    >\r\n      <div class=\"navbar-start\">\r\n        <div class=\"navbar-item\">\r\n          <div class=\"buttons\">\r\n            <!-- Primary navigation items -->\r\n            <ng-container *ngFor=\"let route of routes$ | async\">\r\n              <a\r\n                class=\"button is-outlined is-dark is-hidden-touch\"\r\n                [routerLink]=\"'/' + route.path\"\r\n                routerLinkActive=\"has-text-white has-background-dark\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon\r\n                    [icon]=\"route.data ? route.data['icon'] : null\"\r\n                  ></fa-icon>\r\n                </span>\r\n                <span translate>\r\n                  {{\r\n                    (route.data && route.data['title']\r\n                      ? route.data['title']\r\n                      : route.path\r\n                    )\r\n                      | titlecase\r\n                      | translate\r\n                  }}\r\n                </span>\r\n              </a>\r\n              <a\r\n                class=\"button is-outlined is-dark is-fullwidth is-hidden-desktop\"\r\n                [routerLink]=\"'/' + route.path\"\r\n                routerLinkActive=\"has-text-white has-background-dark\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon\r\n                    [icon]=\"route.data ? route.data['icon'] : null\"\r\n                  ></fa-icon>\r\n                </span>\r\n                <span translate>\r\n                  {{\r\n                    (route.data && route.data['title']\r\n                      ? route.data['title']\r\n                      : route.path\r\n                    )\r\n                      | titlecase\r\n                      | translate\r\n                  }}\r\n                </span>\r\n              </a>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"navbar-end\">\r\n        <div class=\"navbar-item\">\r\n          <div class=\"buttons\">\r\n            <ng-container *ngIf=\"isUpdateAvailable$ | async\">\r\n              <a class=\"button is-info is-hidden-touch\" (click)=\"applyUpdate()\">\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faSync\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.update</span>\r\n              </a>\r\n              <a\r\n                class=\"button is-info is-fullwidth is-hidden-desktop\"\r\n                (click)=\"applyUpdate()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faSync\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.update</span>\r\n              </a>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"isAppInstallable$ | async\">\r\n              <a\r\n                class=\"button is-primary is-hidden-touch\"\r\n                (click)=\"triggerInstallPrompt()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faArrowCircleDown\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.install</span>\r\n              </a>\r\n              <a\r\n                class=\"button is-primary is-fullwidth is-hidden-desktop\"\r\n                (click)=\"triggerInstallPrompt()\"\r\n              >\r\n                <span class=\"icon\">\r\n                  <fa-icon [icon]=\"faArrowCircleDown\"></fa-icon>\r\n                </span>\r\n                <span translate>shell.header.install</span>\r\n              </a>\r\n            </ng-container>\r\n            <a\r\n              class=\"button is-outlined is-dark is-hidden-touch\"\r\n              href=\"https://docs.models4insight.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span class=\"icon\"> <fa-icon [icon]=\"faBook\"></fa-icon> </span>\r\n              <span translate>shell.header.documentation</span>\r\n            </a>\r\n            <a\r\n              class=\"button is-outlined is-dark is-fullwidth is-hidden-desktop\"\r\n              href=\"https://docs.models4insight.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span class=\"icon\"> <fa-icon [icon]=\"faBook\"></fa-icon> </span>\r\n              <span translate>shell.header.documentation</span>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- Language selection -->\r\n      <ng-container *ngIf=\"supportedLanguages$ | async as supportedLanguages\">\r\n        <ng-container *ngIf=\"supportedLanguages.length > 1\">\r\n          <div class=\"navbar-item has-dropdown is-hoverable\">\r\n            <a class=\"navbar-link\">\r\n              <span>\r\n                <span translate>shell.header.language</span>\r\n                <span>&nbsp;</span>\r\n                <strong>{{ currentLanguage$ | async }}</strong>\r\n              </span>\r\n            </a>\r\n            <div class=\"navbar-dropdown\">\r\n              <a\r\n                class=\"navbar-item\"\r\n                *ngFor=\"let language of supportedLanguages$ | async\"\r\n                (click)=\"setLanguage(language)\"\r\n              >\r\n                {{ language }}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <!-- User account-->\r\n      <div\r\n        *ngIf=\"credentials$ | async as credentials\"\r\n        class=\"navbar-item has-dropdown is-hoverable\"\r\n      >\r\n        <a class=\"navbar-link\">\r\n          <span>\r\n            <span translate>shell.header.welcome</span>\r\n            <span>&nbsp;</span>\r\n            <strong>{{ credentials.username || credentials.email }}</strong>\r\n          </span>\r\n        </a>\r\n        <div class=\"navbar-dropdown\">\r\n          <a\r\n            role=\"button\"\r\n            class=\"navbar-item\"\r\n            (click)=\"accountManagement()\"\r\n            translate\r\n            >shell.header.security</a\r\n          >\r\n          <hr class=\"navbar-divider\" />\r\n          <a role=\"button\" class=\"navbar-item\" (click)=\"logout()\" translate\r\n            >shell.header.logout</a\r\n          >\r\n        </div>\r\n      </div>\r\n      <!-- Models4Insight apps-->\r\n      <div class=\"navbar-item has-dropdown is-hoverable\">\r\n        <a class=\"navbar-link is-arrowless\">\r\n          <span class=\"icon is-large is-hidden-touch\">\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\r\n          </span>\r\n          <span class=\"is-hidden-desktop\" translate>shell.header.services</span>\r\n        </a>\r\n        <div class=\"navbar-dropdown is-right\">\r\n          <a\r\n            *models4insight-feature=\"Feature.PLATFORM_ACCESS\"\r\n            href=\"/platform\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/m4i-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Platform\r\n            </span>\r\n          </a>\r\n          <a\r\n            *models4insight-feature=\"Feature.DATA2MODEL_ACCESS\"\r\n            href=\"/data2model\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/d2m-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Data2Model\r\n            </span>\r\n          </a>\r\n          <a\r\n            *models4insight-feature=\"Feature.ANALYTICS_ACCESS\"\r\n            href=\"/consistency_metrics\"\r\n            class=\"navbar-item\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <span class=\"icon is-medium\">\r\n              <img src=\"assets/m4i-icon.png\" />\r\n            </span>\r\n            <span>\r\n              Analytics\r\n            </span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ShellService } from '../shell.service';\n\n@Component({\n  selector: 'models4insight-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements OnInit {\n  isActive$: Observable<boolean>;\n\n  constructor(private shellService: ShellService) {}\n\n  ngOnInit() {\n    this.isActive$ = this.shellService.select('isNavigating');\n  }\n}\n","<progress *ngIf=\"(isActive$ | async)\" class=\"progress is-link\" max=\"100\"></progress>\n","import { Component, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { faArrowRight, faBug } from '@fortawesome/free-solid-svg-icons';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { StoreService } from '@models4insight/redux';\r\nimport { reportError } from '@models4insight/repository';\r\nimport { TaskContext, TaskManagerService, TaskState } from '@models4insight/task-manager';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { VersionService } from '@models4insight/version';\r\nimport { Subject } from 'rxjs';\r\nimport { exhaustMap } from 'rxjs/operators';\r\nimport { ShellConfig, ShellConfigService } from '../../shell-config.service';\r\n\r\n@Component({\r\n  selector: 'models4insight-pipeline-task',\r\n  templateUrl: './pipeline-task.component.html',\r\n  styleUrls: ['./pipeline-task.component.scss']\r\n})\r\nexport class PipelineTaskComponent implements OnInit, OnDestroy {\r\n  readonly TaskState = TaskState;\r\n\r\n  readonly faArrowRight = faArrowRight;\r\n  readonly faBug = faBug;\r\n\r\n  private readonly report$: Subject<void> = new Subject<void>();\r\n\r\n  isReporting = false;\r\n  hasBeenReported = false;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private taskManager: TaskManagerService,\r\n    private storeService: StoreService,\r\n    private versionService: VersionService,\r\n    @Optional() @Inject(ShellConfigService) private config: ShellConfig = {}\r\n  ) {}\r\n\r\n  @Input() task: TaskContext;\r\n\r\n  ngOnInit() {\r\n    this.report$\r\n      .pipe(\r\n        exhaustMap(() => this.handleReportError()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  clear() {\r\n    this.taskManager.clearTask(this.task.id);\r\n  }\r\n\r\n  navigate() {\r\n    const { route, relativeTo } = this.task.currentNavigationContext;\r\n    this.router\r\n      .navigate(route, { relativeTo: relativeTo })\r\n      .then(() => this.clear());\r\n  }\r\n\r\n  report() {\r\n    this.report$.next();\r\n  }\r\n\r\n  private async handleReportError() {\r\n    this.isReporting = true;\r\n\r\n    const username = await this.authenticationService.get([\r\n      'credentials',\r\n      'username'\r\n    ]);\r\n\r\n    try {\r\n      await reportError(\r\n        this.config.appName,\r\n        this.versionService.appVersion,\r\n        this.task.error,\r\n        username,\r\n        this.storeService.snapshot\r\n      ).toPromise();\r\n    } finally {\r\n      this.hasBeenReported = true;\r\n      this.isReporting = false;\r\n    }\r\n  }\r\n}\r\n","<article\n  *ngIf=\"\n    task &&\n    ((task.currentState === TaskState.RUNNING && !task.options.isQuiet) ||\n      (task.currentState == TaskState.INTERRUPTED && !task.options.isQuiet) ||\n      (task.currentState === TaskState.DONE && !task.options.clearOnSuccess) ||\n      (task.currentState === TaskState.ERROR && !task.options.clearOnError))\n  \"\n  class=\"message\"\n  [ngClass]=\"{\n    'is-success':\n      task.currentState === TaskState.RUNNING ||\n      task.currentState === TaskState.DONE,\n    'is-warning': task.currentState === TaskState.INTERRUPTED,\n    'is-danger': task.currentState === TaskState.ERROR\n  }\"\n  role=\"alert\"\n>\n  <div class=\"message-body has-background-light\">\n    <div class=\"columns is-mobile\">\n      <div class=\"column is-vcentered\">\n        <ng-container\n          *ngIf=\"\n            task.currentState === TaskState.RUNNING ||\n            task.currentState === TaskState.INTERRUPTED\n          \"\n        >\n          <div class=\"content\">{{ task.currentOperation.description }}</div>\n        </ng-container>\n        <ng-container *ngIf=\"task.currentState === TaskState.ERROR\">\n          <div class=\"content\">\n            <span>\n              <strong translate>shell.pipeline.oops</strong>\n              <span>&nbsp;</span>\n              <ng-container *ngIf=\"!task.options.showDetailedErrorDescription\">\n                <span translate>shell.pipeline.error</span>\n                {{ task.currentOperation.description | lowercase }}\n              </ng-container>\n              <ng-container *ngIf=\"task.options.showDetailedErrorDescription\">\n                {{ task.error }}\n                {{ task.error?.message }}\n              </ng-container>\n            </span>\n          </div>\n        </ng-container>\n      </div>\n      <ng-container\n        *ngIf=\"\n          task.currentState === TaskState.ERROR ||\n          task.currentState === TaskState.INTERRUPTED ||\n          task.currentState === TaskState.DONE\n        \"\n      >\n        <div class=\"column is-narrow is-vcentered\">\n          <div class=\"buttons\">\n            <ng-container *ngIf=\"task.currentState === TaskState.ERROR\">\n              <a\n                class=\"button is-danger\"\n                (click)=\"report()\"\n                [ngClass]=\"{\n                  'is-loading': isReporting,\n                  'is-static': hasBeenReported\n                }\"\n              >\n                <ng-container *ngIf=\"!hasBeenReported\">\n                  <span class=\"icon\">\n                    <fa-icon [icon]=\"faBug\"></fa-icon>\n                  </span>\n                  <span translate>shell.pipeline.report</span>\n                </ng-container>\n                <ng-container *ngIf=\"hasBeenReported\">\n                  <span translate>shell.pipeline.thanks</span>\n                </ng-container>\n              </a>\n            </ng-container>\n            <ng-container *ngIf=\"task.currentState === TaskState.INTERRUPTED\">\n              <ng-container\n                *ngIf=\"task.currentNavigationContext as navigationContext\"\n              >\n                <a class=\"button is-warning\" (click)=\"navigate()\">\n                  <span class=\"icon\">\n                    <fa-icon [icon]=\"faArrowRight\"></fa-icon>\n                  </span>\n                </a>\n              </ng-container>\n            </ng-container>\n            <a class=\"delete\" (click)=\"clear()\"></a>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"task.currentState === TaskState.RUNNING\">\n      <ng-container *ngIf=\"task.operations.length > 1\">\n        <progress\n          class=\"progress is-success\"\n          [value]=\"(task.currentOperation.index / task.operations.length) * 100\"\n          max=\"100\"\n        >\n        </progress>\n      </ng-container>\n      <ng-container *ngIf=\"task.operations.length === 1\">\n        <progress class=\"progress is-success\" max=\"100\"></progress>\n      </ng-container>\n    </ng-container>\n  </div>\n</article>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  TaskContext,\n  TaskManagerService,\n  TaskState\n} from '@models4insight/task-manager';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'models4insight-pipeline',\n  templateUrl: './pipeline.component.html',\n  styleUrls: ['./pipeline.component.css']\n})\nexport class PipelineComponent implements OnInit {\n  tasks$: Observable<TaskContext[]>;\n\n  constructor(private taskManager: TaskManagerService) {}\n\n  ngOnInit() {\n    // Select the tasks from the task manager that are not pending\n    this.tasks$ = this.taskManager\n      .select('tasks')\n      .pipe(\n        map(tasks =>\n          Object.values(tasks).filter(\n            task => task.currentState !== TaskState.PENDING\n          )\n        )\n      );\n  }\n}\n","<models4insight-pipeline-task\r\n  *ngFor=\"let task of (tasks$ | async)\"\r\n  [task]=\"task\"\r\n></models4insight-pipeline-task>\r\n","import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void {}\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig || future.data.reuse;\n  }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ShellConfig {\r\n  readonly appLogoPath?: string;\r\n  readonly appName?: string;\r\n  readonly appCopyright?: number;\r\n}\r\n\r\nexport const ShellConfigService = new InjectionToken<ShellConfig>(\r\n  'ShellConfig'\r\n);\r\n","import { Component, HostListener } from '@angular/core';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { ShellService } from './shell.service';\r\n\r\nconst log = new Logger('ShellComponent');\r\n\r\n@Component({\r\n  selector: 'models4insight-shell',\r\n  templateUrl: './shell.component.html',\r\n  styleUrls: ['./shell.component.scss']\r\n})\r\nexport class ShellComponent {\r\n  constructor(private shellService: ShellService) {}\r\n\r\n  /** Scroll to the top of the page whenever a new component is loaded */\r\n  onActivate(): void {\r\n    const scrollToTop = window.setInterval(() => {\r\n      const pos = window.pageYOffset;\r\n      if (pos > 0) {\r\n        window.scrollTo(0, pos - 20); // how far to scroll on each step\r\n      } else {\r\n        window.clearInterval(scrollToTop);\r\n      }\r\n    }, 16);\r\n  }\r\n  \r\n  /**\r\n   * Triggers a check whether the current authentication token is still valid whenever the user (re-)focusses the shell\r\n   */\r\n  @HostListener('window:focus')\r\n  onFocus(): void {\r\n    this.shellService.updateToken();\r\n  }\r\n}\r\n","<models4insight-header></models4insight-header>\r\n<div class=\"sticky\" [style.width]=\"'100%'\">\r\n  <models4insight-loading></models4insight-loading>\r\n  <models4insight-pipeline></models4insight-pipeline>\r\n</div>\r\n<div class=\"is-tall-container has-background-light\">\r\n  <router-outlet (activate)=\"onActivate()\"></router-outlet>\r\n</div>\r\n<models4insight-footer></models4insight-footer>\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouteReuseStrategy, RouterModule } from '@angular/router';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { I18nService } from '@models4insight/i18n';\r\nimport { FeatureModule } from '@models4insight/permissions';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport enUS from '../translations/en-US.json';\r\nimport { FooterComponent } from './footer/footer.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { LoadingComponent } from './loading/loading.component';\r\nimport { PipelineTaskComponent } from './pipeline/pipeline-task/pipeline-task.component';\r\nimport { PipelineComponent } from './pipeline/pipeline.component';\r\nimport { RouteReusableStrategy } from './route-reusable-strategy';\r\nimport { ShellConfig, ShellConfigService } from './shell-config.service';\r\nimport { ShellComponent } from './shell.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FeatureModule,\r\n    FontAwesomeModule,\r\n    RouterModule,\r\n    TranslateModule.forChild(),\r\n  ],\r\n  declarations: [\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    ShellComponent,\r\n    LoadingComponent,\r\n    PipelineComponent,\r\n    PipelineTaskComponent\r\n  ]\r\n})\r\nexport class ShellModule {\r\n  constructor(\r\n    private i18nService: I18nService,\r\n  ) {\r\n    this.i18nService.setTranslation('en-US', enUS);\r\n  }\r\n\r\n  static forRoot(\r\n    config: ShellConfig = {}\r\n  ): ModuleWithProviders<ShellModule> {\r\n    return {\r\n      ngModule: ShellModule,\r\n      providers: [\r\n        {\r\n          provide: ShellConfigService,\r\n          useValue: config\r\n        },\r\n        {\r\n          provide: RouteReuseStrategy,\r\n          useClass: RouteReusableStrategy\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Event as RouterNavigationEvent, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Route, Router } from '@angular/router';\r\nimport { SwUpdate } from '@angular/service-worker';\r\nimport { AuthenticationService } from '@models4insight/authentication';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { combineLatest, ConnectableObservable, fromEvent, Subject } from 'rxjs';\r\nimport { concatMap, exhaustMap, filter, pairwise, publish, switchMap, tap } from 'rxjs/operators';\r\n\r\nconst log = new Logger('ShellService');\r\n\r\n/**\r\n * The BeforeInstallPromptEvent is fired at the Window.onbeforeinstallprompt handler\r\n * before a user is prompted to \"install\" a web site to a home screen on mobile.\r\n *\r\n * @deprecated Only supported on Chrome and Android Webview.\r\n */\r\ninterface BeforeInstallPromptEvent extends Event {\r\n  /**\r\n   * Returns an array of DOMString items containing the platforms on which the event was dispatched.\r\n   * This is provided for user agents that want to present a choice of versions to the user such as,\r\n   * for example, \"web\" or \"play\" which would allow the user to chose between a web version or\r\n   * an Android version.\r\n   */\r\n  readonly platforms: Array<string>;\r\n\r\n  /**\r\n   * Returns a Promise that resolves to a DOMString containing either \"accepted\" or \"dismissed\".\r\n   */\r\n  readonly userChoice: Promise<{\r\n    outcome: 'accepted' | 'dismissed';\r\n    platform: string;\r\n  }>;\r\n\r\n  /**\r\n   * Allows a developer to show the install prompt at a time of their own choosing.\r\n   * This method returns a Promise.\r\n   */\r\n  prompt(): Promise<void>;\r\n}\r\n\r\nexport interface ShellStoreContext {\r\n  readonly isAppInstallable?: boolean;\r\n  readonly isNavigating?: boolean;\r\n  readonly isUpdateAvailable?: boolean;\r\n  readonly previousRoute?: string;\r\n  readonly routes?: Route[];\r\n}\r\n\r\nexport const shellServiceDefaultState: ShellStoreContext = {\r\n  isAppInstallable: false,\r\n  isNavigating: false,\r\n  isUpdateAvailable: false\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellService extends BasicStore<ShellStoreContext>\r\n  implements OnDestroy {\r\n  private readonly applyUpdate$: Subject<void> = new Subject<void>();\r\n  private readonly installApp$: Subject<void> = new Subject<void>();\r\n  private readonly updateToken$: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly authenticationService: AuthenticationService,\r\n    private readonly router: Router,\r\n    private readonly swUpdate: SwUpdate,\r\n    storeService: StoreService\r\n  ) {\r\n    super({\r\n      defaultState: shellServiceDefaultState,\r\n      name: 'ShellService',\r\n      storeService\r\n    });\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  private init() {\r\n    // These are the top level routes of the application which are not configured to be hidden and are not redirects\r\n    const routes = this.router.config.filter(\r\n      route =>\r\n        route.redirectTo === undefined && !(route.data && route.data.hidden)\r\n    );\r\n\r\n    // Update the store with the routes found\r\n    this.update({\r\n      description: 'New top level routes available',\r\n      payload: { routes }\r\n    });\r\n\r\n    // Whenever update token fires, update the authentication token\r\n    this.updateToken$\r\n      .pipe(\r\n        exhaustMap(() => this.authenticationService.updateToken()),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe(() => log.debug('Authentication token successfully updated'));\r\n\r\n    // Intercept router navigation events\r\n    this.router.events\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(event => this.navigationInterceptor(event));\r\n\r\n    // Track the previous page route for go back functionality\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        pairwise(),\r\n        concatMap(([previousRoute, currentRoute]) =>\r\n          this.handleTrackPreviousRoute(\r\n            previousRoute as NavigationEnd,\r\n            currentRoute as NavigationEnd\r\n          )\r\n        ),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n\r\n    // Handle service worker triggers if the service worker is enabled\r\n    if (this.swUpdate.isEnabled) {\r\n      // Check whether an update is available\r\n      this.swUpdate.available.pipe(untilDestroyed(this)).subscribe(event =>\r\n        this.update({\r\n          description: 'Service worker update available',\r\n          payload: {\r\n            isUpdateAvailable: !!event\r\n          }\r\n        })\r\n      );\r\n\r\n      // When the user applies an update, activate the update and reload the page\r\n      this.applyUpdate$\r\n        .pipe(\r\n          exhaustMap(() => this.swUpdate.activateUpdate()),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(() => document.location.reload());\r\n\r\n      // Check for updates on startup\r\n      this.swUpdate.checkForUpdate();\r\n\r\n      const beforeInstallPrompt$ = fromEvent<BeforeInstallPromptEvent>(\r\n        window,\r\n        'beforeinstallprompt'\r\n      ).pipe(publish()) as ConnectableObservable<BeforeInstallPromptEvent>;\r\n\r\n      beforeInstallPrompt$\r\n        .pipe(\r\n          tap(() =>\r\n            this.update({\r\n              description: 'App is installable',\r\n              payload: {\r\n                isAppInstallable: true\r\n              }\r\n            })\r\n          ),\r\n          switchMap(event => event.userChoice),\r\n          tap(() =>\r\n            this.update({\r\n              description: 'User decided whether or not to install the app',\r\n              payload: {\r\n                isAppInstallable: false\r\n              }\r\n            })\r\n          ),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(decision =>\r\n          log.debug(`App install outcome: ${decision.outcome}`)\r\n        );\r\n\r\n      // Prompt the user to install the app\r\n      combineLatest([beforeInstallPrompt$, this.installApp$])\r\n        .pipe(\r\n          exhaustMap(([event]) => event.prompt()),\r\n          untilDestroyed(this)\r\n        )\r\n        .subscribe(() => log.debug('User prompted to intall the app'));\r\n\r\n      beforeInstallPrompt$.connect();\r\n    }\r\n  }\r\n\r\n  applyUpdate() {\r\n    this.applyUpdate$.next();\r\n  }\r\n\r\n  installApp() {\r\n    this.installApp$.next();\r\n  }\r\n\r\n  updateToken() {\r\n    this.updateToken$.next();\r\n  }\r\n\r\n  private async handleTrackPreviousRoute(\r\n    previousRoute: NavigationEnd,\r\n    currentRoute: NavigationEnd\r\n  ) {\r\n    const [previousPath] = previousRoute.urlAfterRedirects.split('?'),\r\n      [currentPath] = currentRoute.urlAfterRedirects.split('?');\r\n\r\n    if (previousPath === currentPath) return;\r\n\r\n    this.update({\r\n      description: 'New previous route available',\r\n      payload: { previousRoute: previousRoute.urlAfterRedirects }\r\n    });\r\n  }\r\n\r\n  private navigationInterceptor(event: RouterNavigationEvent) {\r\n    if (event instanceof NavigationStart) {\r\n      this.update({\r\n        description: 'Navigation start',\r\n        payload: {\r\n          isNavigating: true\r\n        }\r\n      });\r\n    } else if (\r\n      event instanceof NavigationEnd ||\r\n      event instanceof NavigationCancel ||\r\n      event instanceof NavigationError\r\n    ) {\r\n      this.update({\r\n        description: 'Navigation complete',\r\n        payload: {\r\n          isNavigating: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Route, Routes } from '@angular/router';\r\nimport { AuthenticationGuard } from '@models4insight/authentication';\r\nimport { ShellComponent } from './shell.component';\r\n\r\n/**\r\n * Provides helper methods to create routes.\r\n */\r\nexport class Shell {\r\n  /**\r\n   * Creates routes using the shell component and authentication.\r\n   * @param routes The routes to add.\r\n   * @return The new route using shell as the base.\r\n   */\r\n  static childRoutes(routes: Routes): Route {\r\n    return {\r\n      path: '',\r\n      component: ShellComponent,\r\n      children: routes,\r\n      canActivate: [AuthenticationGuard],\r\n      // Reuse ShellComponent instance when navigating between child views\r\n      data: { reuse: true }\r\n    };\r\n  }\r\n}\r\n","export * from './lib/decorators';\nexport * from './lib/task-manager.module';\nexport * from './lib/task-manager.service';\n\n","import { throwError } from 'rxjs';\r\nimport { TaskManagerModule } from './task-manager.module';\r\nimport { TaskManagerService, TaskOptions } from './task-manager.service';\r\n\r\nfunction createOperation(original: any, args: any, thisArg: any) {\r\n  try {\r\n    return original.apply(thisArg, args);\r\n  } catch (e) {\r\n    return throwError(e);\r\n  }\r\n}\r\n\r\nfunction getTaskManagerService(): TaskManagerService {\r\n  if (!TaskManagerModule.injector) {\r\n    throw new Error(\r\n      'Tried running a managed task while the TaskManager module was not loaded. Please make sure the Task Manager module is imported.'\r\n    );\r\n  }\r\n  return TaskManagerModule.injector.get(TaskManagerService);\r\n}\r\n\r\n/**\r\n * Method decorator for functions returning an observable.\r\n * Registers the observable returned by the function as a managed task with the Task Manager.\r\n * Returns the executable of the Task instead.\r\n *\r\n * Use this decorator whenever you need to define a task with a single step.\r\n */\r\nexport function ManagedTask(description?: string, options?: TaskOptions) {\r\n  return function(\r\n    target: Object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor\r\n  ) {\r\n    const original = descriptor.value;\r\n    descriptor.value = async function(...args: any[]) {\r\n      const taskManagerService = getTaskManagerService();\r\n\r\n      const operation = {\r\n        operation: createOperation(original, args, this),\r\n        description: description\r\n      };\r\n\r\n      const task = taskManagerService.createTask([operation], options);\r\n\r\n      const executable = await task.getExecutable();\r\n\r\n      return executable.toPromise();\r\n    };\r\n    \r\n    return descriptor;\r\n  };\r\n}\r\n","import { Injector, NgModule, SkipSelf, Optional } from '@angular/core';\r\n\r\n@NgModule()\r\nexport class TaskManagerModule {\r\n  static injector: Injector;\r\n\r\n  constructor(\r\n    injector: Injector,\r\n    @Optional() @SkipSelf() parentModule: TaskManagerModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'TaskManagerModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    TaskManagerModule.injector = injector;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Logger } from '@models4insight/logger';\r\nimport { BasicStore, StoreService } from '@models4insight/redux';\r\nimport { untilDestroyed } from '@models4insight/utils';\r\nimport { Dictionary } from 'lodash';\r\nimport { EMPTY, from, Observable, of, range, Subject, zip, race } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  shareReplay,\r\n  switchMap,\r\n  switchMapTo,\r\n  takeLast,\r\n  takeUntil,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { TaskManagerModule } from './task-manager.module';\r\n\r\nconst log = new Logger('TaskManager');\r\n\r\nexport interface OperationContext {\r\n  readonly operation: Observable<any> | Promise<any>;\r\n  readonly description?: string;\r\n}\r\n\r\nexport interface CurrentOperationContext {\r\n  readonly description?: string;\r\n  readonly index?: number;\r\n}\r\n\r\nexport interface TaskNavigationContext {\r\n  readonly relativeTo?: ActivatedRoute;\r\n  readonly route: string[];\r\n}\r\n\r\nexport interface TaskOptions {\r\n  /**\r\n   * Whether or not to clear the task if it completes with an error. Defaults to false.\r\n   */\r\n  readonly clearOnError?: boolean;\r\n  /**\r\n   * Whether or not to clear the task if it completes successfully. Defaults to true.\r\n   */\r\n  readonly clearOnSuccess?: boolean;\r\n  /**\r\n   * Whether or not to hide the progress bar while the task is in progress. Defaults to false.\r\n   */\r\n  readonly isQuiet?: boolean;\r\n  /**\r\n   * When set, navigate to the given route if the task completes with an error\r\n   */\r\n  readonly navigateOnError?: TaskNavigationContext;\r\n  /**\r\n   * When set, navigate to the given route if the task completes successfully\r\n   */\r\n  readonly navigateOnSuccess?: TaskNavigationContext;\r\n  /**\r\n   * Whether or not to show the original error message when an error occurs. Defaults to false.\r\n   */\r\n  readonly showDetailedErrorDescription?: boolean;\r\n}\r\n\r\nexport interface TaskContext {\r\n  readonly currentOperation?: CurrentOperationContext;\r\n  readonly currentState?: TaskState;\r\n  readonly currentNavigationContext?: TaskNavigationContext;\r\n  readonly error?: Error;\r\n  readonly id?: string;\r\n  readonly operations?: OperationContext[];\r\n  readonly options?: TaskOptions;\r\n}\r\n\r\nexport interface TaskManagerStoreContext {\r\n  readonly tasks?: Dictionary<TaskContext>;\r\n}\r\n\r\nexport enum TaskState {\r\n  PENDING = 'pending',\r\n  RUNNING = 'running',\r\n  DONE = 'done',\r\n  ERROR = 'error',\r\n  INTERRUPTED = 'interrupted'\r\n}\r\n\r\nexport const defaultTaskOptions: TaskOptions = {\r\n  clearOnError: false,\r\n  clearOnSuccess: true,\r\n  isQuiet: false,\r\n  showDetailedErrorDescription: false\r\n};\r\n\r\nexport class Task {\r\n  private readonly interrupt$ = new Subject<void>();\r\n\r\n  constructor(\r\n    public id: string,\r\n    private managedBy: TaskManagerService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async addOperation(operation: OperationContext) {\r\n    const operations = await this.managedBy.get(\r\n      ['tasks', this.id, 'operations'],\r\n      { includeFalsy: true }\r\n    );\r\n\r\n    this.managedBy.update({\r\n      description: `Added an operation for task ${this.id}`,\r\n      path: ['tasks', this.id, 'operations'],\r\n      payload: [...operations, operation]\r\n    });\r\n  }\r\n\r\n  /** Interrupts the task if it is currently running */\r\n  interrupt() {\r\n    this.interrupt$.next();\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} was interrupted`,\r\n      path: ['tasks', this.id, 'currentState'],\r\n      payload: TaskState.INTERRUPTED\r\n    });\r\n  }\r\n\r\n  /** Returns an executable of this task */\r\n  async getExecutable() {\r\n    const task = await this.managedBy.get(['tasks', this.id]);\r\n\r\n    const onStart = () =>\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} started`,\r\n        path: ['tasks', task.id, 'currentState'],\r\n        payload: TaskState.RUNNING\r\n      });\r\n\r\n    const pipeline = zip(\r\n      range(0, task.operations.length),\r\n      from(task.operations)\r\n    ).pipe(\r\n      // Execute each operation sequentially. Ensure each task completes by only taking at most one emission from the stream\r\n      concatMap(([index, operation]) =>\r\n        this.handleOperation(task.id, operation, index)\r\n      ),\r\n      takeLast(1)\r\n    );\r\n\r\n    const onComplete = () => {\r\n      this.managedBy.update({\r\n        description: `Task ${this.id} completed`,\r\n        path: ['tasks', this.id, 'currentState'],\r\n        payload: TaskState.DONE\r\n      });\r\n      this.finalize(task);\r\n    };\r\n\r\n    const onInterrupt = () => {\r\n      this.managedBy.update({\r\n        description: `Task ${this.id} interrupted`,\r\n        path: ['tasks', this.id, 'currentState'],\r\n        payload: TaskState.INTERRUPTED\r\n      });\r\n    };\r\n\r\n    const onError = (error: Error) => {\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} encountered an error`,\r\n        path: ['tasks', task.id, 'error'],\r\n        payload: error\r\n      });\r\n      this.managedBy.update({\r\n        description: `Task ${task.id} completed with an error`,\r\n        path: ['tasks', task.id, 'currentState'],\r\n        payload: TaskState.ERROR\r\n      });\r\n      return EMPTY;\r\n    };\r\n\r\n    const interrupt = this.interrupt$.pipe(tap(onInterrupt));\r\n\r\n    const tasks = of(task).pipe(\r\n      tap(onStart),\r\n      switchMapTo(pipeline),\r\n      tap(onComplete),\r\n      catchError(onError)\r\n    );\r\n\r\n    const executable = race(tasks, interrupt);\r\n\r\n    return executable;\r\n  }\r\n\r\n  /**\r\n   * Can be used to override the description of the current operation\r\n   */\r\n  set currentDescription(description: string) {\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} description updated`,\r\n      path: ['tasks', this.id, 'currentOperation', 'description'],\r\n      payload: description\r\n    });\r\n  }\r\n\r\n  set currentNavigationContext(context: TaskNavigationContext) {\r\n    this.managedBy.update({\r\n      description: `Task ${this.id} navigation context updated`,\r\n      path: ['tasks', this.id, 'currentNavigationContext'],\r\n      payload: context\r\n    });\r\n  }\r\n\r\n  private finalize(task: TaskContext) {\r\n    // When the task completed successfully...\r\n    if (task.currentState === TaskState.DONE) {\r\n      if (task.options.navigateOnSuccess) {\r\n        this.navigate(task.options.navigateOnSuccess);\r\n      }\r\n    }\r\n    // When the task completed with an error...\r\n    if (task.currentState === TaskState.ERROR) {\r\n      if (task.options.navigateOnError) {\r\n        this.navigate(task.options.navigateOnError);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleOperation(\r\n    taskId: string,\r\n    operation: OperationContext,\r\n    index: number\r\n  ) {\r\n    this.managedBy.update({\r\n      description: 'Start executing operation',\r\n      path: ['tasks', taskId, 'currentOperation'],\r\n      payload: {\r\n        description: operation.description || `Step ${index}`,\r\n        index: index\r\n      }\r\n    });\r\n    return of(1).pipe(\r\n      tap(() => log.time(taskId, operation.description)),\r\n      switchMap(() => operation.operation),\r\n      tap(() => log.timeEnd(taskId, operation.description))\r\n    );\r\n  }\r\n\r\n  private navigate(context: TaskNavigationContext) {\r\n    this.router.navigate(context.route, { relativeTo: context.relativeTo });\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: TaskManagerModule\r\n})\r\nexport class TaskManagerService extends BasicStore<TaskManagerStoreContext> {\r\n  constructor(private router: Router, storeService: StoreService) {\r\n    super({ name: 'TaskManagerService', storeService });\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    // Clean up completed tasks that can be removed from the queue\r\n    this.watch('tasks')\r\n      .pipe(\r\n        concatMap(tasks => this.handleRemoveCompletedTasks(tasks)),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  createTask(\r\n    operations: OperationContext[] = [],\r\n    options: TaskOptions = {}\r\n  ): Task {\r\n    const taskId = uuid();\r\n\r\n    this.update({\r\n      description: `Task ${taskId} created`,\r\n      path: ['tasks', taskId],\r\n      payload: {\r\n        currentState: TaskState.PENDING,\r\n        id: taskId,\r\n        operations: operations,\r\n        options: { ...defaultTaskOptions, ...options }\r\n      }\r\n    });\r\n\r\n    return new Task(taskId, this, this.router);\r\n  }\r\n\r\n  clearTask(taskId: string) {\r\n    this.delete({\r\n      description: `Cleared task ${taskId}`,\r\n      path: ['tasks', taskId]\r\n    });\r\n  }\r\n\r\n  private async handleRemoveCompletedTasks(tasks: TaskContext[]) {\r\n    for (const task of tasks) {\r\n      const clearAfterError =\r\n          task.currentState === TaskState.ERROR && task.options.clearOnError,\r\n        clearAfterSuccess =\r\n          task.currentState === TaskState.DONE && task.options.clearOnSuccess;\r\n\r\n      if (clearAfterError || clearAfterSuccess) {\r\n        this.clearTask(task.id);\r\n      }\r\n    }\r\n  }\r\n}\r\n","export * from './lib/classes';\r\nexport * from './lib/functions';\r\nexport * from './lib/rxjs-operators';\r\nexport * from './lib/types';","import MultiMap from 'mnemonist/multi-map';\r\n\r\n/**\r\n * A multi-map implementation that also maintains a shadow copy mapping all values to their respective keys.\r\n */\r\nexport class BidirectionalMultiMap<K, V> {\r\n  readonly mapping: MultiMap<K, V>;\r\n  readonly inverse: MultiMap<V, K>;\r\n\r\n  constructor(container: ArrayConstructor | SetConstructor = Array) {\r\n    this.mapping = new MultiMap(container);\r\n    this.inverse = new MultiMap(container);\r\n  }\r\n\r\n  clear() {\r\n    this.inverse.clear();\r\n    this.mapping.clear();\r\n  }\r\n\r\n  delete(key: K) {\r\n    for (const value of this.mapping.get(key) ?? []) {\r\n      this.inverse.remove(value, key);\r\n    }\r\n    return this.mapping.delete(key);\r\n  }\r\n\r\n  remove(key: K, value: V) {\r\n    this.inverse.remove(value, key);\r\n    return this.mapping.remove(key, value);\r\n  }\r\n\r\n  set(key: K, value: V) {\r\n    this.inverse.set(value, key);\r\n    return this.mapping.set(key, value);\r\n  }\r\n}\r\n","import { isEqual, uniqWith } from 'lodash';\r\n\r\nexport class ComplexSet<T> {\r\n  private array: T[] = [];\r\n\r\n  /**\r\n   * Represents a `Set` with a custom comparator.\r\n   * This allows you to create sets of complex objects.\r\n   * The `isEqual` method from `lodash` is used by default.\r\n   *\r\n   * **IMPORTANT**: For primitive values, the built-in `Set` object is more efficient.\r\n   */\r\n  constructor(\r\n    /**\r\n     * This method determines whether or not an item is already present in the set.\r\n     * Defaults to the `isEqual` method from `lodash`.\r\n     */\r\n    private comparator: (item: T, otherItem: T) => boolean = isEqual\r\n  ) {}\r\n\r\n  /**\r\n   * Adds one or more additional values to the set.\r\n   * @param value the value(s) which should be added to the set.\r\n   */\r\n  add(value: T | T[]) {\r\n    if (!Array.isArray(value)) {\r\n      value = [value];\r\n    }\r\n    this.array = uniqWith([...this.array, ...value], this.comparator);\r\n  }\r\n\r\n  /**\r\n   * Returns the set as an an array of unique items\r\n   */\r\n  get items() {\r\n    return this.array;\r\n  }\r\n}\r\n","/** Custom error base class that allows instanceof checking */\r\nexport abstract class CustomError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    // Set the prototype explicitly\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n","export * from './bidirectional-multi-map';\r\nexport * from './complex-set';\r\nexport * from './custom-error';\r\nexport * from './stream';\r\n","import { isEqual } from 'lodash';\r\n\r\n/**\r\n * Sequence based on an Iterator that supports sequential operations similar to an `Array`.\r\n *\r\n * To perform a computation, stream operations are composed into a stream pipeline.\r\n * A stream pipeline consists of:\r\n *\r\n * - A single source (e.g. a `Function` that supplies an `Iterable`, or a `Generator` function)\r\n * - Zero or more intermediate operations (which transform the `Stream` into another `Stream`)\r\n * - A single terminal operation (which produces a result or side-effect)\r\n *\r\n * It is not required to end a stream pipeline with a terminal operation provided by this class.\r\n * A `Stream` can be consumed like any regular `Iterable`, e.g. using a `for...of` loop.\r\n *\r\n * Streams are lazy.\r\n * Computation on the source data is only performed when the terminal operation is initiated.\r\n * Source elements are consumed only as needed.\r\n */\r\nexport class Stream<T> implements Iterable<T> {\r\n  public [Symbol.iterator]: () => Iterator<T>;\r\n\r\n  constructor(source: () => Iterator<T>) {\r\n    this[Symbol.iterator] = source;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of all elements of the given `source`.\r\n   * @param source The source of the stream.\r\n   */\r\n  static from<T>(source: Iterable<T>): Stream<T> {\r\n    function* from() {\r\n      yield* source;\r\n    }\r\n    return new Stream<T>(from);\r\n  }\r\n\r\n  /**\r\n   * Reduces the elements of this stream using the given `collector`.\r\n   * @param collector the `Function` describing the reduction\r\n   */\r\n  collect<R>(collector: (stream: this) => R): R {\r\n    return collector(this);\r\n  }\r\n\r\n  /**\r\n   * Returns a lazily concatenated `Stream` whose elements are all the elements of this stream followed by all the elements of the given `iterables`.\r\n   * @param iterables The iterables that should be concatenated to this stream.\r\n   */\r\n  concat<R>(...iterables: Iterable<R>[]) {\r\n    function* concat(base: Iterable<T>) {\r\n      yield* base;\r\n      for (const iterable of iterables) {\r\n        yield* iterable;\r\n      }\r\n    }\r\n    return new Stream(() => concat(this));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the unique elements of this stream.\r\n   * @param comparator Function that returns `true` if two stream elements are the same. Defaults to `isEqual`.\r\n   */\r\n  distinct(comparator: (item: T, other: T) => boolean = isEqual) {\r\n    function* distinct(iterable: Iterable<T>) {\r\n      const seenItems = [];\r\n      for (const item of iterable) {\r\n        const hasBeenSeen = seenItems.some(seen => comparator(item, seen));\r\n        if (!hasBeenSeen) {\r\n          yield item;\r\n          seenItems.push(item);\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => distinct(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether all elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  every(predicate: (item?: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (!predicate(item)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the elements of this stream that match the given `predicate`.\r\n   * @param predicate The filter condition.\r\n   */\r\n  filter(predicate: (item?: T) => boolean): Stream<T> {\r\n    function* filter(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        if (predicate(item)) {\r\n          yield item;\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => filter(this));\r\n  }\r\n\r\n  /**\r\n   * Returns the first element of this stream that matches the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  find(predicate: (item: T) => boolean): T {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return item;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the first element of this stream.\r\n   */\r\n  first(): T {\r\n    for (const item of this) {\r\n      return item;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the results of replacing each element of this stream with the contents of a mapped `Iterable` produced by applying the provided `projection` to each element.\r\n   * @param projection The function to apply to each element of this stream.\r\n   */\r\n  flatMap<R>(projection: (item?: T) => Iterable<R>): Stream<R> {\r\n    function* map(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        yield* projection(item);\r\n      }\r\n    }\r\n    return new Stream(() => map(this));\r\n  }\r\n\r\n  /**\r\n   * Performs an action for each element of this stream.\r\n   * @param effect The action to perform.\r\n   */\r\n  forEach(effect: (item?: T) => void) {\r\n    for (const item of this) {\r\n      effect(item);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retruns a `Stream` consisting of the results of applying the given `projection` to the elements of this stream.\r\n   * @param projection The function to apply to each element of this stream.\r\n   */\r\n  map<R>(projection: (item?: T) => R): Stream<R> {\r\n    function* map(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        yield projection(item);\r\n      }\r\n    }\r\n    return new Stream(() => map(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether no elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  none(predicate: (item: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Accumulates the elements of this stream.\r\n   * @param accumulator The function that accumulates the elements of the stream.\r\n   * @param startWith The starting value of the accumulation.\r\n   */\r\n  reduce<R>(accumulator: (acc: R, item: T) => R, startWith: R): R {\r\n    let accumulation = startWith;\r\n    for (const item of this) {\r\n      accumulation = accumulator(accumulation, item);\r\n    }\r\n    return accumulation;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the remaining elements of this stream after discarding the first given `number` of elements.\r\n   * @param number The number of elements to skip.\r\n   */\r\n  skip(number: number): Stream<T> {\r\n    function* skip(iterable: Iterable<T>) {\r\n      let i = 0;\r\n      for (const item of iterable) {\r\n        if (i >= number) {\r\n          yield item;\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n    return new Stream(() => skip(this));\r\n  }\r\n\r\n  /**\r\n   * Returns whether any elements of this stream match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  some(predicate: (item?: T) => boolean): boolean {\r\n    for (const item of this) {\r\n      if (predicate(item)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the first given `number` of elements of this stream.\r\n   * @param number The number of elements to take.\r\n   */\r\n  take(number: number): Stream<T> {\r\n    function* take(iterable: Iterable<T>) {\r\n      let i = 0;\r\n      for (const item of iterable) {\r\n        yield item;\r\n        i++;\r\n        if (i >= number) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return new Stream(() => take(number > 0 ? this : []));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the first elements of this stream that match the given `predicate`.\r\n   * @param predicate The test condition.\r\n   */\r\n  takeUntil(predicate: (item?: T) => boolean): Stream<T> {\r\n    function* takeUntil(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        if (predicate(item)) {\r\n          break;\r\n        }\r\n        yield item;\r\n      }\r\n    }\r\n    return new Stream(() => takeUntil(this));\r\n  }\r\n\r\n  /**\r\n   * Returns a `Stream` consisting of the elements of this stream, additionally performing the given `effect` on each element.\r\n   * @param effect The effect to perform.\r\n   */\r\n  tap(effect: (item?: T) => void) {\r\n    function* tap(iterable: Iterable<T>) {\r\n      for (const item of iterable) {\r\n        effect(item);\r\n        yield item;\r\n      }\r\n    }\r\n    return new Stream(() => tap(this));\r\n  }\r\n\r\n  /**\r\n   * Retruns an `Array` containing the elements of this stream.\r\n   */\r\n  toArray(): T[] {\r\n    return Array.from(this);\r\n  }\r\n}\r\n","export function b64ToB64url(base64: string) {\r\n  return base64\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=/g, '');\r\n}\r\n","export function b64toBlob(base64: string, contentType = '', sliceSize = 512) {\r\n  const byteCharacters = atob(base64);\r\n  const byteArrays = [];\r\n\r\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n    const byteNumbers = new Array(slice.length);\r\n    for (let i = 0; i < slice.length; i++) {\r\n      byteNumbers[i] = slice.charCodeAt(i);\r\n    }\r\n\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    byteArrays.push(byteArray);\r\n  }\r\n\r\n  const blob = new Blob(byteArrays, { type: contentType });\r\n  return blob;\r\n}\r\n","export function b64urlToB64(base64url: string) {\r\n  return base64url.replace(/_/g, '/').replace(/-/g, '+');\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Helper function to create an object URL for the given function.\r\n * Useful for executing the given function as a web worker.\r\n * Use this as a workaround only if native web worker compilation with Angular is not available, e.g. in libraries.\r\n *\r\n * @param workerFunction The function for which to create an object url\r\n */\r\nexport function buildWorkerBlobURL(workerFunction: Function): string {\r\n  const functionName = workerFunction.name;\r\n\r\n  // Make sure code starts with \"function()\"\r\n  // Chrome, Firefox: \"[`functionName`](){...}\", Safari: \"function [`functionName`](){...}\"\r\n  // we need an anonymous function: \"function() {...}\"\r\n  const functionAsString = workerFunction.toString().replace(/^function +/, '');\r\n\r\n  // Convert to anonymous function\r\n  const anonymousFunctionString = functionAsString.replace(\r\n    functionName + '()',\r\n    'function()'\r\n  );\r\n\r\n  // Self executing\r\n  const workerString = '(' + anonymousFunctionString + ')();';\r\n\r\n  // Build the worker blob\r\n  const workerBlob = new Blob([workerString], { type: 'text/javascript' });\r\n\r\n  const workerBlobUrl = window.URL.createObjectURL(workerBlob);\r\n  return workerBlobUrl;\r\n}\r\n","/**\r\n * Converts a byte array to its UTF-16 string representation\r\n * @param bytes the byte array to convert\r\n * @param sliceSize the number of bytes to process per chunk\r\n */\r\nexport function bytesToBinaryString(bytes: Uint8Array, sliceSize = 512) {\r\n  const len = bytes.byteLength;\r\n  let binary = '';\r\n  for (let i = 0; i < len; i += sliceSize) {\r\n    binary += String.fromCharCode(...bytes.slice(i, i + sliceSize));\r\n  }\r\n  return binary;\r\n}\r\n","/**\r\n * Returns a function which replaces circular references in a JSON object\r\n */\r\nexport function circularReplacer() {\r\n  const seen = new WeakSet();\r\n  return (key: string, value: any) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (seen.has(value)) {\r\n        return;\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n","/**\r\n * Returns a `Generator` of all unique pairs of elements from the given `iterable`.\r\n * @param iterable The collection of which to find all unique element pairs.\r\n */\r\nexport function combinations<T>(iterable: Iterable<T>): Generator<[T, T]>;\r\n/**\r\n * Returns a `Generator` of all unique combinations with the given `length` of elements from the given `iterable`.\r\n * @param iterable The collection of which to find all unique element combinations with the given `length`.\r\n * @param length A positive number indicating the desired length of the returned combinations\r\n */\r\nexport function combinations<T>(\r\n  iterable: Iterable<T>,\r\n  length: number\r\n): Generator<T[]>;\r\nexport function* combinations<T>(\r\n  iterable: Iterable<T>,\r\n  length = 2\r\n): Generator<T[]> {\r\n  // If the desired length is 0, yield nothing\r\n  if (length === 0) return;\r\n\r\n  // Keep a record of the items we've seen so far to cut down on processing and avoid duplicate combinations\r\n  const seenItems = new Set<T>();\r\n\r\n  for (const currentItem of iterable) {\r\n    if (seenItems.has(currentItem)) continue;\r\n    if (length === 1) yield [currentItem];\r\n\r\n    // Concatenate the current item with combinations of the items that we've seen so far\r\n    // This will eventually result in all combinations for the current item\r\n    // The recursion stops when the desired length reaches 0\r\n    for (const combination of combinations(seenItems, length - 1)) {\r\n      yield [...combination, currentItem];\r\n    }\r\n\r\n    seenItems.add(currentItem);\r\n  }\r\n}\r\n","declare var document: any;\r\ndeclare var navigator: any;\r\n\r\nasync function fallbackCopyValueToClipboard(value: string) {\r\n  const textArea = document.createElement('textarea');\r\n  textArea.value = value;\r\n  textArea.style.position = 'fixed'; //avoid scrolling to bottom\r\n  document.body.appendChild(textArea);\r\n  textArea.focus();\r\n  textArea.select();\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      document.execCommand('copy')\r\n        ? resolve()\r\n        : reject(`Value ${value} could not be copied to the clipboard!`);\r\n    } catch (e) {\r\n      reject(e);\r\n    } finally {\r\n      document.body.removeChild(textArea);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Writes the given value to the clipboard.\r\n * @param value The value that should be written to the clipboard\r\n */\r\nexport async function copyToClipboard(value: string): Promise<void> {\r\n  // If the clipboard API is supported by the browser, use it.\r\n  // Otherwise, use a fallback method instead.\r\n  return navigator.clipboard\r\n    ? navigator.clipboard.writeText(value)\r\n    : fallbackCopyValueToClipboard(value);\r\n}\r\n","const specialCharactersMap = {\r\n  '&amp;': '&',\r\n  '&quot;': '\"',\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&#xA;': '\\n'\r\n};\r\n\r\nconst pattern = new RegExp(Object.keys(specialCharactersMap).join('|'), 'g');\r\n\r\nfunction replacer(specialCharacter: keyof typeof specialCharactersMap) {\r\n  return specialCharactersMap[specialCharacter];\r\n}\r\n\r\n/**\r\n * Replaces XML encoded characters in the given string with their respective decoded characters.\r\n * @param xml The string that contains XML encoded characters\r\n */\r\nexport function decodeXML(xml: string): string {\r\n  if (!xml) return xml;\r\n  return xml.replace(pattern, replacer);\r\n}\r\n","/**\r\n * Iterates over the given `items` and yields for every item a tuple of that item and its sequential index.\r\n * @param items The items to iterate over.\r\n */\r\nexport function* enumerate<T>(items: Iterable<T>): Generator<[T, number]> {\r\n  let index = 0;\r\n  for (const item of items) {\r\n    yield [item, index];\r\n    index++;\r\n  }\r\n}\r\n","/**\r\n * Returns the final item of the given `items` that matches the given `predicate`.\r\n * \r\n * @param items The data to search through\r\n * @param predicate The condition that the item should match\r\n */\r\nexport function findLast<T>(\r\n  [...items]: Iterable<T>,\r\n  predicate: (item: T) => boolean\r\n) {\r\n  for (let i = items.length - 1; i >= 0; i--) {\r\n    const item = items[i];\r\n    if (predicate(item)) {\r\n      return item;\r\n    }\r\n  }\r\n}\r\n","import { Dictionary, omit } from 'lodash';\r\nimport { union } from './union';\r\n\r\n/**\r\n * Returns a flattened representation of the given object\r\n */\r\nexport function flattenObject(\r\n  /** The object to flatten */\r\n  object: Dictionary<any>\r\n) {\r\n  let result = Object.assign({}, object);\r\n  Object.keys(object).forEach(key => {\r\n    const property = object[key];\r\n    if (typeof property === 'object') {\r\n      result = omit(union(result, flattenObject(property)), key);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n","import { Dictionary } from 'lodash';\r\n\r\n/**\r\n * Builds a dictionary out of the given key-value pairs.\r\n *\r\n * @param entries The key-value pairs out of which to build the dictionary.\r\n */\r\nexport function fromEntries<K extends keyof Dictionary<V>, V>(\r\n  entries: Iterable<[K, V]>\r\n): Dictionary<V> {\r\n  const result: Dictionary<V> = {};\r\n  for (const [key, value] of entries) {\r\n    result[key] = value;\r\n  }\r\n  return result;\r\n}\r\n","import { Dictionary } from 'lodash';\r\nimport { fromEntries } from './from-entries';\r\n\r\nfunction* parseQueryParams(queryParams: string[]): Generator<[string, string]> {\r\n  for (const queryParam of queryParams) {\r\n    const [key, value] = queryParam.split('=') as [string, string];\r\n\r\n    if (typeof value !== 'string')\r\n      throw new Error('Query param string is not correctly formatted');\r\n\r\n    yield [decodeURIComponent(key), decodeURIComponent(value)];\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the query parameters from the given `url` and returns them as a dictionary of key-value pairs\r\n *\r\n * @param url The URI string from which to get the query parameters\r\n */\r\nexport function getQueryParametersFromUrl(url: string): Dictionary<string> {\r\n  if (!url) return {};\r\n\r\n  const [, params] = url.split('?');\r\n\r\n  if (!params?.length) return {};\r\n\r\n  const queryParamString = params.split('#')[0];\r\n\r\n  if (!queryParamString?.length) return {};\r\n\r\n  const queryParams = queryParamString.split('&');\r\n\r\n  const parsedQueryParams = parseQueryParams(queryParams);\r\n\r\n  return fromEntries(parsedQueryParams);\r\n}\r\n","import { Dictionary, groupBy as _groupBy } from 'lodash';\r\n\r\n/**\r\n * Performs a group by operation on a dictionary based on one or multiple keys.\r\n * In the case of multiple keys, the resulting dictionary is indexed by a composite key delimited by # symbols.\r\n */\r\nexport function groupBy<T extends Dictionary<any>>(\r\n  /** The dataset to group */\r\n  data: T[],\r\n  /** The keys to group by */\r\n  keys: keyof T | [...(keyof T)[]]\r\n): Dictionary<T[]> {\r\n  // Harmonize the function inputs to always be an array\r\n  if (!Array.isArray(keys)) {\r\n    keys = [keys];\r\n  }\r\n\r\n  // Group the data by the given keys. If multiple keys are given, construct a composite key delimited by # symbols.\r\n  return _groupBy(data, item =>\r\n    (keys as (keyof T)[]).map(key => item[key]).join('#')\r\n  );\r\n}\r\n","import { Dictionary } from 'lodash';\r\nimport { SubType } from '../types';\r\n\r\n/**\r\n * Returns a dictionary containing all rows of the given `data` indexed by property `propertyName`.\r\n * The keys referenced by `propertyName` should be unique (e.g. an id).\r\n * If duplicate index keys do exist, only the last found row is indexed.\r\n *\r\n * A common use case for this function is to create a lookup table of a dataset.\r\n *\r\n * @param data The data to index\r\n * @param propertyName The name of the property to index by\r\n */\r\nexport function indexByProperty<T extends Dictionary<any>>(\r\n  data: Iterable<T>,\r\n  propertyName: keyof SubType<T, string | number>\r\n): Dictionary<T> {\r\n  // Iterate over the dataset and add every row to the index keyed by its respective value for `propertyName`.\r\n  const result: Dictionary<T> = {};\r\n  for (const row of data) {\r\n    result[row[propertyName as string | number]] = row;\r\n  }\r\n  return result;\r\n}\r\n","export * from './b64-to-b64url';\r\nexport * from './b64-to-blob';\r\nexport * from './b64url-to-b64';\r\nexport * from './build-worker-blob-url';\r\nexport * from './bytes-to-binary-string';\r\nexport * from './circular-replacer';\r\nexport * from './combinations';\r\nexport * from './copy-to-clipboard';\r\nexport * from './decode-xml';\r\nexport * from './enumerate';\r\nexport * from './find-last';\r\nexport * from './flatten-object';\r\nexport * from './from-entries';\r\nexport * from './get-query-parameters-from-url';\r\nexport * from './group-by';\r\nexport * from './index-by-property';\r\nexport * from './iterate';\r\nexport * from './iterator';\r\nexport * from './memoize';\r\nexport * from './pairs';\r\nexport * from './pairwise';\r\nexport * from './permutations';\r\nexport * from './race-until';\r\nexport * from './read-file-as-string';\r\nexport * from './rgb-to-hex';\r\nexport * from './save-as-file';\r\nexport * from './string-to-hash';\r\nexport * from './substrings';\r\nexport * from './union';\r\nexport * from './user-agent-is-edge';\r\nexport * from './user-agent-is-internet-explorer';\r\nexport * from './validate-required-arguments';\r\n","/**\r\n * Convenience function to help iterate over the given `iterator`.\r\n */\r\nexport function* iterate<T>(iterator: Iterator<T>): Iterable<T> {\r\n  let item: IteratorResult<T> = iterator.next();\r\n  while (!item.done) {\r\n    yield item.value;\r\n    item = iterator.next();\r\n  }\r\n}\r\n","/**\r\n * Returns an `Iterator` over every element of the given `iterable`.\r\n * @param iterable The collection of elements to iterate over\r\n */\r\nexport function* iterator<T>(iterable: Iterable<T>): Iterator<T> {\r\n  yield* iterable;\r\n}\r\n","import LRUMap from 'mnemonist/lru-map';\r\n\r\n/**\r\n * The default maximum size of the cache.\r\n */\r\nexport const defaultCacheLimit = 1000;\r\n\r\n/**\r\n * The default cache key resolver.\r\n * Returns the first argument as the cache key.\r\n * The first argument should therefore be a string.\r\n *\r\n * @param args the arguments from which to take the key.\r\n */\r\nexport const defaultResolver: MemoResolver<(\r\n  arg0: string,\r\n  ...args: any[]\r\n) => any> = (...args) => args[0];\r\n\r\n/**\r\n * Function that builds a cache key from its arguments.\r\n */\r\nexport type MemoResolver<T extends Memoizable> = (\r\n  ...args: Parameters<T>\r\n) => string;\r\n\r\n/**\r\n * Functions that match this type can be memoized.\r\n */\r\nexport type Memoizable = (...args: any[]) => any;\r\n\r\n/**\r\n * A memoized function caches its results by a key built from its arguments.\r\n */\r\nexport type Memoized<T extends Memoizable> = T & Memo<T>;\r\n\r\n/**\r\n * A memoized function exposes its cache as a read-only attribute.\r\n */\r\ninterface Memo<T extends Memoizable> {\r\n  /**\r\n   * The cache from which memoized results are retrieved.\r\n   */\r\n  readonly cache: Map<string, ReturnType<T>>;\r\n}\r\n\r\n/**\r\n * Optional settings for the memoize function.\r\n */\r\nexport interface MemoizeOptions<T extends Memoizable> {\r\n  /**\r\n   * The max number of items in the cache.\r\n   * When the size of the cache exceeds this limit, the least recently used items are removed from the cache.\r\n   * Defaults to `defaultCacheLimit`.\r\n   */\r\n  readonly cacheLimit?: number;\r\n  /**\r\n   * Function that returns the cache key.\r\n   * Defaults to `defaultResolver`.\r\n   */\r\n  readonly resolver?: MemoResolver<T>;\r\n}\r\n\r\n/**\r\n * Caches the results of the given function by a key built from its arguments.\r\n *\r\n * When the function is called again for the same arguments, the result is returned from the cache instead.\r\n *\r\n * Use `memoize` whenever you need to repeat an expensive computation often.\r\n *\r\n * If your function takes multiple arguments, or if the first argument of your function is not a string, you should pass a custom `resolver`.\r\n *\r\n * Whenever the size of the cache exceeds the given `cacheLimit`, the least recently used entries is removed from the cache.\r\n * You can optionally increase or decrease the size of the cache.\r\n *\r\n * @param func The function of which the results should be cached.\r\n * @param options Configuration parameters.\r\n */\r\nexport function memoize<T extends Memoizable>(\r\n  func: T,\r\n  {\r\n    cacheLimit = defaultCacheLimit,\r\n    resolver = defaultResolver\r\n  }: MemoizeOptions<T> = {}\r\n): Memoized<T> {\r\n  const cache = new LRUMap<string, ReturnType<T>>(cacheLimit);\r\n\r\n  function memoized(...args: Parameters<T>) {\r\n    const key = resolver.apply(null, args);\r\n\r\n    if (cache.has(key)) return cache.get(key);\r\n\r\n    const value = func.apply(null, args);\r\n\r\n    cache.set(key, value);\r\n\r\n    return value;\r\n  }\r\n\r\n  const result = Object.defineProperty(memoized, 'cache', {\r\n    get: () => cache\r\n  });\r\n\r\n  return result;\r\n}\r\n","import { iterator } from './iterator';\r\n\r\n/**\r\n * For two collections `A` and `B`, returns a list of tuples `[A, B]` representing the items at index `i` for every item in `A` and `B`.\r\n * If either `A` or `B` does not contain an item at index `i`, the respective side of the tuple will be `undefined`.\r\n */\r\nexport function* pairs<A, B>(\r\n  /* A collection */\r\n  a: Iterable<A>,\r\n  /* Another collection */\r\n  b: Iterable<B>\r\n): Generator<[A, B]> {\r\n  const iteratorA = iterator(a),\r\n    iteratorB = iterator(b);\r\n  for (\r\n    let itemA = iteratorA.next(), itemB = iteratorB.next();\r\n    !(itemA.done && itemB.done);\r\n    itemA = iteratorA.next(), itemB = iteratorB.next()\r\n  ) {\r\n    yield [itemA.value, itemB.value] as [A, B];\r\n  }\r\n}\r\n","/**\r\n * Returns a generator that returns every item from the given sequence, along with the previous item in the sequence.\r\n * @param items The seuqence of items\r\n */\r\nexport function* pairwise<T>(items: Iterable<T>): Generator<[T, T]> {\r\n  let previous: T;\r\n  for (const item of items) {\r\n    if (previous) {\r\n      yield [previous, item];\r\n    }\r\n    previous = item;\r\n  }\r\n}\r\n","/**\r\n * Returns all permutations of the given items that are of the given length\r\n * @param iterable The items for which to find all permutations\r\n * @param length The desired length of the permutations\r\n */\r\nexport function* permutations<T>(\r\n  iterable: Iterable<T>,\r\n  length: number\r\n): Generator<T[]> {\r\n  if (length === 0) return;\r\n\r\n  const seenItems = new Set<T>();\r\n\r\n  for (const currentItem of iterable) {\r\n    if (seenItems.has(currentItem)) continue;\r\n    if (length === 1) yield [currentItem];\r\n\r\n    for (const [...permutation] of permutations(seenItems, length - 1)) {\r\n      for (let i = 0; i <= permutation.length; i++) {\r\n        const [...clone] = permutation;\r\n        clone.splice(i, 0, currentItem);\r\n        yield clone;\r\n      }\r\n    }\r\n\r\n    seenItems.add(currentItem);\r\n  }\r\n}\r\n","/**\r\n * Returns a new `Promise` which resolves when either:\r\n * - One of the given `promises` resolves with a value which meets the given `predicate`. In this case, the resolved value is returned.\r\n * - None of the given `promises` resolves with a value which meets the given `predicate`. In this case, a default value (`null` by default) is returned instead.\r\n *\r\n * If one of the given `promises` rejects before a value which meets the given `predicate` is found, the result is rejected overall.\r\n */\r\nexport async function raceUntil<T>(\r\n  /** The promises to resolve */\r\n  promises: Promise<T>[],\r\n  /** The condition which the resolved value should fulfill */\r\n  predicate: (value: T) => boolean,\r\n  /** The value to return if none of the given promises resolves with a value which meets the given predicate */\r\n  defaultValue: T = null\r\n): Promise<T> {\r\n  const conditionalPromises = promises.map(\r\n    async promise =>\r\n      new Promise<T>((resolve, reject) =>\r\n        promise.then(value => predicate(value) && resolve(value), reject)\r\n      )\r\n  );\r\n\r\n  return Promise.race<T>([\r\n    ...conditionalPromises,\r\n    Promise.all(promises).then(() => defaultValue)\r\n  ]);\r\n}\r\n","/**\r\n * Returns the content of the given `file` as a `string`\r\n */\r\nexport async function readFileAsString(file: File): Promise<string> {\r\n  return new Promise<string>((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => resolve(reader.result as string);\r\n    reader.onerror = () => reject(reader.error);\r\n    reader.onabort = () => reject('Read process aborted');\r\n\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n","function componentToHex(c: number) {\r\n  const hex = c.toString(16);\r\n  return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\n\r\n/**\r\n * Converts an rgb value to a hex color value, prefixed with a #. Defaults to #000000 if one of the given values cannot be mapped to a hex value.\r\n * @param r the redness value between 0 and 255\r\n * @param g the blueness value between 0 and 255\r\n * @param b the greenness value between 0 and 255\r\n */\r\nexport function rgbToHex(r: number, g: number, b: number) {\r\n  return typeof r === 'number' && typeof g === 'number' && typeof b === 'number'\r\n    ? `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`\r\n    : '#000000';\r\n}\r\n","import { saveAs } from 'file-saver';\r\n\r\ndeclare var window: any;\r\n\r\n/**\r\n * Saves content in the form of a `string` or `Blob` to the user's device as a file with the given name.\r\n */\r\nexport function saveAsFile(content: string | Blob, name: string) {\r\n  if (typeof content === 'string') {\r\n    content = new Blob([content]);\r\n  }\r\n  if (window && window.navigator.msSaveOrOpenBlob) {\r\n    window.navigator.msSaveOrOpenBlob(content, name);\r\n  } else if (window && window.navigator.msSaveBlob) {\r\n    window.navigator.msSaveBlob(content, name);\r\n  } else {\r\n    const objectUrl = window.URL.createObjectURL(content);\r\n    saveAs(objectUrl, name);\r\n  }\r\n}\r\n","/**\r\n * Returns a unique hash for the given string\r\n */\r\nexport function stringToHash(string: string): number {\r\n  return string\r\n    .split('')\r\n    .reduce(\r\n      (prevHash, currVal) =>\r\n        ((prevHash << 5) - prevHash + currVal.charCodeAt(0)) | 0,\r\n      0\r\n    );\r\n}\r\n","export interface SubstringOptions {\r\n  /** The minimum length of the substrings. Default is `1`. */\r\n  minLength?: number;\r\n  /** The maximum length of the substrings. Default is the length of the given `string`. */\r\n  maxLength?: number;\r\n}\r\n\r\n/**\r\n * Returns all unique substrings of the given `string`. You can optionally specify a minimum and maximum substring length.\r\n * @param string The string for which to find all substrings.\r\n */\r\nexport function* substrings(\r\n  string: string,\r\n  { minLength = 1, maxLength = string.length }: SubstringOptions = {}\r\n): Generator<string> {\r\n  const seen = new Set<string>();\r\n  for (let i = 0; i <= string.length - minLength; i++) {\r\n    for (let j = i + minLength; j <= Math.min(maxLength, string.length); j++) {\r\n      const substring = string.slice(i, j);\r\n      if (!seen.has(substring)) {\r\n        yield substring;\r\n        seen.add(substring);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns a new object that represents the union between a and b. Nested objects are unified, nested lists are extended.\r\n */\r\nexport function union<A, B>(\r\n  /** The base object */\r\n  a: A,\r\n  /** The other object */\r\n  b: B,\r\n  /** Whether or not to overwrite properties that exist in both a and b in case of a primitive value or non-matching types */\r\n  overwrite = true\r\n): A & B {\r\n  // Make a shallow copy of the base object\r\n  const result = Object.assign({}, a) as A;\r\n\r\n  // Iterate over the keys in the other object and assign its values to the result object\r\n  Object.keys(b).forEach((key: string) => {\r\n    const newValue = b[key];\r\n\r\n    // If the property already exists in the result object...\r\n    if (result.hasOwnProperty(key)) {\r\n      const currentValue = result[key];\r\n\r\n      // If the types between A and B don't match, or if the value is a primitive...\r\n      if (\r\n        Object(newValue) !== newValue ||\r\n        newValue.constructor !== currentValue.constructor\r\n      ) {\r\n        if (overwrite) {\r\n          result[key] = newValue;\r\n        }\r\n      }\r\n\r\n      // Else, if the value is an array\r\n      else if (Array.isArray(newValue)) {\r\n        result[key] = currentValue.concat(newValue);\r\n      }\r\n\r\n      // Else, if the value is a set\r\n      else if (newValue instanceof Set) {\r\n        result[key] = new Set([Array.from(currentValue), Array.from(newValue)]);\r\n      }\r\n\r\n      // Else, if the value is a random object\r\n      else {\r\n        result[key] = union(currentValue, newValue);\r\n      }\r\n    }\r\n\r\n    // Otherwise simply assign the value\r\n    else {\r\n      result[key] = newValue;\r\n    }\r\n  });\r\n\r\n  return result as A & B;\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Returns `true` if the current User Agent is a Microsoft Edge (non-chromium) variant.\r\n */\r\nexport function userAgentIsEdge() {\r\n  return ['Edge/'].some(\r\n    userAgent => window && window.navigator.userAgent.includes(userAgent)\r\n  );\r\n}\r\n","declare var window: any;\r\n\r\n/**\r\n * Returns `true` if the current User Agent is an Internet Explorer variant.\r\n */\r\nexport function userAgentIsInternetExplorer() {\r\n  return ['MSIE ', 'Trident/'].some(\r\n    userAgent => window && window.navigator.userAgent.includes(userAgent)\r\n  );\r\n}\r\n","import { Dictionary, isNil } from 'lodash';\r\n\r\n/**\r\n * Throws an error if any of the given `args` cannot be validated.\r\n * By default, checks whether any argument is `null` or `undefined`.\r\n *\r\n * Use this function to check the required parameters of any function, such as an API call.\r\n *\r\n * @example function exampleApiCall(\r\n *            requiredArgumentA: string,\r\n *            requiredArgumentB: number,\r\n *            options: ExampleApiCallOptions = {}\r\n *          ) {\r\n *            // Validate the required arguments for the API call before we do anything else.\r\n *            // By passing the `arguments` variable, we check all function parameters, including `options`.\r\n *            // This works since `options` has a default value.\r\n *            validateRequiredArguments(arguments, 'exampleApiCall');\r\n *\r\n *            // If not all parameters are required, you can validate a subset by passing an array or an object.\r\n *            // In the example below, we exclude `requiredArgumentB` and `options` from the check.\r\n *            validateRequiredArguments([requiredArgumentA], 'exampleApiCall');\r\n *            validateRequiredArguments({requiredArgumentA}, 'exampleApiCall');\r\n *          }\r\n *\r\n *          // Let's now call `exampleApiCall` with null as the first parameter.\r\n *          // This results in an error telling us the parameter at index 0 was invalid.\r\n *          exampleApiCall(null, 0);\r\n *          // -> Error: Required parameter 0 was null when calling exampleApiCall.\r\n */\r\nexport function validateRequiredArguments(\r\n  /** The arguments to validate. */\r\n  args: Dictionary<any>,\r\n  /**\r\n   * The name of the function to which the arguments belong.\r\n   * Passing the function name ensures a meaningful error message from uglified code.\r\n   */\r\n  calleeName: string,\r\n  /**\r\n   * The function used to validate each of the given arguments.\r\n   * It should return `true` if the given argument is invalid.\r\n   * By default, checks whether the given argument is `null` or `undefined`.\r\n   */\r\n  isInvalidFn: (arg: any) => boolean = isNil\r\n) {\r\n  const invalidArgument = Object.entries(args).find(([, value]) =>\r\n    isInvalidFn(value)\r\n  );\r\n  \r\n  if (invalidArgument) {\r\n    throw new Error(\r\n      `Required parameter ${invalidArgument[0]} was ${\r\n        invalidArgument[1]\r\n      } when calling ${calleeName}.`\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * When the value emitted by the source observable is either `null`, `undefined` or `NaN`, emit the given `defaultValue` instead\r\n * @param defaultValue The value to emit when the source observable emits `null`, `undefined` or `NaN`\r\n */\r\nexport function defaultIfFalsy<T>(\r\n  defaultValue: T\r\n): (source: Observable<T>) => Observable<T> {\r\n  return source => source.pipe(map(value => value ?? defaultValue));\r\n}\r\n","export * from './default-if-falsy';\r\nexport * from './switch-tap';\r\nexport * from './until-destroyed';\r\n","import { concat, MonoTypeOperatorFunction, Observable, of } from 'rxjs';\r\nimport { ignoreElements, switchMap } from 'rxjs/operators';\r\n\r\n/**\r\n * Perform an asynchronous side effect for every emission of the source Observable, but return an observable that is identical to the source.\r\n */\r\nexport function switchTap<T, R>(\r\n  next: (x: T) => Observable<R>\r\n): MonoTypeOperatorFunction<T>;\r\nexport function switchTap<R>(\r\n  observable: Observable<R>\r\n): MonoTypeOperatorFunction<R>;\r\nexport function switchTap<T, R>(\r\n  arg: Observable<T> | ((x: T) => Observable<R>)\r\n): MonoTypeOperatorFunction<T> {\r\n  const next: (x: any) => Observable<T | R> =\r\n    typeof arg === 'function' ? arg : (x: any): Observable<T> => arg;\r\n  return switchMap(value =>\r\n    concat(next(value).pipe(ignoreElements()), of(value))\r\n  );\r\n}\r\n","import { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { OnDestroy } from '@angular/core';\r\n\r\nconst untilDestroyedSymbol = Symbol('untilDestroyed');\r\n\r\n/**\r\n * RxJS operator that stops emissions from the source `Observable` when the specified method is called on the given object.\r\n * This operator provides a convenient overload which hooks into the `OnDestroy` Angular lifecycle event on an Angular Component, Directive or Service.\r\n * By default, references the `ngOnDestroy` lifecycle hook.\r\n *\r\n * When using the default, `ngOnDestroy` must be present on the referenced component or service, even if the implementation of the given method is empty.\r\n *\r\n * **IMPORTANT**: Add the `untilDestroyed` operator as the last one to prevent leaks with intermediate observables in the\r\n * operator chain.\r\n * \r\n * @example\r\n * export class ExampleComponent implements OnInit, OnDestroy {\r\n *                ngOnInit() {\r\n *                  // This stream prints a message to the console every second until this component is destroyed\r\n *                  interval(1000)\r\n *                    .pipe(untilDestroyed(this))\r\n *                    .subscribe(console.log);\r\n *                 }\r\n *\r\n *                // This method must be present, even if empty.\r\n *                ngOnDestroy() {\r\n *                  // To protect you, an error will be thrown if it doesn't exist.\r\n *                }\r\n * }\r\n */\r\nexport function untilDestroyed<T>(\r\n  /** The parent Angular component or object instance. */\r\n  instance: OnDestroy\r\n): (source: Observable<T>) => Observable<T>;\r\nexport function untilDestroyed<T>(\r\n  /** The parent Angular component or object instance. */\r\n  instance: object,\r\n  /** The method to hook on. Defaults to `ngOnDestroy`. */\r\n  destroyMethodName: string = 'ngOnDestroy'\r\n): (source: Observable<T>) => Observable<T> {\r\n  return (source: Observable<T>) => {\r\n    const originalDestroy = instance[destroyMethodName];\r\n    const hasDestroyFunction = typeof originalDestroy === 'function';\r\n\r\n    if (!hasDestroyFunction) {\r\n      throw new Error(\r\n        `${\r\n          instance.constructor.name\r\n        } is using untilDestroyed but doesn't implement ${destroyMethodName}`\r\n      );\r\n    }\r\n\r\n    if (!instance[untilDestroyedSymbol]) {\r\n      instance[untilDestroyedSymbol] = new Subject();\r\n\r\n      instance[destroyMethodName] = function() {\r\n        if (hasDestroyFunction) {\r\n          originalDestroy.apply(this, arguments);\r\n        }\r\n        instance[untilDestroyedSymbol].next();\r\n        instance[untilDestroyedSymbol].complete();\r\n      };\r\n    }\r\n\r\n    return source.pipe(takeUntil<T>(instance[untilDestroyedSymbol]));\r\n  };\r\n}\r\n","export { VersionConfig } from './lib/version-config.service';\r\nexport * from './lib/version.module';\r\nexport * from './lib/version.service';\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface VersionConfig {\r\n  /**\r\n   * The name of the application\r\n   */\r\n  readonly appName?: string;\r\n  /**\r\n   * Whether or not the application is running in production mode\r\n   */\r\n  readonly production?: boolean;\r\n}\r\n\r\nexport const VersionConfigService = new InjectionToken<VersionConfig>(\r\n  'VersionConfig'\r\n);\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { VersionConfig, VersionConfigService } from './version-config.service';\r\nimport { VersionService } from './version.service';\r\n\r\ndeclare var window: Window;\r\n\r\n@NgModule()\r\nexport class VersionModule {\r\n  constructor(\r\n    private readonly versionService: VersionService,\r\n    @Optional() @SkipSelf() parentModule: VersionModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'VersionModule is already loaded. Import it in the AppModule only'\r\n      );\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  static forRoot(\r\n    config: VersionConfig = {}\r\n  ): ModuleWithProviders<VersionModule> {\r\n    return {\r\n      ngModule: VersionModule,\r\n      providers: [\r\n        VersionService,\r\n        {\r\n          provide: VersionConfigService,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private init() {\r\n    /**\r\n     * Makes the version of the application and its connected services accessible from the browser console as a function called `version()`.\r\n     */\r\n    if (window && !window['version']) {\r\n      window['version'] = (forceUpdate: boolean = false) => {\r\n        this.versionService.getVersionDescriptor(forceUpdate).then(console.dir);\r\n        return 'Retrieving a version descriptor of the application and connected services...';\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { repositoryVersion } from '@models4insight/repository';\r\nimport { hash as gitHash } from 'git-version.json';\r\nimport { version as packageVersion } from 'package.json';\r\nimport { VersionConfig, VersionConfigService } from './version-config.service';\r\n\r\n@Injectable()\r\nexport class VersionService {\r\n  /** The name of the application */\r\n  readonly appName: string;\r\n\r\n  /**\r\n   * The version string for this application.\r\n   * The version string is composed of the node package version and the git hash, delimited by a `#` sign.\r\n   * If not in production mode, the version string also includes a `-dev` suffix.\r\n   */\r\n  readonly appVersion: string;\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(VersionConfigService)\r\n    private readonly config: VersionConfig = {}\r\n  ) {\r\n    this.appName = this.config.appName;\r\n    this.appVersion = `${packageVersion}#${gitHash}${\r\n      this.config.production ? '' : '-dev'\r\n    }`;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the version string of the repository to which the application connects.\r\n   * The version string is composed of the release number and the git hash, delimited by a `#` sign.\r\n   * If the version string could not be retrieved for any reason, returns `unknown` instead.\r\n   * @param forceUpdate Whether or not to refresh the cache\r\n   */\r\n  async getRepositoryVersion(forceUpdate: boolean = false): Promise<string> {\r\n    try {\r\n      const { version } = await repositoryVersion({ forceUpdate }).toPromise();\r\n      return version;\r\n    } catch {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an object which represents the version of the app and connected services.\r\n   * @param forceUpdate Whether or not to refresh the cache\r\n   */\r\n  async getVersionDescriptor(forceUpdate: boolean = false) {\r\n    // Resolve the version strings of the connected services concurrently\r\n    const [repository] = await Promise.all([\r\n      this.getRepositoryVersion(forceUpdate)\r\n    ]);\r\n\r\n    return {\r\n      app: this.appVersion,\r\n      production: this.config.production,\r\n      repository\r\n    };\r\n  }\r\n}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { faChartLine, faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/search/browse', pathMatch: 'full' },\r\n  {\r\n    path: 'search',\r\n    loadChildren: () =>\r\n      import('./search/search.module').then(m => m.SearchModule),\r\n    data: { title: 'Search', icon: faSearch }\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    loadChildren: () =>\r\n      import('./dashboards/dashboard.module').then(m => m.DashboardModule),\r\n    data: { title: 'Dashboard', icon: faChartLine }\r\n  },\r\n  // Fallback when no prior route is matched\r\n  { path: '**', redirectTo: '', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, { scrollPositionRestoration: 'enabled' })\r\n  ],\r\n  exports: [RouterModule],\r\n  providers: []\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core'\r\n\r\n@Component({\r\n    selector: 'models4insight-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n","<router-outlet>\r\n\r\n</router-outlet>\r\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AtlasApiModule } from '@models4insight/atlas/api';\r\nimport { Core } from '@models4insight/core';\r\nimport { I18nService } from '@models4insight/i18n';\r\nimport { environment } from '../environments/environment';\r\nimport enUS from '../translations/en-US.json';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    ...Core.imports(environment),\r\n    AtlasApiModule,\r\n    HttpClientModule,\r\n    AppRoutingModule // must be imported as the last module as it contains the fallback route\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n  constructor(private readonly i18nService: I18nService) {\r\n    this.i18nService.setTranslation('en-US', enUS);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  name: 'm4i_atlas',\r\n  googleAnalyticsMeasurementID: 'UA-138345924-1',\r\n  i18n: {\r\n    defaultLanguage: 'en-US',\r\n    languages: {}\r\n  },\r\n  keycloak: {\r\n    url: '/auth',\r\n    realm: 'm4i',\r\n    clientId: 'm4i_thijs'\r\n  },\r\n  notifications: {\r\n    badgePath: 'assets/m4i-icon.png',\r\n    iconPath: 'assets/m4i-icon.png'\r\n  },\r\n  production: false,\r\n  shell: {\r\n    appCopyright: 2022,\r\n    appLogoPath: 'assets/m4i-platform-logo.png',\r\n    appName: 'Models4Insight Data Governance',\r\n  }\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\nimport 'zone.js/dist/zone-error'; // Included with Angular CLI.\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}